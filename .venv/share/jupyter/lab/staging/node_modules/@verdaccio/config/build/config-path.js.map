{"version":3,"file":"config-path.js","names":["_debug","_interopRequireDefault","require","_fs","_lodash","_os","_path","_configUtils","e","__esModule","default","CONFIG_FILE","XDG","pkgJSON","name","debug","buildDebug","findConfigFile","configPath","configLocation","path","resolve","configPaths","getConfigPaths","length","Error","primaryConf","_","find","fileExists","createConfigFile","createConfigFolder","defaultConfig","updateStorageLinks","readDefaultConfig","fs","writeFileSync","pathDefaultConf","__dirname","accessSync","constants","R_OK","TypeError","readFileSync","folder","dirname","mkdirSync","recursive","type","dataDir","process","env","XDG_DATA_HOME","join","HOME","folderExists","replace","listPaths","getXDGDirectory","getWindowsDirectory","getRelativeDefaultDirectory","getOldDirectory","reduce","acc","currentValue","push","xDGConfigPath","XDG_CONFIG_HOME","os","platform","APPDATA","relativePath","oldPath"],"sources":["../src/config-path.ts"],"sourcesContent":["import buildDebug from 'debug';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport os from 'os';\nimport path from 'path';\n\nimport { fileExists, folderExists } from './config-utils';\n\nconst CONFIG_FILE = 'config.yaml';\nconst XDG = 'xdg';\n// eslint-disable-next-line\nconst pkgJSON = {\n  name: 'verdaccio',\n};\n\nexport type SetupDirectory = {\n  path: string;\n  type: 'xdg' | 'win' | 'win32' | 'def' | 'old';\n};\n\nconst debug = buildDebug('verdaccio:config:config-path');\n\n/**\n * Find and get the first config file that match.\n * @return {String} the config file path\n */\nfunction findConfigFile(configPath?: string): string {\n  debug('searching for config file %o', configPath);\n  if (typeof configPath !== 'undefined') {\n    const configLocation = path.resolve(configPath);\n    debug('custom location %s', configLocation);\n    return configLocation;\n  }\n\n  const configPaths: SetupDirectory[] = getConfigPaths();\n  debug('%o posible locations found', configPaths.length);\n  if (configPaths.length === 0) {\n    debug('no configuration files can be processed');\n    // this should never happens\n    throw new Error('no configuration files can be processed');\n  }\n\n  // find the first location that already exist\n  const primaryConf: SetupDirectory | void = _.find(configPaths, (configLocation: SetupDirectory) =>\n    fileExists(configLocation.path)\n  );\n\n  if (typeof primaryConf !== 'undefined') {\n    debug('at least one primary location detected at %s', primaryConf?.path);\n    return primaryConf.path;\n  }\n  debug('no previous location found, creating a new one');\n  debug('generating the first match path location  %s', configPaths[0].path);\n  return createConfigFile(configPaths[0]).path;\n}\n\nfunction createConfigFile(configLocation: SetupDirectory): SetupDirectory {\n  createConfigFolder(configLocation);\n\n  const defaultConfig = updateStorageLinks(configLocation, readDefaultConfig());\n\n  fs.writeFileSync(configLocation.path, defaultConfig);\n\n  return configLocation;\n}\n\nexport function readDefaultConfig(): string {\n  const pathDefaultConf: string = path.resolve(__dirname, 'conf/default.yaml');\n  try {\n    debug('the path of default config used from %s', pathDefaultConf);\n    fs.accessSync(pathDefaultConf, fs.constants.R_OK);\n    debug('configuration file has enough permissions for reading');\n  } catch {\n    debug('configuration file does not have enough permissions for reading');\n    throw new TypeError('configuration file does not have enough permissions for reading');\n  }\n\n  return fs.readFileSync(pathDefaultConf, 'utf8');\n}\n\nfunction createConfigFolder(configLocation): void {\n  const folder = path.dirname(configLocation.path);\n  debug(`creating default config file folder at %o`, folder);\n  fs.mkdirSync(folder, { recursive: true });\n  debug(`folder %o created`, folder);\n}\n\n/**\n * Update the storage links to the new location if it is necessary.\n * @param configLocation\n * @param defaultConfig\n * @returns\n */\nfunction updateStorageLinks(configLocation: SetupDirectory, defaultConfig: string): string {\n  debug('checking storage links for %s and type %s', configLocation.path, configLocation.type);\n  if (configLocation.type !== XDG) {\n    debug(`skip storage override for %s`, configLocation.type);\n    return defaultConfig;\n  }\n\n  // $XDG_DATA_HOME defines the base directory relative to which user specific data\n  // files should be stored, If $XDG_DATA_HOME is either not set or empty, a default\n  // equal to $HOME/.local/share should be used.\n  let dataDir =\n    process.env.XDG_DATA_HOME || path.join(process.env.HOME as string, '.local', 'share');\n  if (folderExists(dataDir)) {\n    debug(`previous storage located`);\n    debug(`update storage links to %s`, dataDir);\n    dataDir = path.resolve(path.join(dataDir, pkgJSON.name, 'storage'));\n    return defaultConfig.replace(/^storage: .\\/storage$/m, `storage: ${dataDir}`);\n  }\n  debug(`could not find a previous storage location, skip override`);\n  return defaultConfig;\n}\n\n/**\n * Return a list of configuration locations by platform.\n * @returns\n */\nfunction getConfigPaths(): SetupDirectory[] {\n  const listPaths: (SetupDirectory | void)[] = [\n    getXDGDirectory(),\n    getWindowsDirectory(),\n    getRelativeDefaultDirectory(),\n    getOldDirectory(),\n  ];\n\n  return listPaths.reduce(function (acc, currentValue: SetupDirectory | void): SetupDirectory[] {\n    if (typeof currentValue !== 'undefined') {\n      debug(\n        'posible directory path generated %s for type %s',\n        currentValue?.path,\n        currentValue.type\n      );\n      acc.push(currentValue);\n    }\n    return acc;\n  }, [] as SetupDirectory[]);\n}\n\n/**\n * Get XDG_CONFIG_HOME or HOME location (usually unix)\n *\n * The XDG_CONFIG_HOME environment variable is also part of the XDG Base Directory Specification,\n * which aims to standardize the locations where applications store configuration files and other\n * user-specific data on Unix-like operating systems.\n *\n *\n *\n * https://specifications.freedesktop.org/basedir-spec/latest/\n *\n *\n * @returns\n */\nconst getXDGDirectory = (): SetupDirectory | void => {\n  const xDGConfigPath =\n    process.env.XDG_CONFIG_HOME || (process.env.HOME && path.join(process.env.HOME, '.config'));\n  debug('XDGConfig folder path %s', xDGConfigPath);\n  if (xDGConfigPath && folderExists(xDGConfigPath)) {\n    debug('XDGConfig folder path %s', xDGConfigPath);\n    return {\n      path: path.join(xDGConfigPath, pkgJSON.name, CONFIG_FILE),\n      type: XDG,\n    };\n  }\n};\n\n/**\n * Detect windows location, APPDATA\n * usually something like C:\\User\\<Build User>\\AppData\\Local\n * @returns\n */\nconst getWindowsDirectory = (): SetupDirectory | void => {\n  if (os.platform() === 'win32' && process.env.APPDATA && folderExists(process.env.APPDATA)) {\n    debug('windows appdata folder path %s', process.env.APPDATA);\n    return {\n      path: path.resolve(path.join(process.env.APPDATA, pkgJSON.name, CONFIG_FILE)),\n      type: 'win',\n    };\n  }\n};\n\n/**\n * Return relative directory, this is the default.\n * It will cretate config in your {currentLocation/verdaccio/config.yaml}\n * @returns\n */\nconst getRelativeDefaultDirectory = (): SetupDirectory => {\n  const relativePath = path.resolve(path.join('.', pkgJSON.name, CONFIG_FILE));\n  debug('relative folder path %s', relativePath);\n  return {\n    path: relativePath,\n    type: 'def',\n  };\n};\n\n/**\n * This should never happens, consider it DEPRECATED\n * @returns\n */\nconst getOldDirectory = (): SetupDirectory => {\n  const oldPath = path.resolve(path.join('.', CONFIG_FILE));\n  debug('old folder path %s', oldPath);\n  return {\n    path: oldPath,\n    type: 'old',\n  };\n};\n\nexport { findConfigFile };\n"],"mappings":"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","ignoreList":[]}