/// <reference types="node" />
import { pluginUtils } from '@verdaccio/core';
import { Config, Logger, RemoteUser, Security } from '@verdaccio/types';
import { ActionsAllowed, AllowAction, AuthMiddlewarePayload, AuthTokenHeader, TokenEncryption } from './types';
/**
 * Split authentication header eg: Bearer [secret_token]
 * @param authorizationHeader auth token
 */
export declare function parseAuthTokenHeader(authorizationHeader: string): AuthTokenHeader;
export declare function parseAESCredentials(authorizationHeader: string, secret: string): string | void;
export declare function getMiddlewareCredentials(security: Security, secretKey: string, authorizationHeader: string): AuthMiddlewarePayload;
export declare function isAESLegacy(security: Security): boolean;
export declare function getApiToken(auth: TokenEncryption, config: Config, remoteUser: RemoteUser, aesPassword: string): Promise<string | void>;
export declare const expireReasons: string[];
export declare function verifyJWTPayload(token: string, secret: string): RemoteUser;
export declare function isAuthHeaderValid(authorization: string): boolean;
/**
 * Return a default configuration for authentication if none is provided.
 * @param logger {Logger}
 * @returns object of default implementations.
 */
export declare function getDefaultPlugins(logger: Logger): pluginUtils.Auth<Config>;
export declare function allow_action(action: ActionsAllowed, logger: Logger): AllowAction;
/**
 *
 */
export declare function handleSpecialUnpublish(logger: Logger): any;
export declare function buildUser(name: string, password: string): string;
export declare function convertPayloadToBase64(payload: string): Buffer;
