"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncLoadPlugin = asyncLoadPlugin;
exports.executePlugin = executePlugin;
var _debug = _interopRequireDefault(require("debug"));
var _fs = _interopRequireDefault(require("fs"));
var _path = require("path");
var _logger = require("@verdaccio/logger");
var _utils = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('verdaccio:plugin:loader:async');
const {
  lstat
} = _fs.default.promises ? _fs.default.promises : require('fs/promises');
async function isDirectory(pathFolder) {
  const stat = await lstat(pathFolder);
  return stat.isDirectory();
}
// type Plugins<T> =
//   | pluginUtils.Auth<T>
//   | pluginUtils.Storage<T>
//   | pluginUtils.ExpressMiddleware<T, unknown, unknown>;

/**
 * The plugin loader find recursively plugins, if one plugin fails is ignored and report the error to the logger.
 *
 * The loader follows the order:
 * - If the at the `config.yaml` file the  `plugins: ./plugins` is defined
 *   - If is absolute will use the provided path
 *   - If is relative, will use the base path of the config file. eg: /root/config.yaml the plugins folder should be
 *     hosted at /root/plugins
 * - The next step is find at the node_modules or global based on the `require` native algorithm.
 * - If the package is scoped eg: @scope/foo, try to load the package `@scope/foo`
 * - If the package is not scoped, will use the default prefix: verdaccio-foo.
 * - If a custom prefix is provided, the verdaccio- is replaced by the config.server.pluginPrefix.
 *
 * The `sanityCheck` is the validation for the required methods to load the plugin, if the validation fails the plugin won't be loaded.
 * The `params` is an object that contains the global configuration and the logger.
 *
 * @param {*} pluginConfigs the custom plugin section
 * @param {*} params a set of params to initialize the plugin
 * @param {*} sanityCheck callback that check the shape that should fulfill the plugin
 * @param {*} prefix by default is verdaccio but can be override with config.server.pluginPrefix
 * @return {Array} list of plugins
 */
async function asyncLoadPlugin(pluginConfigs = {}, params, sanityCheck, prefix = 'verdaccio', pluginCategory = '') {
  const pluginsIds = Object.keys(pluginConfigs);
  const {
    config
  } = params;
  let plugins = [];
  for (let pluginId of pluginsIds) {
    debug('plugin %s', pluginId);
    if (typeof config.plugins === 'string') {
      let pluginsPath = config.plugins;
      debug('plugin path %s', pluginsPath);
      if (!(0, _path.isAbsolute)(pluginsPath)) {
        if (typeof config.config_path === 'string' && !config.configPath) {
          _logger.logger.error('configPath is missing and the legacy config.config_path is not available for loading plugins');
        }
        if (!config.configPath) {
          _logger.logger.error('config path property is required for loading plugins');
          continue;
        }
        pluginsPath = (0, _path.resolve)((0, _path.join)((0, _path.dirname)(config.configPath), pluginsPath));
      }
      _logger.logger.debug({
        path: pluginsPath
      }, 'plugins folder defined, loading plugins from @{path} ');
      // throws if is not a directory
      try {
        await isDirectory(pluginsPath);
        const pluginDir = pluginsPath;
        const externalFilePlugin = (0, _path.resolve)(pluginDir, `${prefix}-${pluginId}`);
        let plugin = (0, _utils.tryLoad)(externalFilePlugin, (a, b) => {
          _logger.logger.error(a, b);
        });
        if (plugin && (0, _utils.isValid)(plugin)) {
          plugin = executePlugin(plugin, pluginConfigs[pluginId], params);
          if (!sanityCheck(plugin)) {
            _logger.logger.error({
              content: externalFilePlugin
            }, "@{content} doesn't look like a valid plugin");
            continue;
          }
          plugins.push(plugin);
          _logger.logger.info({
            prefix,
            pluginId,
            pluginCategory
          }, 'plugin @{prefix}-@{pluginId} successfully loaded (@{pluginCategory})');
          continue;
        }
      } catch (err) {
        _logger.logger.warn({
          err: err.message,
          pluginsPath,
          pluginId
        }, '@{err} on loading plugins at @{pluginsPath} for @{pluginId}');
      }
    }
    if (typeof pluginId === 'string') {
      const isScoped = pluginId.startsWith('@') && pluginId.includes('/');
      debug('is scoped plugin %s', isScoped);
      const pluginName = isScoped ? pluginId : `${prefix}-${pluginId}`;
      debug('plugin pkg name %s', pluginName);
      let plugin = (0, _utils.tryLoad)(pluginName, (a, b) => {
        _logger.logger.error(a, b);
      });
      if (plugin && (0, _utils.isValid)(plugin)) {
        plugin = executePlugin(plugin, pluginConfigs[pluginId], params);
        if (!sanityCheck(plugin)) {
          _logger.logger.error({
            content: pluginName
          }, "@{content} doesn't look like a valid plugin");
          continue;
        }
        plugins.push(plugin);
        _logger.logger.info({
          prefix,
          pluginId,
          pluginCategory
        }, 'plugin @{prefix}-@{pluginId} successfully loaded (@{pluginCategory})');
        continue;
      } else {
        _logger.logger.error({
          pluginName
        }, 'package not found, try to install @{pluginName} with a package manager');
        continue;
      }
    }
  }
  debug('plugin found %s', plugins.length);
  return plugins;
}
function executePlugin(plugin, pluginConfig, params) {
  if ((0, _utils.isES6)(plugin)) {
    debug('plugin is ES6');
    // @ts-expect-error no relevant for the code
    // eslint-disable-next-line new-cap
    return new plugin.default(pluginConfig, params);
  } else {
    debug('plugin is commonJS');
    // @ts-expect-error improve this type
    return plugin(pluginConfig, params);
  }
}
//# sourceMappingURL=plugin-async-loader.js.map