"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderHTML;
exports.resolveLogo = resolveLogo;
var _debug = _interopRequireDefault(require("debug"));
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _path = _interopRequireDefault(require("path"));
var _url = require("url");
var _config = require("@verdaccio/config");
var _core = require("@verdaccio/core");
var _url2 = require("@verdaccio/url");
var _template = _interopRequireDefault(require("./template"));
var _webUtils = require("./web-utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const DEFAULT_LANGUAGE = 'es-US';
const cache = new _lruCache.default({
  max: 500,
  ttl: 1000 * 60 * 60
});
const debug = (0, _debug.default)('verdaccio:web:render');
const defaultManifestFiles = {
  js: ['runtime.js', 'vendors.js', 'main.js'],
  ico: 'favicon.ico',
  css: []
};
function resolveLogo(logo, url_prefix, requestOptions) {
  if (typeof logo !== 'string') {
    return '';
  }
  const isLocalFile = logo && !(0, _url2.isURLhasValidProtocol)(logo);
  if (isLocalFile) {
    return `${(0, _url2.getPublicUrl)(url_prefix, requestOptions)}-/static/${_path.default.basename(logo)}`;
  } else if ((0, _url2.isURLhasValidProtocol)(logo)) {
    return logo;
  } else {
    return '';
  }
}
function renderHTML(config, manifest, manifestFiles, requestOptions, res) {
  var _config$i18n$web, _config$i18n, _config$web$hideDepre, _config$web, _config$web2, _config$web3, _config$web$darkMode, _config$web4, _config$web$title, _config$web5, _config$web$scope, _config$web6, _config$web7, _config$web8, _config$web9, _config$web$pkgManage, _config$web10, _res$locals$app_versi, _validatePrimaryColor, _config$web$primary_c, _config$web11, _config$web12;
  const {
    url_prefix
  } = config;
  const base = (0, _url2.getPublicUrl)(config === null || config === void 0 ? void 0 : config.url_prefix, requestOptions);
  const basename = new _url.URL(base).pathname;
  const language = (_config$i18n$web = config === null || config === void 0 || (_config$i18n = config.i18n) === null || _config$i18n === void 0 ? void 0 : _config$i18n.web) !== null && _config$i18n$web !== void 0 ? _config$i18n$web : DEFAULT_LANGUAGE;
  const hideDeprecatedVersions = (_config$web$hideDepre = config === null || config === void 0 || (_config$web = config.web) === null || _config$web === void 0 ? void 0 : _config$web.hideDeprecatedVersions) !== null && _config$web$hideDepre !== void 0 ? _config$web$hideDepre : false;
  // @ts-ignore
  const needHtmlCache = [undefined, null].includes(config === null || config === void 0 || (_config$web2 = config.web) === null || _config$web2 === void 0 ? void 0 : _config$web2.html_cache) ? true : config === null || config === void 0 || (_config$web3 = config.web) === null || _config$web3 === void 0 ? void 0 : _config$web3.html_cache;
  const darkMode = (_config$web$darkMode = config === null || config === void 0 || (_config$web4 = config.web) === null || _config$web4 === void 0 ? void 0 : _config$web4.darkMode) !== null && _config$web$darkMode !== void 0 ? _config$web$darkMode : false;
  const title = (_config$web$title = config === null || config === void 0 || (_config$web5 = config.web) === null || _config$web5 === void 0 ? void 0 : _config$web5.title) !== null && _config$web$title !== void 0 ? _config$web$title : _config.WEB_TITLE;
  const login = (0, _webUtils.hasLogin)(config);
  const scope = (_config$web$scope = config === null || config === void 0 || (_config$web6 = config.web) === null || _config$web6 === void 0 ? void 0 : _config$web6.scope) !== null && _config$web$scope !== void 0 ? _config$web$scope : '';
  const favicon = resolveLogo(config === null || config === void 0 || (_config$web7 = config.web) === null || _config$web7 === void 0 ? void 0 : _config$web7.favicon, config === null || config === void 0 ? void 0 : config.url_prefix, requestOptions);
  const logo = resolveLogo(config === null || config === void 0 || (_config$web8 = config.web) === null || _config$web8 === void 0 ? void 0 : _config$web8.logo, config === null || config === void 0 ? void 0 : config.url_prefix, requestOptions);
  const logoDark = resolveLogo(config === null || config === void 0 || (_config$web9 = config.web) === null || _config$web9 === void 0 ? void 0 : _config$web9.logoDark, config === null || config === void 0 ? void 0 : config.url_prefix, requestOptions);
  const pkgManagers = (_config$web$pkgManage = config === null || config === void 0 || (_config$web10 = config.web) === null || _config$web10 === void 0 ? void 0 : _config$web10.pkgManagers) !== null && _config$web$pkgManage !== void 0 ? _config$web$pkgManage : ['yarn', 'pnpm', 'npm'];
  const version = (_res$locals$app_versi = res.locals.app_version) !== null && _res$locals$app_versi !== void 0 ? _res$locals$app_versi : '';
  const flags = {
    ...config.flags,
    // legacy from 5.x
    ...config.experiments
  };
  const primaryColor = (_validatePrimaryColor = (0, _webUtils.validatePrimaryColor)((_config$web$primary_c = config === null || config === void 0 || (_config$web11 = config.web) === null || _config$web11 === void 0 ? void 0 : _config$web11.primary_color) !== null && _config$web$primary_c !== void 0 ? _config$web$primary_c : config === null || config === void 0 || (_config$web12 = config.web) === null || _config$web12 === void 0 ? void 0 : _config$web12.primaryColor)) !== null && _validatePrimaryColor !== void 0 ? _validatePrimaryColor : '#4b5e40';
  const {
    scriptsBodyAfter,
    metaScripts,
    scriptsbodyBefore,
    showInfo,
    showSettings,
    showThemeSwitch,
    showFooter,
    showSearch,
    showDownloadTarball,
    showRaw,
    showUplinks
  } = Object.assign({}, {
    scriptsBodyAfter: [],
    bodyBefore: [],
    metaScripts: []
  }, config === null || config === void 0 ? void 0 : config.web);
  const options = {
    showInfo,
    showSettings,
    showThemeSwitch,
    showFooter,
    showSearch,
    showDownloadTarball,
    showRaw,
    showUplinks,
    darkMode,
    url_prefix,
    basename,
    base,
    primaryColor,
    version,
    logo,
    logoDark,
    favicon,
    flags,
    login,
    pkgManagers,
    title,
    scope,
    language,
    hideDeprecatedVersions
  };
  let webPage;
  try {
    webPage = cache.get('template');
    if (!webPage) {
      webPage = (0, _template.default)({
        manifest: manifestFiles !== null && manifestFiles !== void 0 ? manifestFiles : defaultManifestFiles,
        options,
        scriptsBodyAfter,
        metaScripts,
        scriptsbodyBefore
      }, manifest);
      if (needHtmlCache) {
        cache.set('template', webPage);
        debug('set template cache');
      }
    } else {
      debug('reuse template cache');
    }
  } catch (error) {
    throw new Error(`theme could not be load, stack ${error.stack}`);
  }
  res.setHeader('Content-Type', _core.HEADERS.TEXT_HTML);
  res.send(webPage);
  debug('web rendered');
}
//# sourceMappingURL=renderHTML.js.map