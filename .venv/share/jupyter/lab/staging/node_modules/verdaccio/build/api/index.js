"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.loadTheme = loadTheme;
var _compression = _interopRequireDefault(require("compression"));
var _cors = _interopRequireDefault(require("cors"));
var _express = _interopRequireDefault(require("express"));
var _lodash = _interopRequireDefault(require("lodash"));
var _config = require("@verdaccio/config");
var _middleware = require("@verdaccio/middleware");
var _searchIndexer = require("@verdaccio/search-indexer");
var _auth = _interopRequireDefault(require("../lib/auth"));
var _config2 = _interopRequireDefault(require("../lib/config"));
var _constants = require("../lib/constants");
var _logger = require("../lib/logger");
var _pluginLoader = _interopRequireDefault(require("../lib/plugin-loader"));
var _storage = _interopRequireDefault(require("../lib/storage"));
var _utils = require("../lib/utils");
var _debug = _interopRequireDefault(require("./debug"));
var _endpoint = _interopRequireDefault(require("./endpoint"));
var _middleware2 = require("./middleware");
var _web = _interopRequireDefault(require("./web"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const {
  version
} = require('../../package.json');
function loadTheme(config) {
  if (_lodash.default.isNil(config.theme) === false) {
    return _lodash.default.head((0, _pluginLoader.default)(config, config.theme, {}, function (plugin) {
      return plugin.staticPath && plugin.manifest && plugin.manifestFiles;
    }, 'verdaccio-theme'));
  }
}
const defineAPI = async function (config, storage) {
  var _config$server;
  const auth = new _auth.default(config);
  const app = (0, _express.default)();
  _searchIndexer.SearchMemoryIndexer.configureStorage(storage);
  await _searchIndexer.SearchMemoryIndexer.init(_logger.logger);
  // run in production mode by default, just in case
  // it shouldn't make any difference anyway
  app.set('env', process.env.NODE_ENV || 'production');

  // Allow `req.ip` to resolve properly when Verdaccio is behind a proxy or load-balancer
  // See: https://expressjs.com/en/guide/behind-proxies.html
  if ((_config$server = config.server) !== null && _config$server !== void 0 && _config$server.trustProxy) {
    app.set('trust proxy', config.server.trustProxy);
  }
  app.use((0, _cors.default)());

  // // Router setup
  app.use((0, _middleware.log)(_logger.logger));
  app.use((0, _middleware.errorReportingMiddleware)(_logger.logger));
  if (config.user_agent) {
    app.use(function (_req, res, next) {
      res.setHeader('X-Powered-By', (0, _config.getUserAgent)(config.user_agent));
      next();
    });
  } else {
    app.disable('x-powered-by');
  }
  app.use((0, _compression.default)());
  app.get('/-/static/favicon.ico', (0, _middleware2.serveFavicon)(config));

  // Hook for tests only
  if (config._debug) {
    (0, _debug.default)(app, config.configPath);
  }

  // register middleware plugins
  const plugin_params = {
    config: config,
    logger: _logger.logger
  };
  const plugins = (0, _pluginLoader.default)(config, config.middlewares, plugin_params, function (plugin) {
    // @ts-ignore
    return plugin.register_middlewares;
  });
  plugins.forEach(plugin => {
    plugin.register_middlewares(app, auth, storage);
  });

  // // For  npm request
  app.use((0, _endpoint.default)(config, auth, storage));

  // For WebUI & WebUI API
  if (_lodash.default.get(config, 'web.enable', true)) {
    app.use((_req, res, next) => {
      res.locals.app_version = version !== null && version !== void 0 ? version : '';
      next();
    });
    app.use((0, _web.default)(config, auth, storage));
  } else {
    app.get('/', function (_, __, next) {
      next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.WEB_DISABLED));
    });
  }
  app.get('/*', function (_, __, next) {
    next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.FILE_NOT_FOUND));
  });
  app.use((0, _middleware.handleError)(_logger.logger));
  app.use(_middleware.final);
  return app;
};
var _default = exports.default = async function _default(configHash) {
  (0, _logger.setup)(configHash.logs);
  const config = new _config2.default(_lodash.default.cloneDeep(configHash));
  // register middleware plugins
  const plugin_params = {
    config: config,
    logger: _logger.logger
  };
  const filters = (0, _pluginLoader.default)(config, config.filters || {}, plugin_params,
  // @ts-ignore
  plugin => plugin.filter_metadata);
  const storage = new _storage.default(config);
  // waits until init calls have been initialized
  await storage.init(config, filters);
  return await defineAPI(config, storage);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29tcHJlc3Npb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb3JzIiwiX2V4cHJlc3MiLCJfbG9kYXNoIiwiX2NvbmZpZyIsIl9taWRkbGV3YXJlIiwiX3NlYXJjaEluZGV4ZXIiLCJfYXV0aCIsIl9jb25maWcyIiwiX2NvbnN0YW50cyIsIl9sb2dnZXIiLCJfcGx1Z2luTG9hZGVyIiwiX3N0b3JhZ2UiLCJfdXRpbHMiLCJfZGVidWciLCJfZW5kcG9pbnQiLCJfbWlkZGxld2FyZTIiLCJfd2ViIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidmVyc2lvbiIsImxvYWRUaGVtZSIsImNvbmZpZyIsIl8iLCJpc05pbCIsInRoZW1lIiwiaGVhZCIsImxvYWRQbHVnaW4iLCJwbHVnaW4iLCJzdGF0aWNQYXRoIiwibWFuaWZlc3QiLCJtYW5pZmVzdEZpbGVzIiwiZGVmaW5lQVBJIiwic3RvcmFnZSIsIl9jb25maWckc2VydmVyIiwiYXV0aCIsIkF1dGgiLCJhcHAiLCJleHByZXNzIiwiU2VhcmNoTWVtb3J5SW5kZXhlciIsImNvbmZpZ3VyZVN0b3JhZ2UiLCJpbml0IiwibG9nZ2VyIiwic2V0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwic2VydmVyIiwidHJ1c3RQcm94eSIsInVzZSIsImNvcnMiLCJsb2ciLCJlcnJvclJlcG9ydGluZ01pZGRsZXdhcmUiLCJ1c2VyX2FnZW50IiwiX3JlcSIsInJlcyIsIm5leHQiLCJzZXRIZWFkZXIiLCJnZXRVc2VyQWdlbnQiLCJkaXNhYmxlIiwiY29tcHJlc3Npb24iLCJnZXQiLCJzZXJ2ZUZhdmljb24iLCJob29rRGVidWciLCJjb25maWdQYXRoIiwicGx1Z2luX3BhcmFtcyIsInBsdWdpbnMiLCJtaWRkbGV3YXJlcyIsInJlZ2lzdGVyX21pZGRsZXdhcmVzIiwiZm9yRWFjaCIsImFwaUVuZHBvaW50IiwibG9jYWxzIiwiYXBwX3ZlcnNpb24iLCJ3ZWJNaWRkbGV3YXJlIiwiX18iLCJFcnJvckNvZGUiLCJnZXROb3RGb3VuZCIsIkFQSV9FUlJPUiIsIldFQl9ESVNBQkxFRCIsIkZJTEVfTk9UX0ZPVU5EIiwiaGFuZGxlRXJyb3IiLCJmaW5hbCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImNvbmZpZ0hhc2giLCJzZXR1cCIsImxvZ3MiLCJBcHBDb25maWciLCJjbG9uZURlZXAiLCJmaWx0ZXJzIiwiZmlsdGVyX21ldGFkYXRhIiwiU3RvcmFnZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGV4cHJlc3MsIHsgQXBwbGljYXRpb24gfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IGdldFVzZXJBZ2VudCB9IGZyb20gJ0B2ZXJkYWNjaW8vY29uZmlnJztcbmltcG9ydCB7IHBsdWdpblV0aWxzIH0gZnJvbSAnQHZlcmRhY2Npby9jb3JlJztcbmltcG9ydCB7IGVycm9yUmVwb3J0aW5nTWlkZGxld2FyZSwgZmluYWwsIGhhbmRsZUVycm9yIH0gZnJvbSAnQHZlcmRhY2Npby9taWRkbGV3YXJlJztcbmltcG9ydCB7IGxvZyB9IGZyb20gJ0B2ZXJkYWNjaW8vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBTZWFyY2hNZW1vcnlJbmRleGVyIH0gZnJvbSAnQHZlcmRhY2Npby9zZWFyY2gtaW5kZXhlcic7XG5pbXBvcnQgeyBDb25maWcgYXMgSUNvbmZpZyB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgQXV0aCBmcm9tICcuLi9saWIvYXV0aCc7XG5pbXBvcnQgQXBwQ29uZmlnIGZyb20gJy4uL2xpYi9jb25maWcnO1xuaW1wb3J0IHsgQVBJX0VSUk9SIH0gZnJvbSAnLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBsb2dnZXIsIHNldHVwIH0gZnJvbSAnLi4vbGliL2xvZ2dlcic7XG5pbXBvcnQgbG9hZFBsdWdpbiBmcm9tICcuLi9saWIvcGx1Z2luLWxvYWRlcic7XG5pbXBvcnQgU3RvcmFnZSBmcm9tICcuLi9saWIvc3RvcmFnZSc7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tICcuLi9saWIvdXRpbHMnO1xuaW1wb3J0IHsgJE5leHRGdW5jdGlvblZlciwgJFJlcXVlc3RFeHRlbmQsICRSZXNwb25zZUV4dGVuZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBob29rRGVidWcgZnJvbSAnLi9kZWJ1Zyc7XG5pbXBvcnQgYXBpRW5kcG9pbnQgZnJvbSAnLi9lbmRwb2ludCc7XG5pbXBvcnQgeyBzZXJ2ZUZhdmljb24gfSBmcm9tICcuL21pZGRsZXdhcmUnO1xuaW1wb3J0IHdlYk1pZGRsZXdhcmUgZnJvbSAnLi93ZWInO1xuXG5jb25zdCB7IHZlcnNpb24gfSA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFRoZW1lKGNvbmZpZykge1xuICBpZiAoXy5pc05pbChjb25maWcudGhlbWUpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBfLmhlYWQoXG4gICAgICBsb2FkUGx1Z2luKFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGNvbmZpZy50aGVtZSxcbiAgICAgICAge30sXG4gICAgICAgIGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgICAgICByZXR1cm4gcGx1Z2luLnN0YXRpY1BhdGggJiYgcGx1Z2luLm1hbmlmZXN0ICYmIHBsdWdpbi5tYW5pZmVzdEZpbGVzO1xuICAgICAgICB9LFxuICAgICAgICAndmVyZGFjY2lvLXRoZW1lJ1xuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgZGVmaW5lQVBJID0gYXN5bmMgZnVuY3Rpb24gKGNvbmZpZzogSUNvbmZpZywgc3RvcmFnZTogU3RvcmFnZSk6IFByb21pc2U8ZXhwcmVzcy5BcHBsaWNhdGlvbj4ge1xuICBjb25zdCBhdXRoID0gbmV3IEF1dGgoY29uZmlnKTtcbiAgY29uc3QgYXBwOiBBcHBsaWNhdGlvbiA9IGV4cHJlc3MoKTtcbiAgU2VhcmNoTWVtb3J5SW5kZXhlci5jb25maWd1cmVTdG9yYWdlKHN0b3JhZ2UpO1xuICBhd2FpdCBTZWFyY2hNZW1vcnlJbmRleGVyLmluaXQobG9nZ2VyKTtcbiAgLy8gcnVuIGluIHByb2R1Y3Rpb24gbW9kZSBieSBkZWZhdWx0LCBqdXN0IGluIGNhc2VcbiAgLy8gaXQgc2hvdWxkbid0IG1ha2UgYW55IGRpZmZlcmVuY2UgYW55d2F5XG4gIGFwcC5zZXQoJ2VudicsIHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdwcm9kdWN0aW9uJyk7XG5cbiAgLy8gQWxsb3cgYHJlcS5pcGAgdG8gcmVzb2x2ZSBwcm9wZXJseSB3aGVuIFZlcmRhY2NpbyBpcyBiZWhpbmQgYSBwcm94eSBvciBsb2FkLWJhbGFuY2VyXG4gIC8vIFNlZTogaHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2d1aWRlL2JlaGluZC1wcm94aWVzLmh0bWxcbiAgaWYgKGNvbmZpZy5zZXJ2ZXI/LnRydXN0UHJveHkpIHtcbiAgICBhcHAuc2V0KCd0cnVzdCBwcm94eScsIGNvbmZpZy5zZXJ2ZXIudHJ1c3RQcm94eSk7XG4gIH1cblxuICBhcHAudXNlKGNvcnMoKSk7XG5cbiAgLy8gLy8gUm91dGVyIHNldHVwXG4gIGFwcC51c2UobG9nKGxvZ2dlcikpO1xuICBhcHAudXNlKGVycm9yUmVwb3J0aW5nTWlkZGxld2FyZShsb2dnZXIpKTtcbiAgaWYgKGNvbmZpZy51c2VyX2FnZW50KSB7XG4gICAgYXBwLnVzZShmdW5jdGlvbiAoX3JlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICByZXMuc2V0SGVhZGVyKCdYLVBvd2VyZWQtQnknLCBnZXRVc2VyQWdlbnQoY29uZmlnLnVzZXJfYWdlbnQpKTtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhcHAuZGlzYWJsZSgneC1wb3dlcmVkLWJ5Jyk7XG4gIH1cblxuICBhcHAudXNlKGNvbXByZXNzaW9uKCkpO1xuXG4gIGFwcC5nZXQoJy8tL3N0YXRpYy9mYXZpY29uLmljbycsIHNlcnZlRmF2aWNvbihjb25maWcpKTtcblxuICAvLyBIb29rIGZvciB0ZXN0cyBvbmx5XG4gIGlmIChjb25maWcuX2RlYnVnKSB7XG4gICAgaG9va0RlYnVnKGFwcCwgY29uZmlnLmNvbmZpZ1BhdGgpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbWlkZGxld2FyZSBwbHVnaW5zXG4gIGNvbnN0IHBsdWdpbl9wYXJhbXMgPSB7XG4gICAgY29uZmlnOiBjb25maWcsXG4gICAgbG9nZ2VyOiBsb2dnZXIsXG4gIH07XG5cbiAgY29uc3QgcGx1Z2luczogcGx1Z2luVXRpbHMuQXV0aDxJQ29uZmlnPltdID0gbG9hZFBsdWdpbihcbiAgICBjb25maWcsXG4gICAgY29uZmlnLm1pZGRsZXdhcmVzLFxuICAgIHBsdWdpbl9wYXJhbXMsXG4gICAgZnVuY3Rpb24gKHBsdWdpbjogcGx1Z2luVXRpbHMuTWFuaWZlc3RGaWx0ZXI8SUNvbmZpZz4pIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiBwbHVnaW4ucmVnaXN0ZXJfbWlkZGxld2FyZXM7XG4gICAgfVxuICApO1xuXG4gIHBsdWdpbnMuZm9yRWFjaCgocGx1Z2luOiBhbnkpID0+IHtcbiAgICBwbHVnaW4ucmVnaXN0ZXJfbWlkZGxld2FyZXMoYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgfSk7XG5cbiAgLy8gLy8gRm9yICBucG0gcmVxdWVzdFxuICBhcHAudXNlKGFwaUVuZHBvaW50KGNvbmZpZywgYXV0aCwgc3RvcmFnZSkpO1xuXG4gIC8vIEZvciBXZWJVSSAmIFdlYlVJIEFQSVxuICBpZiAoXy5nZXQoY29uZmlnLCAnd2ViLmVuYWJsZScsIHRydWUpKSB7XG4gICAgYXBwLnVzZSgoX3JlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICByZXMubG9jYWxzLmFwcF92ZXJzaW9uID0gdmVyc2lvbiA/PyAnJztcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgICBhcHAudXNlKHdlYk1pZGRsZXdhcmUoY29uZmlnLCBhdXRoLCBzdG9yYWdlKSk7XG4gIH0gZWxzZSB7XG4gICAgYXBwLmdldCgnLycsIGZ1bmN0aW9uIChfLCBfXywgbmV4dDogJE5leHRGdW5jdGlvblZlcikge1xuICAgICAgbmV4dChFcnJvckNvZGUuZ2V0Tm90Rm91bmQoQVBJX0VSUk9SLldFQl9ESVNBQkxFRCkpO1xuICAgIH0pO1xuICB9XG5cbiAgYXBwLmdldCgnLyonLCBmdW5jdGlvbiAoXywgX18sIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpIHtcbiAgICBuZXh0KEVycm9yQ29kZS5nZXROb3RGb3VuZChBUElfRVJST1IuRklMRV9OT1RfRk9VTkQpKTtcbiAgfSk7XG4gIGFwcC51c2UoaGFuZGxlRXJyb3IobG9nZ2VyKSk7XG4gIGFwcC51c2UoZmluYWwpO1xuXG4gIHJldHVybiBhcHA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoYXN5bmMgZnVuY3Rpb24gKGNvbmZpZ0hhc2g6IGFueSkge1xuICBzZXR1cChjb25maWdIYXNoLmxvZ3MpO1xuICBjb25zdCBjb25maWc6IElDb25maWcgPSBuZXcgQXBwQ29uZmlnKF8uY2xvbmVEZWVwKGNvbmZpZ0hhc2gpKTtcbiAgLy8gcmVnaXN0ZXIgbWlkZGxld2FyZSBwbHVnaW5zXG4gIGNvbnN0IHBsdWdpbl9wYXJhbXMgPSB7XG4gICAgY29uZmlnOiBjb25maWcsXG4gICAgbG9nZ2VyOiBsb2dnZXIsXG4gIH07XG4gIGNvbnN0IGZpbHRlcnMgPSBsb2FkUGx1Z2luKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZmlsdGVycyB8fCB7fSxcbiAgICBwbHVnaW5fcGFyYW1zLFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICAocGx1Z2luOiBwbHVnaW5VdGlscy5NYW5pZmVzdEZpbHRlcjxJQ29uZmlnPikgPT4gcGx1Z2luLmZpbHRlcl9tZXRhZGF0YVxuICApO1xuICBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoY29uZmlnKTtcbiAgLy8gd2FpdHMgdW50aWwgaW5pdCBjYWxscyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWRcbiAgYXdhaXQgc3RvcmFnZS5pbml0KGNvbmZpZywgZmlsdGVycyk7XG4gIHJldHVybiBhd2FpdCBkZWZpbmVBUEkoY29uZmlnLCBzdG9yYWdlKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsUUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUksT0FBQSxHQUFBSixPQUFBO0FBRUEsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBRUEsSUFBQU0sY0FBQSxHQUFBTixPQUFBO0FBR0EsSUFBQU8sS0FBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVEsUUFBQSxHQUFBVCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVMsVUFBQSxHQUFBVCxPQUFBO0FBQ0EsSUFBQVUsT0FBQSxHQUFBVixPQUFBO0FBQ0EsSUFBQVcsYUFBQSxHQUFBWixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVksUUFBQSxHQUFBYixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQWEsTUFBQSxHQUFBYixPQUFBO0FBRUEsSUFBQWMsTUFBQSxHQUFBZixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQWUsU0FBQSxHQUFBaEIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFnQixZQUFBLEdBQUFoQixPQUFBO0FBQ0EsSUFBQWlCLElBQUEsR0FBQWxCLHNCQUFBLENBQUFDLE9BQUE7QUFBa0MsU0FBQUQsdUJBQUFtQixDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxV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