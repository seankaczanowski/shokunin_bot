"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lodash = _interopRequireDefault(require("lodash"));
var _core = require("@verdaccio/core");
var _middleware = require("@verdaccio/middleware");
var _authUtils = require("../../../lib/auth-utils");
var _constants = require("../../../lib/constants");
var _utils = require("../../../lib/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function addUserAuthApi(route, auth, config) {
  route.post('/-/verdaccio/sec/login', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    const {
      username,
      password
    } = req.body;
    auth.authenticate(username, password, async (err, user) => {
      if (err) {
        const errorCode = err.message ? _constants.HTTP_STATUS.UNAUTHORIZED : _constants.HTTP_STATUS.INTERNAL_ERROR;
        next(_utils.ErrorCode.getCode(errorCode, err.message));
      } else {
        req.remote_user = user;
        const jWTSignOptions = (0, _authUtils.getSecurity)(config).web.sign;
        res.set(_constants.HEADERS.CACHE_CONTROL, 'no-cache, no-store');
        next({
          token: await auth.jwtEncrypt(user, jWTSignOptions),
          username: req.remote_user.name
        });
      }
    });
  });
  route.put('/-/verdaccio/sec/reset_password', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        // FUTURE: update to a more meaningful message
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }
    const {
      password
    } = req.body;
    const {
      name
    } = req.remote_user;
    if (_core.validationUtils.validatePassword(password.new) === false) {
      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNil(err) && isUpdated) {
          next({
            ok: true
          });
        } else {
          return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
        }
      });
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.BAD_REQUEST, _constants.APP_ERROR.PASSWORD_VALIDATION));
    }
  });
  return route;
}
var _default = exports.default = addUserAuthApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29yZSIsIl9taWRkbGV3YXJlIiwiX2F1dGhVdGlscyIsIl9jb25zdGFudHMiLCJfdXRpbHMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJhZGRVc2VyQXV0aEFwaSIsInJvdXRlIiwiYXV0aCIsImNvbmZpZyIsInBvc3QiLCJyYXRlTGltaXQiLCJ1c2VyUmF0ZUxpbWl0IiwicmVxIiwicmVzIiwibmV4dCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJib2R5IiwiYXV0aGVudGljYXRlIiwiZXJyIiwidXNlciIsImVycm9yQ29kZSIsIm1lc3NhZ2UiLCJIVFRQX1NUQVRVUyIsIlVOQVVUSE9SSVpFRCIsIklOVEVSTkFMX0VSUk9SIiwiRXJyb3JDb2RlIiwiZ2V0Q29kZSIsInJlbW90ZV91c2VyIiwialdUU2lnbk9wdGlvbnMiLCJnZXRTZWN1cml0eSIsIndlYiIsInNpZ24iLCJzZXQiLCJIRUFERVJTIiwiQ0FDSEVfQ09OVFJPTCIsInRva2VuIiwiand0RW5jcnlwdCIsIm5hbWUiLCJwdXQiLCJfIiwiaXNOaWwiLCJzdGF0dXMiLCJBUElfRVJST1IiLCJNVVNUX0JFX0xPR0dFRCIsInZhbGlkYXRpb25VdGlscyIsInZhbGlkYXRlUGFzc3dvcmQiLCJuZXciLCJjaGFuZ2VQYXNzd29yZCIsIm9sZCIsImlzVXBkYXRlZCIsIm9rIiwiZ2V0SW50ZXJuYWxFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiQVBQX0VSUk9SIiwiUEFTU1dPUkRfVkFMSURBVElPTiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvd2ViL2FwaS91c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IHZhbGlkYXRpb25VdGlscyB9IGZyb20gJ0B2ZXJkYWNjaW8vY29yZSc7XG5pbXBvcnQgeyByYXRlTGltaXQgfSBmcm9tICdAdmVyZGFjY2lvL21pZGRsZXdhcmUnO1xuaW1wb3J0IHsgQ29uZmlnLCBKV1RTaWduT3B0aW9ucywgUmVtb3RlVXNlciB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgQXV0aCBmcm9tICcuLi8uLi8uLi9saWIvYXV0aCc7XG5pbXBvcnQgeyBnZXRTZWN1cml0eSB9IGZyb20gJy4uLy4uLy4uL2xpYi9hdXRoLXV0aWxzJztcbmltcG9ydCB7IEFQSV9FUlJPUiwgQVBQX0VSUk9SLCBIRUFERVJTLCBIVFRQX1NUQVRVUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3V0aWxzJztcbmltcG9ydCB7ICROZXh0RnVuY3Rpb25WZXIgfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGFkZFVzZXJBdXRoQXBpKHJvdXRlOiBSb3V0ZXIsIGF1dGg6IEF1dGgsIGNvbmZpZzogQ29uZmlnKTogUm91dGVyIHtcbiAgcm91dGUucG9zdChcbiAgICAnLy0vdmVyZGFjY2lvL3NlYy9sb2dpbicsXG4gICAgcmF0ZUxpbWl0KGNvbmZpZz8udXNlclJhdGVMaW1pdCksXG4gICAgZnVuY3Rpb24gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xuXG4gICAgICBhdXRoLmF1dGhlbnRpY2F0ZSh1c2VybmFtZSwgcGFzc3dvcmQsIGFzeW5jIChlcnIsIHVzZXI6IFJlbW90ZVVzZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IGVyci5tZXNzYWdlID8gSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVEIDogSFRUUF9TVEFUVVMuSU5URVJOQUxfRVJST1I7XG4gICAgICAgICAgbmV4dChFcnJvckNvZGUuZ2V0Q29kZShlcnJvckNvZGUsIGVyci5tZXNzYWdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVxLnJlbW90ZV91c2VyID0gdXNlcjtcbiAgICAgICAgICBjb25zdCBqV1RTaWduT3B0aW9uczogSldUU2lnbk9wdGlvbnMgPSBnZXRTZWN1cml0eShjb25maWcpLndlYi5zaWduO1xuICAgICAgICAgIHJlcy5zZXQoSEVBREVSUy5DQUNIRV9DT05UUk9MLCAnbm8tY2FjaGUsIG5vLXN0b3JlJyk7XG4gICAgICAgICAgbmV4dCh7XG4gICAgICAgICAgICB0b2tlbjogYXdhaXQgYXV0aC5qd3RFbmNyeXB0KHVzZXIsIGpXVFNpZ25PcHRpb25zKSxcbiAgICAgICAgICAgIHVzZXJuYW1lOiByZXEucmVtb3RlX3VzZXIubmFtZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIHJvdXRlLnB1dChcbiAgICAnLy0vdmVyZGFjY2lvL3NlYy9yZXNldF9wYXNzd29yZCcsXG4gICAgZnVuY3Rpb24gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgaWYgKF8uaXNOaWwocmVxLnJlbW90ZV91c2VyLm5hbWUpKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVEKTtcbiAgICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAgIC8vIEZVVFVSRTogdXBkYXRlIHRvIGEgbW9yZSBtZWFuaW5nZnVsIG1lc3NhZ2VcbiAgICAgICAgICBtZXNzYWdlOiBBUElfRVJST1IuTVVTVF9CRV9MT0dHRUQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHBhc3N3b3JkIH0gPSByZXEuYm9keTtcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcmVxLnJlbW90ZV91c2VyO1xuXG4gICAgICBpZiAodmFsaWRhdGlvblV0aWxzLnZhbGlkYXRlUGFzc3dvcmQocGFzc3dvcmQubmV3KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYXV0aC5jaGFuZ2VQYXNzd29yZChuYW1lIGFzIHN0cmluZywgcGFzc3dvcmQub2xkLCBwYXNzd29yZC5uZXcsIChlcnIsIGlzVXBkYXRlZCk6IHZvaWQgPT4ge1xuICAgICAgICAgIGlmIChfLmlzTmlsKGVycikgJiYgaXNVcGRhdGVkKSB7XG4gICAgICAgICAgICBuZXh0KHtcbiAgICAgICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldEludGVybmFsRXJyb3IoQVBJX0VSUk9SLklOVEVSTkFMX1NFUlZFUl9FUlJPUikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Q29kZShIVFRQX1NUQVRVUy5CQURfUkVRVUVTVCwgQVBQX0VSUk9SLlBBU1NXT1JEX1ZBTElEQVRJT04pKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgcmV0dXJuIHJvdXRlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRVc2VyQXV0aEFwaTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBSUEsSUFBQUcsVUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssTUFBQSxHQUFBTCxPQUFBO0FBQStDLFNBQUFELHVCQUFBTyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRy9DLFNBQVNHLGNBQWNBLENBQUNDLEtBQWEsRUFBRUMsSUFBVSxFQUFFQyxNQUFjLEVBQVU7RUFDekVGLEtBQUssQ0FBQ0csSUFBSSxDQUNSLHdCQUF3QixFQUN4QixJQUFBQyxxQkFBUyxFQUFDRixNQUFNLGFBQU5BLE1BQU0sdUJBQU5BLE1BQU0sQ0FBRUcsYUFBYSxDQUFDLEVBQ2hDLFVBQVVDLEdBQVksRUFBRUMsR0FBYSxFQUFFQyxJQUFzQixFQUFRO0lBQ25FLE1BQU07TUFBRUMsUUFBUTtNQUFFQztJQUFTLENBQUMsR0FBR0osR0FBRyxDQUFDSyxJQUFJO0lBRXZDVixJQUFJLENBQUNXLFlBQVksQ0FBQ0gsUUFBUSxFQUFFQyxRQUFRLEVBQUUsT0FBT0csR0FBRyxFQUFFQyxJQUFnQixLQUFvQjtNQUNwRixJQUFJRCxHQUFHLEVBQUU7UUFDUCxNQUFNRSxTQUFTLEdBQUdGLEdBQUcsQ0FBQ0csT0FBTyxHQUFHQyxzQkFBVyxDQUFDQyxZQUFZLEdBQUdELHNCQUFXLENBQUNFLGNBQWM7UUFDckZYLElBQUksQ0FBQ1ksZ0JBQVMsQ0FBQ0MsT0FBTyxDQUFDTixTQUFTLEVBQUVGLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLENBQUM7TUFDakQsQ0FBQyxNQUFNO1FBQ0xWLEdBQUcsQ0FBQ2dCLFdBQVcsR0FBR1IsSUFBSTtRQUN0QixNQUFNUyxjQUE4QixHQUFHLElBQUFDLHNCQUFXLEVBQUN0QixNQUFNLENBQUMsQ0FBQ3VCLEdBQUcsQ0FBQ0MsSUFBSTtRQUNuRW5CLEdBQUcsQ0FBQ29CLEdBQUcsQ0FBQ0Msa0JBQU8sQ0FBQ0MsYUFBYSxFQUFFLG9CQUFvQixDQUFDO1FBQ3BEckIsSUFBSSxDQUFDO1VBQ0hzQixLQUFLLEVBQUUsTUFBTTdCLElBQUksQ0FBQzhCLFVBQVUsQ0FBQ2pCLElBQUksRUFBRVMsY0FBYyxDQUFDO1VBQ2xEZCxRQUFRLEVBQUVILEdBQUcsQ0FBQ2dCLFdBQVcsQ0FBQ1U7UUFDNUIsQ0FBQyxDQUFDO01BQ0o7SUFDRixDQUFDLENBQUM7RUFDSixDQUNGLENBQUM7RUFFRGhDLEtBQUssQ0FBQ2lDLEdBQUcsQ0FDUCxpQ0FBaUMsRUFDakMsVUFBVTNCLEdBQVksRUFBRUMsR0FBYSxFQUFFQyxJQUFzQixFQUFRO0lBQ25FLElBQUkwQixlQUFDLENBQUNDLEtBQUssQ0FBQzdCLEdBQUcsQ0FBQ2dCLFdBQVcsQ0FBQ1UsSUFBSSxDQUFDLEVBQUU7TUFDakN6QixHQUFHLENBQUM2QixNQUFNLENBQUNuQixzQkFBVyxDQUFDQyxZQUFZLENBQUM7TUFDcEMsT0FBT1YsSUFBSSxDQUFDO1FBQ1Y7UUFDQVEsT0FBTyxFQUFFcUIsb0JBQVMsQ0FBQ0M7TUFDckIsQ0FBQyxDQUFDO0lBQ0o7SUFFQSxNQUFNO01BQUU1QjtJQUFTLENBQUMsR0FBR0osR0FBRyxDQUFDSyxJQUFJO0lBQzdCLE1BQU07TUFBRXFCO0lBQUssQ0FBQyxHQUFHMUIsR0FBRyxDQUFDZ0IsV0FBVztJQUVoQyxJQUFJaUIscUJBQWUsQ0FBQ0MsZ0JBQWdCLENBQUM5QixRQUFRLENBQUMrQixHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUU7TUFDNUR4QyxJQUFJLENBQUN5QyxjQUFjLENBQUNWLElBQUksRUFBWXRCLFFBQVEsQ0FBQ2lDLEdBQUcsRUFBRWpDLFFBQVEsQ0FBQytCLEdBQUcsRUFBRSxDQUFDNUIsR0FBRyxFQUFFK0IsU0FBUyxLQUFXO1FBQ3hGLElBQUlWLGVBQUMsQ0FBQ0MsS0FBSyxDQUFDdEIsR0FBRyxDQUFDLElBQUkrQixTQUFTLEVBQUU7VUFDN0JwQyxJQUFJLENBQUM7WUFDSHFDLEVBQUUsRUFBRTtVQUNOLENBQUMsQ0FBQztRQUNKLENBQUMsTUFBTTtVQUNMLE9BQU9yQyxJQUFJLENBQUNZLGdCQUFTLENBQUMwQixnQkFBZ0IsQ0FBQ1Qsb0JBQVMsQ0FBQ1UscUJBQXFCLENBQUMsQ0FBQztRQUMxRTtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUMsTUFBTTtNQUNMLE9BQU92QyxJQUFJLENBQUNZLGdCQUFTLENBQUNDLE9BQU8sQ0FBQ0osc0JBQVcsQ0FBQytCLFdBQVcsRUFBRUMsb0JBQVMsQ0FBQ0MsbUJBQW1CLENBQUMsQ0FBQztJQUN4RjtFQUNGLENBQ0YsQ0FBQztFQUVELE9BQU9sRCxLQUFLO0FBQ2Q7QUFBQyxJQUFBbUQsUUFBQSxHQUFBQyxPQUFBLENBQUF0RCxPQUFBLEdBRWNDLGNBQWMiLCJpZ25vcmVMaXN0IjpbXX0=