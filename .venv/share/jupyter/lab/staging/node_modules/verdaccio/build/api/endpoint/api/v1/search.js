"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _lodash = _interopRequireDefault(require("lodash"));
var _semver = _interopRequireDefault(require("semver"));
var _constants = require("../../../../lib/constants");
var _logger = require("../../../../lib/logger");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const personMatch = (person, search) => {
  if (typeof person === 'string') {
    return person.includes(search);
  }
  if (typeof person === 'object') {
    for (const field of Object.values(person)) {
      if (typeof field === 'string' && field.includes(search)) {
        return true;
      }
    }
  }
  return false;
};
const matcher = function (query) {
  const match = query.match(/author:(.*)/);
  if (match !== null) {
    return function (pkg) {
      return personMatch(pkg.author, match[1]);
    };
  }

  // TODO: maintainer, keywords, boost-exact
  // TODO implement some scoring system for freetext
  return pkg => {
    return ['name', 'displayName', 'description'].map(k => {
      return pkg[k];
    }).filter(x => {
      return x !== undefined;
    }).some(txt => {
      return txt.includes(query);
    });
  };
};
function compileTextSearch(textSearch) {
  const textMatchers = (textSearch || '').split(' ').map(matcher);
  return pkg => textMatchers.every(m => m(pkg));
}
function removeDuplicates(results) {
  const pkgNames = [];
  return results.filter(pkg => {
    var _pkg$package, _pkg$package2;
    if (pkgNames.includes(pkg === null || pkg === void 0 ? void 0 : (_pkg$package = pkg.package) === null || _pkg$package === void 0 ? void 0 : _pkg$package.name)) {
      return false;
    }
    pkgNames.push(pkg === null || pkg === void 0 ? void 0 : (_pkg$package2 = pkg.package) === null || _pkg$package2 === void 0 ? void 0 : _pkg$package2.name);
    return true;
  });
}
function checkAccess(pkg, auth, remoteUser) {
  return new Promise((resolve, reject) => {
    var _pkg$package3;
    auth.allow_access({
      packageName: pkg === null || pkg === void 0 ? void 0 : (_pkg$package3 = pkg.package) === null || _pkg$package3 === void 0 ? void 0 : _pkg$package3.name
    }, remoteUser, function (err, allowed) {
      if (err) {
        if (err.status && String(err.status).match(/^4\d\d$/)) {
          // auth plugin returns 4xx user error,
          // that's equivalent of !allowed basically
          allowed = false;
          return resolve(null);
        } else {
          reject(err);
        }
      } else {
        return resolve(allowed ? pkg : null);
      }
    });
  });
}
async function sendResponse(resultBuf, resultStream, auth, req, from, size) {
  resultStream.destroy();
  const resultsCollection = resultBuf.map(pkg => {
    if (pkg !== null && pkg !== void 0 && pkg.name) {
      return {
        package: pkg,
        // not sure if flags is need it
        flags: {
          unstable: Object.keys(pkg.versions).some(v => _semver.default.satisfies(v, '^1.0.0')) ? undefined : true
        },
        local: true,
        score: {
          final: 1,
          detail: {
            quality: 1,
            popularity: 1,
            maintenance: 0
          }
        },
        searchScore: 100000
      };
    } else {
      return pkg;
    }
  });
  const checkAccessPromises = await Promise.all(removeDuplicates(resultsCollection).map(pkgItem => {
    return checkAccess(pkgItem, auth, req.remote_user);
  }));
  const final = checkAccessPromises.filter(i => !_lodash.default.isNull(i)).slice(from, size);
  _logger.logger.debug(`search results ${final === null || final === void 0 ? void 0 : final.length}`);
  const response = {
    objects: final,
    total: final.length,
    time: new Date().toUTCString()
  };
  _logger.logger.debug(`total response ${final.length}`);
  return response;
}

/**
 * Endpoint for npm search v1
 * req: 'GET /-/v1/search?text=react&size=20&from=0&quality=0.65&popularity=0.98&maintenance=0.5'
 */
function _default(route, auth, storage) {
  route.get('/-/v1/search', async (req, res, next) => {
    // TODO: implement proper result scoring weighted by quality, popularity and maintenance query parameters
    let [text, size, from /* , quality, popularity, maintenance */] = ['text', 'size', 'from' /* , 'quality', 'popularity', 'maintenance' */].map(k => req.query[k]);
    size = parseInt(size) || 20;
    from = parseInt(from) || 0;
    const isInteresting = compileTextSearch(text);
    const resultStream = storage.search(0, {
      req
    });
    let resultBuf = [];
    let completed = false;
    resultStream.on('data', pkg => {
      // packages from the upstreams
      if (_lodash.default.isArray(pkg)) {
        resultBuf = resultBuf.concat(pkg.filter(pkgItem => {
          var _pkgItem$package;
          if (!isInteresting(pkgItem === null || pkgItem === void 0 ? void 0 : pkgItem.package)) {
            return;
          }
          _logger.logger.debug(`[remote] pkg name ${pkgItem === null || pkgItem === void 0 ? void 0 : (_pkgItem$package = pkgItem.package) === null || _pkgItem$package === void 0 ? void 0 : _pkgItem$package.name}`);
          return true;
        }));
      } else {
        // packages from local
        // due compability with `/-/all` we cannot refactor storage.search();
        if (!isInteresting(pkg)) {
          return;
        }
        _logger.logger.debug(`[local] pkg name ${pkg === null || pkg === void 0 ? void 0 : pkg.name}`);
        resultBuf.push(pkg);
      }
    });
    resultStream.on('error', function () {
      _logger.logger.error('search endpoint has failed');
      res.socket.destroy();
    });
    resultStream.on('end', async () => {
      if (!completed) {
        completed = true;
        try {
          const response = await sendResponse(resultBuf, resultStream, auth, req, from, size);
          _logger.logger.info('search endpoint ok results @{total}', {
            total: response.total
          });
          res.status(_constants.HTTP_STATUS.OK).json(response);
        } catch (err) {
          _logger.logger.error('search endpoint has failed @{err}', {
            err
          });
          next(err);
        }
      }
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,