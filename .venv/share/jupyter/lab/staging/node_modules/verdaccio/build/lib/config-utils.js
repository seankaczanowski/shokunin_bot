"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasProxyTo = hasProxyTo;
exports.normalizeUserList = normalizeUserList;
var _lodash = _interopRequireDefault(require("lodash"));
var _utils = require("@verdaccio/utils");
var _utils2 = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Normalize user list.
 * @return {Array}
 */
function normalizeUserList(oldFormat, newFormat) {
  const result = [];
  /* eslint prefer-rest-params: "off" */

  for (let i = 0; i < arguments.length; i++) {
    if (arguments[i] == null) {
      continue;
    }

    // if it's a string, split it to array
    if (_lodash.default.isString(arguments[i])) {
      result.push(arguments[i].split(/\s+/));
    } else if (Array.isArray(arguments[i])) {
      result.push(arguments[i]);
    } else {
      throw _utils2.ErrorCode.getInternalError('CONFIG: bad package acl (array or string expected): ' + JSON.stringify(arguments[i]));
    }
  }
  return _lodash.default.flatten(result);
}

/**
 * Check whether an uplink can proxy
 */
function hasProxyTo(pkg, upLink, packages) {
  const matchedPkg = (0, _utils.getMatchedPackagesSpec)(pkg, packages);
  const proxyList = typeof matchedPkg !== 'undefined' ? matchedPkg.proxy : [];
  if (proxyList) {
    return proxyList.some(curr => upLink === curr);
  }
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfdXRpbHMyIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwibm9ybWFsaXplVXNlckxpc3QiLCJvbGRGb3JtYXQiLCJuZXdGb3JtYXQiLCJyZXN1bHQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiXyIsImlzU3RyaW5nIiwicHVzaCIsInNwbGl0IiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3JDb2RlIiwiZ2V0SW50ZXJuYWxFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJmbGF0dGVuIiwiaGFzUHJveHlUbyIsInBrZyIsInVwTGluayIsInBhY2thZ2VzIiwibWF0Y2hlZFBrZyIsImdldE1hdGNoZWRQYWNrYWdlc1NwZWMiLCJwcm94eUxpc3QiLCJwcm94eSIsInNvbWUiLCJjdXJyIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9jb25maWctdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgUGFja2FnZUxpc3QgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcbmltcG9ydCB7IGdldE1hdGNoZWRQYWNrYWdlc1NwZWMgfSBmcm9tICdAdmVyZGFjY2lvL3V0aWxzJztcblxuaW1wb3J0IHsgTGVnYWN5UGFja2FnZUxpc3QsIE1hdGNoZWRQYWNrYWdlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRXJyb3JDb2RlIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogTm9ybWFsaXplIHVzZXIgbGlzdC5cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVXNlckxpc3Qob2xkRm9ybWF0OiBhbnksIG5ld0Zvcm1hdDogYW55KTogYW55IHtcbiAgY29uc3QgcmVzdWx0OiBhbnlbXVtdID0gW107XG4gIC8qIGVzbGludCBwcmVmZXItcmVzdC1wYXJhbXM6IFwib2ZmXCIgKi9cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcmd1bWVudHNbaV0gPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaWYgaXQncyBhIHN0cmluZywgc3BsaXQgaXQgdG8gYXJyYXlcbiAgICBpZiAoXy5pc1N0cmluZyhhcmd1bWVudHNbaV0pKSB7XG4gICAgICByZXN1bHQucHVzaChhcmd1bWVudHNbaV0uc3BsaXQoL1xccysvKSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZ3VtZW50c1tpXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yQ29kZS5nZXRJbnRlcm5hbEVycm9yKFxuICAgICAgICAnQ09ORklHOiBiYWQgcGFja2FnZSBhY2wgKGFycmF5IG9yIHN0cmluZyBleHBlY3RlZCk6ICcgKyBKU09OLnN0cmluZ2lmeShhcmd1bWVudHNbaV0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gXy5mbGF0dGVuKHJlc3VsdCk7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiB1cGxpbmsgY2FuIHByb3h5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNQcm94eVRvKHBrZzogc3RyaW5nLCB1cExpbms6IHN0cmluZywgcGFja2FnZXM6IFBhY2thZ2VMaXN0KTogYm9vbGVhbiB7XG4gIGNvbnN0IG1hdGNoZWRQa2c6IE1hdGNoZWRQYWNrYWdlID0gZ2V0TWF0Y2hlZFBhY2thZ2VzU3BlYyhwa2csIHBhY2thZ2VzKTtcbiAgY29uc3QgcHJveHlMaXN0ID0gdHlwZW9mIG1hdGNoZWRQa2cgIT09ICd1bmRlZmluZWQnID8gbWF0Y2hlZFBrZy5wcm94eSA6IFtdO1xuICBpZiAocHJveHlMaXN0KSB7XG4gICAgcmV0dXJuIHByb3h5TGlzdC5zb21lKChjdXJyKSA9PiB1cExpbmsgPT09IGN1cnIpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBR0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQW9DLFNBQUFELHVCQUFBSSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0csaUJBQWlCQSxDQUFDQyxTQUFjLEVBQUVDLFNBQWMsRUFBTztFQUNyRSxNQUFNQyxNQUFlLEdBQUcsRUFBRTtFQUMxQjs7RUFFQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEVBQUVGLENBQUMsRUFBRSxFQUFFO0lBQ3pDLElBQUlDLFNBQVMsQ0FBQ0QsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO01BQ3hCO0lBQ0Y7O0lBRUE7SUFDQSxJQUFJRyxlQUFDLENBQUNDLFFBQVEsQ0FBQ0gsU0FBUyxDQUFDRCxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQzVCRCxNQUFNLENBQUNNLElBQUksQ0FBQ0osU0FBUyxDQUFDRCxDQUFDLENBQUMsQ0FBQ00sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUMsTUFBTSxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDRCxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3RDRCxNQUFNLENBQUNNLElBQUksQ0FBQ0osU0FBUyxDQUFDRCxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDLE1BQU07TUFDTCxNQUFNUyxpQkFBUyxDQUFDQyxnQkFBZ0IsQ0FDOUIsc0RBQXNELEdBQUdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDWCxTQUFTLENBQUNELENBQUMsQ0FBQyxDQUN0RixDQUFDO0lBQ0g7RUFDRjtFQUNBLE9BQU9HLGVBQUMsQ0FBQ1UsT0FBTyxDQUFDZCxNQUFNLENBQUM7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ08sU0FBU2UsVUFBVUEsQ0FBQ0MsR0FBVyxFQUFFQyxNQUFjLEVBQUVDLFFBQXFCLEVBQVc7RUFDdEYsTUFBTUMsVUFBMEIsR0FBRyxJQUFBQyw2QkFBc0IsRUFBQ0osR0FBRyxFQUFFRSxRQUFRLENBQUM7RUFDeEUsTUFBTUcsU0FBUyxHQUFHLE9BQU9GLFVBQVUsS0FBSyxXQUFXLEdBQUdBLFVBQVUsQ0FBQ0csS0FBSyxHQUFHLEVBQUU7RUFDM0UsSUFBSUQsU0FBUyxFQUFFO0lBQ2IsT0FBT0EsU0FBUyxDQUFDRSxJQUFJLENBQUVDLElBQUksSUFBS1AsTUFBTSxLQUFLTyxJQUFJLENBQUM7RUFDbEQ7RUFFQSxPQUFPLEtBQUs7QUFDZCIsImlnbm9yZUxpc3QiOltdfQ==