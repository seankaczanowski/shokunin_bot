"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createServerFactory = createServerFactory;
exports.displayExperimentsInfoBox = displayExperimentsInfoBox;
exports.runServer = runServer;
var _constants = _interopRequireDefault(require("constants"));
var _debug = _interopRequireDefault(require("debug"));
var _fs = _interopRequireDefault(require("fs"));
var _http = _interopRequireDefault(require("http"));
var _https = _interopRequireDefault(require("https"));
var _lodash = _interopRequireWildcard(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _index = _interopRequireDefault(require("../api/index"));
var _utils = require("./cli/utils");
var _configPath = _interopRequireDefault(require("./config-path"));
var _constants2 = require("./constants");
var _utils2 = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const debug = (0, _debug.default)('verdaccio');
const logger = require('./logger');
function displayExperimentsInfoBox(flags) {
  if (!flags) {
    return;
  }
  const experimentList = Object.keys(flags);
  if (experimentList.length >= 1) {
    logger.warn(
    // eslint-disable-next-line max-len
    `experiments are enabled, it is recommended do not use experiments in production comment out this section to disable it`);
    experimentList.forEach(experiment => {
      // eslint-disable-next-line max-len
      logger.info(`support for experiment [${experiment}] ${flags[experiment] ? 'is enabled' : ' is disabled'}`);
    });
  }
}

/**
 * Exposes a server factory to be instantiated programmatically.
 *
    const app = await runServer(); // default configuration
    const app = await runServer('./config/config.yaml');
    const app = await runServer({ configuration });
    app.listen(4000, (event) => {
      // do something
    });
 * @param config
 */
async function runServer(config) {
  let configurationParsed;
  if (config === undefined || typeof config === 'string') {
    const configPathLocation = (0, _configPath.default)(config);
    configurationParsed = (0, _utils2.parseConfigFile)(configPathLocation);
    if (!configurationParsed.self_path) {
      configurationParsed.self_path = _path.default.resolve(configPathLocation);
    }
  } else if (_lodash.default.isObject(config)) {
    configurationParsed = config;
    if (!configurationParsed.self_path) {
      throw new Error('self_path is required, please provide a valid root path for storage');
    }
  } else {
    throw new Error(_constants2.API_ERROR.CONFIG_BAD_FORMAT);
  }
  const addresses = (0, _utils.getListListenAddresses)(undefined, configurationParsed.listen);
  if (addresses.length > 1) {
    process.emitWarning('You have specified multiple listen addresses, using this method only the first will be used');
  }
  const app = await (0, _index.default)(configurationParsed);
  return createServerFactory(configurationParsed, addresses[0], app);
}

/**
 * Return a native HTTP/HTTPS server instance
 * @param config
 * @param addr
 * @param app
 */
function createServerFactory(config, addr, app) {
  let serverFactory;
  if (addr.proto === 'https') {
    debug('https enabled');
    try {
      let httpsOptions = {
        // disable insecure SSLv2 and SSLv3
        secureOptions: _constants.default.SSL_OP_NO_SSLv2 | _constants.default.SSL_OP_NO_SSLv3
      };
      const keyCertConfig = config.https;
      const pfxConfig = config.https;

      // https must either have key and cert or a pfx and (optionally) a passphrase
      if (!(keyCertConfig.key && keyCertConfig.cert || pfxConfig.pfx)) {
        throw Error('bad format https configuration');
      }
      if (pfxConfig.pfx) {
        const {
          pfx,
          passphrase
        } = pfxConfig;
        httpsOptions = (0, _lodash.assign)(httpsOptions, {
          pfx: _fs.default.readFileSync(pfx),
          passphrase: passphrase || ''
        });
      } else {
        const {
          key,
          cert,
          ca
        } = keyCertConfig;
        httpsOptions = (0, _lodash.assign)(httpsOptions, _objectSpread({
          key: _fs.default.readFileSync(key),
          cert: _fs.default.readFileSync(cert)
        }, ca && {
          ca: _fs.default.readFileSync(ca)
        }));
      }
      // TODO: enable http2 as feature
      // if (config.server.http2) <-- check if force http2
      serverFactory = _https.default.createServer(httpsOptions, app);
    } catch (err) {
      throw new Error(`cannot create https server: ${err.message}`);
    }
  } else {
    // http
    debug('http enabled');
    serverFactory = _http.default.createServer(app);
  }
  if (config.server && typeof config.server.keepAliveTimeout !== 'undefined' &&
  // @ts-ignore
  config.server.keepAliveTimeout !== 'null') {
    // library definition for node is not up to date (doesn't contain recent 8.0 changes)
    serverFactory.keepAliveTimeout = config.server.keepAliveTimeout * 1000;
  }
  // FIXE: I could not find the reason of this code.
  unlinkAddressPath(addr);
  return serverFactory;
}
function unlinkAddressPath(addr) {
  if (addr.path && _fs.default.existsSync(addr.path)) {
    _fs.default.unlinkSync(addr.path);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,