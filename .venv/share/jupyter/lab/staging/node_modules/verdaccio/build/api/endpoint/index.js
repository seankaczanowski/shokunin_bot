"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _express = _interopRequireDefault(require("express"));
var _distTags = _interopRequireDefault(require("./api/dist-tags"));
var _package = _interopRequireDefault(require("./api/package"));
var _ping = _interopRequireDefault(require("./api/ping"));
var _publish = _interopRequireDefault(require("./api/publish"));
var _search = _interopRequireDefault(require("./api/search"));
var _stars = _interopRequireDefault(require("./api/stars"));
var _user = _interopRequireDefault(require("./api/user"));
var _profile = _interopRequireDefault(require("./api/v1/profile"));
var _search2 = _interopRequireDefault(require("./api/v1/search"));
var _token = _interopRequireDefault(require("./api/v1/token"));
var _whoami = _interopRequireDefault(require("./api/whoami"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const {
  match,
  validateName,
  validatePackage,
  encodeScopePackage,
  antiLoop
} = require('@verdaccio/middleware');
function _default(config, auth, storage) {
  /* eslint new-cap:off */
  const app = _express.default.Router();
  /* eslint new-cap:off */
  // validate all of these params as a package name
  // this might be too harsh, so ask if it causes trouble
  app.param('package', validatePackage);
  app.param('filename', validateName);
  app.param('tag', validateName);
  app.param('version', validateName);
  app.param('revision', validateName);
  app.param('token', validateName);

  // these can't be safely put into express url for some reason
  // TODO: For some reason? what reason?
  app.param('_rev', match(/^-rev$/));
  app.param('org_couchdb_user', match(/^org\.couchdb\.user:/));
  app.use(auth.apiJWTmiddleware());
  app.use(_express.default.json({
    strict: false,
    limit: config.max_body_size || '10mb'
  }));
  app.use(antiLoop(config));
  // encode / in a scoped package name to be matched as a single parameter in routes
  app.use(encodeScopePackage);
  (0, _whoami.default)(app);
  (0, _profile.default)(app, auth, config);
  (0, _search.default)(app, auth, storage);
  (0, _user.default)(app, auth, config);
  (0, _distTags.default)(app, auth, storage);
  (0, _publish.default)(app, auth, storage, config);
  (0, _ping.default)(app);
  (0, _stars.default)(app, storage);
  (0, _search2.default)(app, auth, storage);
  (0, _token.default)(app, auth, storage, config);
  (0, _package.default)(app, auth, storage, config);
  return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Rpc3RUYWdzIiwiX3BhY2thZ2UiLCJfcGluZyIsIl9wdWJsaXNoIiwiX3NlYXJjaCIsIl9zdGFycyIsIl91c2VyIiwiX3Byb2ZpbGUiLCJfc2VhcmNoMiIsIl90b2tlbiIsIl93aG9hbWkiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtYXRjaCIsInZhbGlkYXRlTmFtZSIsInZhbGlkYXRlUGFja2FnZSIsImVuY29kZVNjb3BlUGFja2FnZSIsImFudGlMb29wIiwiX2RlZmF1bHQiLCJjb25maWciLCJhdXRoIiwic3RvcmFnZSIsImFwcCIsImV4cHJlc3MiLCJSb3V0ZXIiLCJwYXJhbSIsInVzZSIsImFwaUpXVG1pZGRsZXdhcmUiLCJqc29uIiwic3RyaWN0IiwibGltaXQiLCJtYXhfYm9keV9zaXplIiwid2hvYW1pIiwicHJvZmlsZSIsInNlYXJjaCIsInVzZXIiLCJkaXN0VGFncyIsInB1Ymxpc2giLCJwaW5nIiwic3RhcnMiLCJ2MVNlYXJjaCIsInRva2VuIiwicGtnIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS9lbmRwb2ludC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCBBdXRoIGZyb20gJy4uLy4uL2xpYi9hdXRoJztcbmltcG9ydCBTdG9yYWdlIGZyb20gJy4uLy4uL2xpYi9zdG9yYWdlJztcbmltcG9ydCBkaXN0VGFncyBmcm9tICcuL2FwaS9kaXN0LXRhZ3MnO1xuaW1wb3J0IHBrZyBmcm9tICcuL2FwaS9wYWNrYWdlJztcbmltcG9ydCBwaW5nIGZyb20gJy4vYXBpL3BpbmcnO1xuaW1wb3J0IHB1Ymxpc2ggZnJvbSAnLi9hcGkvcHVibGlzaCc7XG5pbXBvcnQgc2VhcmNoIGZyb20gJy4vYXBpL3NlYXJjaCc7XG5pbXBvcnQgc3RhcnMgZnJvbSAnLi9hcGkvc3RhcnMnO1xuaW1wb3J0IHVzZXIgZnJvbSAnLi9hcGkvdXNlcic7XG5pbXBvcnQgcHJvZmlsZSBmcm9tICcuL2FwaS92MS9wcm9maWxlJztcbmltcG9ydCB2MVNlYXJjaCBmcm9tICcuL2FwaS92MS9zZWFyY2gnO1xuaW1wb3J0IHRva2VuIGZyb20gJy4vYXBpL3YxL3Rva2VuJztcbmltcG9ydCB3aG9hbWkgZnJvbSAnLi9hcGkvd2hvYW1pJztcblxuY29uc3Qge1xuICBtYXRjaCxcbiAgdmFsaWRhdGVOYW1lLFxuICB2YWxpZGF0ZVBhY2thZ2UsXG4gIGVuY29kZVNjb3BlUGFja2FnZSxcbiAgYW50aUxvb3AsXG59ID0gcmVxdWlyZSgnQHZlcmRhY2Npby9taWRkbGV3YXJlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb25maWc6IENvbmZpZywgYXV0aDogQXV0aCwgc3RvcmFnZTogU3RvcmFnZSkge1xuICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgY29uc3QgYXBwID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbiAgLyogZXNsaW50IG5ldy1jYXA6b2ZmICovXG4gIC8vIHZhbGlkYXRlIGFsbCBvZiB0aGVzZSBwYXJhbXMgYXMgYSBwYWNrYWdlIG5hbWVcbiAgLy8gdGhpcyBtaWdodCBiZSB0b28gaGFyc2gsIHNvIGFzayBpZiBpdCBjYXVzZXMgdHJvdWJsZVxuICBhcHAucGFyYW0oJ3BhY2thZ2UnLCB2YWxpZGF0ZVBhY2thZ2UpO1xuICBhcHAucGFyYW0oJ2ZpbGVuYW1lJywgdmFsaWRhdGVOYW1lKTtcbiAgYXBwLnBhcmFtKCd0YWcnLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3ZlcnNpb24nLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3JldmlzaW9uJywgdmFsaWRhdGVOYW1lKTtcbiAgYXBwLnBhcmFtKCd0b2tlbicsIHZhbGlkYXRlTmFtZSk7XG5cbiAgLy8gdGhlc2UgY2FuJ3QgYmUgc2FmZWx5IHB1dCBpbnRvIGV4cHJlc3MgdXJsIGZvciBzb21lIHJlYXNvblxuICAvLyBUT0RPOiBGb3Igc29tZSByZWFzb24/IHdoYXQgcmVhc29uP1xuICBhcHAucGFyYW0oJ19yZXYnLCBtYXRjaCgvXi1yZXYkLykpO1xuICBhcHAucGFyYW0oJ29yZ19jb3VjaGRiX3VzZXInLCBtYXRjaCgvXm9yZ1xcLmNvdWNoZGJcXC51c2VyOi8pKTtcblxuICBhcHAudXNlKGF1dGguYXBpSldUbWlkZGxld2FyZSgpKTtcbiAgYXBwLnVzZShleHByZXNzLmpzb24oeyBzdHJpY3Q6IGZhbHNlLCBsaW1pdDogY29uZmlnLm1heF9ib2R5X3NpemUgfHwgJzEwbWInIH0pKTtcbiAgYXBwLnVzZShhbnRpTG9vcChjb25maWcpKTtcbiAgLy8gZW5jb2RlIC8gaW4gYSBzY29wZWQgcGFja2FnZSBuYW1lIHRvIGJlIG1hdGNoZWQgYXMgYSBzaW5nbGUgcGFyYW1ldGVyIGluIHJvdXRlc1xuICBhcHAudXNlKGVuY29kZVNjb3BlUGFja2FnZSk7XG4gIHdob2FtaShhcHApO1xuICBwcm9maWxlKGFwcCwgYXV0aCwgY29uZmlnKTtcbiAgc2VhcmNoKGFwcCwgYXV0aCwgc3RvcmFnZSk7XG4gIHVzZXIoYXBwLCBhdXRoLCBjb25maWcpO1xuICBkaXN0VGFncyhhcHAsIGF1dGgsIHN0b3JhZ2UpO1xuICBwdWJsaXNoKGFwcCwgYXV0aCwgc3RvcmFnZSwgY29uZmlnKTtcbiAgcGluZyhhcHApO1xuICBzdGFycyhhcHAsIHN0b3JhZ2UpO1xuICB2MVNlYXJjaChhcHAsIGF1dGgsIHN0b3JhZ2UpO1xuICB0b2tlbihhcHAsIGF1dGgsIHN0b3JhZ2UsIGNvbmZpZyk7XG4gIHBrZyhhcHAsIGF1dGgsIHN0b3JhZ2UsIGNvbmZpZyk7XG4gIHJldHVybiBhcHA7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQU1BLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFFBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLE9BQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLEtBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFRLFFBQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFTLFFBQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFVLE1BQUEsR0FBQVgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFXLE9BQUEsR0FBQVosc0JBQUEsQ0FBQUMsT0FBQTtBQUFrQyxTQUFBRCx1QkFBQWEsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUVsQyxNQUFNO0VBQ0pHLEtBQUs7RUFDTEMsWUFBWTtFQUNaQyxlQUFlO0VBQ2ZDLGtCQUFrQjtFQUNsQkM7QUFDRixDQUFDLEdBQUduQixPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFFckIsU0FBQW9CLFNBQVVDLE1BQWMsRUFBRUMsSUFBVSxFQUFFQyxPQUFnQixFQUFFO0VBQ3JFO0VBQ0EsTUFBTUMsR0FBRyxHQUFHQyxnQkFBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQztFQUM1QjtFQUNBO0VBQ0E7RUFDQUYsR0FBRyxDQUFDRyxLQUFLLENBQUMsU0FBUyxFQUFFVixlQUFlLENBQUM7RUFDckNPLEdBQUcsQ0FBQ0csS0FBSyxDQUFDLFVBQVUsRUFBRVgsWUFBWSxDQUFDO0VBQ25DUSxHQUFHLENBQUNHLEtBQUssQ0FBQyxLQUFLLEVBQUVYLFlBQVksQ0FBQztFQUM5QlEsR0FBRyxDQUFDRyxLQUFLLENBQUMsU0FBUyxFQUFFWCxZQUFZLENBQUM7RUFDbENRLEdBQUcsQ0FBQ0csS0FBSyxDQUFDLFVBQVUsRUFBRVgsWUFBWSxDQUFDO0VBQ25DUSxHQUFHLENBQUNHLEtBQUssQ0FBQyxPQUFPLEVBQUVYLFlBQVksQ0FBQzs7RUFFaEM7RUFDQTtFQUNBUSxHQUFHLENBQUNHLEtBQUssQ0FBQyxNQUFNLEVBQUVaLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNsQ1MsR0FBRyxDQUFDRyxLQUFLLENBQUMsa0JBQWtCLEVBQUVaLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0VBRTVEUyxHQUFHLENBQUNJLEdBQUcsQ0FBQ04sSUFBSSxDQUFDTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7RUFDaENMLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDSCxnQkFBTyxDQUFDSyxJQUFJLENBQUM7SUFBRUMsTUFBTSxFQUFFLEtBQUs7SUFBRUMsS0FBSyxFQUFFWCxNQUFNLENBQUNZLGFBQWEsSUFBSTtFQUFPLENBQUMsQ0FBQyxDQUFDO0VBQy9FVCxHQUFHLENBQUNJLEdBQUcsQ0FBQ1QsUUFBUSxDQUFDRSxNQUFNLENBQUMsQ0FBQztFQUN6QjtFQUNBRyxHQUFHLENBQUNJLEdBQUcsQ0FBQ1Ysa0JBQWtCLENBQUM7RUFDM0IsSUFBQWdCLGVBQU0sRUFBQ1YsR0FBRyxDQUFDO0VBQ1gsSUFBQVcsZ0JBQU8sRUFBQ1gsR0FBRyxFQUFFRixJQUFJLEVBQUVELE1BQU0sQ0FBQztFQUMxQixJQUFBZSxlQUFNLEVBQUNaLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLENBQUM7RUFDMUIsSUFBQWMsYUFBSSxFQUFDYixHQUFHLEVBQUVGLElBQUksRUFBRUQsTUFBTSxDQUFDO0VBQ3ZCLElBQUFpQixpQkFBUSxFQUFDZCxHQUFHLEVBQUVGLElBQUksRUFBRUMsT0FBTyxDQUFDO0VBQzVCLElBQUFnQixnQkFBTyxFQUFDZixHQUFHLEVBQUVGLElBQUksRUFBRUMsT0FBTyxFQUFFRixNQUFNLENBQUM7RUFDbkMsSUFBQW1CLGFBQUksRUFBQ2hCLEdBQUcsQ0FBQztFQUNULElBQUFpQixjQUFLLEVBQUNqQixHQUFHLEVBQUVELE9BQU8sQ0FBQztFQUNuQixJQUFBbUIsZ0JBQVEsRUFBQ2xCLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLENBQUM7RUFDNUIsSUFBQW9CLGNBQUssRUFBQ25CLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLEVBQUVGLE1BQU0sQ0FBQztFQUNqQyxJQUFBdUIsZ0JBQUcsRUFBQ3BCLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLEVBQUVGLE1BQU0sQ0FBQztFQUMvQixPQUFPRyxHQUFHO0FBQ1oiLCJpZ25vcmVMaXN0IjpbXX0=