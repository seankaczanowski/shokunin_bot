"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _lodash = _interopRequireDefault(require("lodash"));
var _core = require("@verdaccio/core");
var _middleware = require("@verdaccio/middleware");
var _constants = require("../../../../lib/constants");
var _utils = require("../../../../lib/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _default(router, auth, config) {
  function buildProfile(name) {
    return {
      tfa: false,
      name,
      email: '',
      email_verified: false,
      created: '',
      updated: '',
      cidr_whitelist: null,
      fullname: ''
    };
  }
  router.get('/-/npm/v1/user', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name) === false) {
      return next(buildProfile(req.remote_user.name));
    }
    res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
    return next({
      message: _constants.API_ERROR.MUST_BE_LOGGED
    });
  });
  router.post('/-/npm/v1/user', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }
    const {
      password,
      tfa
    } = req.body;
    const {
      name
    } = req.remote_user;
    if (_lodash.default.isNil(password) === false) {
      if (_core.validationUtils.validatePassword(password.new) === false) {
        /* eslint new-cap:off */
        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.PASSWORD_SHORT));
        /* eslint new-cap:off */
      }
      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNull(err) === false) {
          return next(_utils.ErrorCode.getCode(err.status, err.message) || _utils.ErrorCode.getConflict(err.message));
        }
        if (isUpdated) {
          return next(buildProfile(req.remote_user.name));
        }
        return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
      });
    } else if (_lodash.default.isNil(tfa) === false) {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.SERVICE_UNAVAILABLE, _constants.SUPPORT_ERRORS.TFA_DISABLED));
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, _constants.APP_ERROR.PROFILE_ERROR));
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29yZSIsIl9taWRkbGV3YXJlIiwiX2NvbnN0YW50cyIsIl91dGlscyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZhdWx0Iiwicm91dGVyIiwiYXV0aCIsImNvbmZpZyIsImJ1aWxkUHJvZmlsZSIsIm5hbWUiLCJ0ZmEiLCJlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIiwiY3JlYXRlZCIsInVwZGF0ZWQiLCJjaWRyX3doaXRlbGlzdCIsImZ1bGxuYW1lIiwiZ2V0IiwicmF0ZUxpbWl0IiwidXNlclJhdGVMaW1pdCIsInJlcSIsInJlcyIsIm5leHQiLCJfIiwiaXNOaWwiLCJyZW1vdGVfdXNlciIsInN0YXR1cyIsIkhUVFBfU1RBVFVTIiwiVU5BVVRIT1JJWkVEIiwibWVzc2FnZSIsIkFQSV9FUlJPUiIsIk1VU1RfQkVfTE9HR0VEIiwicG9zdCIsInBhc3N3b3JkIiwiYm9keSIsInZhbGlkYXRpb25VdGlscyIsInZhbGlkYXRlUGFzc3dvcmQiLCJuZXciLCJFcnJvckNvZGUiLCJnZXRDb2RlIiwiUEFTU1dPUkRfU0hPUlQiLCJjaGFuZ2VQYXNzd29yZCIsIm9sZCIsImVyciIsImlzVXBkYXRlZCIsImlzTnVsbCIsImdldENvbmZsaWN0IiwiZ2V0SW50ZXJuYWxFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIlNFUlZJQ0VfVU5BVkFJTEFCTEUiLCJTVVBQT1JUX0VSUk9SUyIsIlRGQV9ESVNBQkxFRCIsIklOVEVSTkFMX0VSUk9SIiwiQVBQX0VSUk9SIiwiUFJPRklMRV9FUlJPUiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3YxL3Byb2ZpbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzcG9uc2UsIFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgdmFsaWRhdGlvblV0aWxzIH0gZnJvbSAnQHZlcmRhY2Npby9jb3JlJztcbmltcG9ydCB7IHJhdGVMaW1pdCB9IGZyb20gJ0B2ZXJkYWNjaW8vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBDb25maWdZYW1sIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCBBdXRoIGZyb20gJy4uLy4uLy4uLy4uL2xpYi9hdXRoJztcbmltcG9ydCB7IEFQSV9FUlJPUiwgQVBQX0VSUk9SLCBIVFRQX1NUQVRVUywgU1VQUE9SVF9FUlJPUlMgfSBmcm9tICcuLi8uLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9maWxlIHtcbiAgdGZhOiBib29sZWFuO1xuICBuYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGVtYWlsX3ZlcmlmaWVkOiBib29sZWFuO1xuICBjcmVhdGVkOiBzdHJpbmc7XG4gIHVwZGF0ZWQ6IHN0cmluZztcbiAgY2lkcl93aGl0ZWxpc3Q6IHN0cmluZ1tdIHwgbnVsbDtcbiAgZnVsbG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHJvdXRlcjogUm91dGVyLCBhdXRoOiBBdXRoLCBjb25maWc6IENvbmZpZ1lhbWwpIHtcbiAgZnVuY3Rpb24gYnVpbGRQcm9maWxlKG5hbWU6IHN0cmluZyk6IFByb2ZpbGUge1xuICAgIHJldHVybiB7XG4gICAgICB0ZmE6IGZhbHNlLFxuICAgICAgbmFtZSxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIGVtYWlsX3ZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIGNyZWF0ZWQ6ICcnLFxuICAgICAgdXBkYXRlZDogJycsXG4gICAgICBjaWRyX3doaXRlbGlzdDogbnVsbCxcbiAgICAgIGZ1bGxuYW1lOiAnJyxcbiAgICB9O1xuICB9XG5cbiAgcm91dGVyLmdldChcbiAgICAnLy0vbnBtL3YxL3VzZXInLFxuICAgIHJhdGVMaW1pdChjb25maWc/LnVzZXJSYXRlTGltaXQpLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBpZiAoXy5pc05pbChyZXEucmVtb3RlX3VzZXIubmFtZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGJ1aWxkUHJvZmlsZShyZXEucmVtb3RlX3VzZXIubmFtZSkpO1xuICAgICAgfVxuXG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIG1lc3NhZ2U6IEFQSV9FUlJPUi5NVVNUX0JFX0xPR0dFRCxcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcblxuICByb3V0ZXIucG9zdChcbiAgICAnLy0vbnBtL3YxL3VzZXInLFxuICAgIHJhdGVMaW1pdChjb25maWc/LnVzZXJSYXRlTGltaXQpLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBpZiAoXy5pc05pbChyZXEucmVtb3RlX3VzZXIubmFtZSkpIHtcbiAgICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5VTkFVVEhPUklaRUQpO1xuICAgICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgICAgbWVzc2FnZTogQVBJX0VSUk9SLk1VU1RfQkVfTE9HR0VELFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwYXNzd29yZCwgdGZhIH0gPSByZXEuYm9keTtcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcmVxLnJlbW90ZV91c2VyO1xuXG4gICAgICBpZiAoXy5pc05pbChwYXNzd29yZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmICh2YWxpZGF0aW9uVXRpbHMudmFsaWRhdGVQYXNzd29yZChwYXNzd29yZC5uZXcpID09PSBmYWxzZSkge1xuICAgICAgICAgIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICAgICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCwgQVBJX0VSUk9SLlBBU1NXT1JEX1NIT1JUKSk7XG4gICAgICAgICAgLyogZXNsaW50IG5ldy1jYXA6b2ZmICovXG4gICAgICAgIH1cblxuICAgICAgICBhdXRoLmNoYW5nZVBhc3N3b3JkKFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcGFzc3dvcmQub2xkLFxuICAgICAgICAgIHBhc3N3b3JkLm5ldyxcbiAgICAgICAgICAoZXJyLCBpc1VwZGF0ZWQpOiAkTmV4dEZ1bmN0aW9uVmVyID0+IHtcbiAgICAgICAgICAgIGlmIChfLmlzTnVsbChlcnIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dChcbiAgICAgICAgICAgICAgICBFcnJvckNvZGUuZ2V0Q29kZShlcnIuc3RhdHVzLCBlcnIubWVzc2FnZSkgfHwgRXJyb3JDb2RlLmdldENvbmZsaWN0KGVyci5tZXNzYWdlKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNVcGRhdGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0KGJ1aWxkUHJvZmlsZShyZXEucmVtb3RlX3VzZXIubmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldEludGVybmFsRXJyb3IoQVBJX0VSUk9SLklOVEVSTkFMX1NFUlZFUl9FUlJPUikpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoXy5pc05pbCh0ZmEpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbmV4dChcbiAgICAgICAgICBFcnJvckNvZGUuZ2V0Q29kZShIVFRQX1NUQVRVUy5TRVJWSUNFX1VOQVZBSUxBQkxFLCBTVVBQT1JUX0VSUk9SUy5URkFfRElTQUJMRUQpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Q29kZShIVFRQX1NUQVRVUy5JTlRFUk5BTF9FUlJPUiwgQVBQX0VSUk9SLlBST0ZJTEVfRVJST1IpKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUlBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUosT0FBQTtBQUFrRCxTQUFBRCx1QkFBQU0sQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQWNuQyxTQUFBRyxTQUFVQyxNQUFjLEVBQUVDLElBQVUsRUFBRUMsTUFBa0IsRUFBRTtFQUN2RSxTQUFTQyxZQUFZQSxDQUFDQyxJQUFZLEVBQVc7SUFDM0MsT0FBTztNQUNMQyxHQUFHLEVBQUUsS0FBSztNQUNWRCxJQUFJO01BQ0pFLEtBQUssRUFBRSxFQUFFO01BQ1RDLGNBQWMsRUFBRSxLQUFLO01BQ3JCQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxjQUFjLEVBQUUsSUFBSTtNQUNwQkMsUUFBUSxFQUFFO0lBQ1osQ0FBQztFQUNIO0VBRUFYLE1BQU0sQ0FBQ1ksR0FBRyxDQUNSLGdCQUFnQixFQUNoQixJQUFBQyxxQkFBUyxFQUFDWCxNQUFNLGFBQU5BLE1BQU0sdUJBQU5BLE1BQU0sQ0FBRVksYUFBYSxDQUFD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