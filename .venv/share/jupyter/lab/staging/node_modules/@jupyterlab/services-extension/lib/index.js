/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
/**
 * @packageDocumentation
 * @module services-extension
 */
import { ConfigSection, ConfigSectionManager, ConnectionStatus, ContentsManager, Drive, EventManager, IConfigSectionManager, IConnectionStatus, IContentsManager, IDefaultDrive, IEventManager, IKernelManager, IKernelSpecManager, INbConvertManager, IServerSettings, IServiceManager, ISessionManager, ISettingManager, ITerminalManager, IUserManager, IWorkspaceManager, KernelManager, KernelSpecManager, NbConvertManager, ServerConnection, ServiceManager, SessionManager, SettingManager, TerminalManager, UserManager, WorkspaceManager } from '@jupyterlab/services';
/**
 * Config section manager plugin.
 */
const configSectionManager = {
    id: '@jupyterlab/services-extension:config-section-manager',
    autoStart: true,
    provides: IConfigSectionManager,
    optional: [IServerSettings],
    description: 'Provides the config section manager.',
    activate: (_, serverSettings) => {
        const manager = new ConfigSectionManager({ serverSettings });
        // Set the config section manager for the global ConfigSection.
        ConfigSection._setConfigSectionManager(manager);
        return manager;
    }
};
/**
 * The default connection status provider.
 */
const connectionStatusPlugin = {
    id: '@jupyterlab/services-extension:connection-status',
    autoStart: true,
    provides: IConnectionStatus,
    description: 'Provides the default connection status.',
    activate: () => {
        return new ConnectionStatus();
    }
};
/**
 * The default contents manager plugin.
 */
const contentsManagerPlugin = {
    id: '@jupyterlab/services-extension:contents-manager',
    description: 'The default contents manager plugin.',
    autoStart: true,
    provides: IContentsManager,
    requires: [IDefaultDrive, IServerSettings],
    activate: (_, defaultDrive, serverSettings) => {
        return new ContentsManager({
            defaultDrive,
            serverSettings
        });
    }
};
/**
 * The default drive plugin.
 */
const defaultDrivePlugin = {
    id: '@jupyterlab/services-extension:default-drive',
    description: 'The default drive for the contents manager.',
    autoStart: true,
    provides: IDefaultDrive,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new Drive({ serverSettings: serverSettings !== null && serverSettings !== void 0 ? serverSettings : undefined });
    }
};
/**
 * The event manager plugin.
 */
const eventManagerPlugin = {
    id: '@jupyterlab/services-extension:event-manager',
    description: 'The event manager plugin.',
    autoStart: true,
    provides: IEventManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new EventManager({ serverSettings });
    }
};
/**
 * The kernel manager plugin.
 */
const kernelManagerPlugin = {
    id: '@jupyterlab/services-extension:kernel-manager',
    description: 'The kernel manager plugin.',
    autoStart: true,
    provides: IKernelManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new KernelManager({ serverSettings });
    }
};
/**
 * The kernel spec manager plugin.
 */
const kernelSpecManagerPlugin = {
    id: '@jupyterlab/services-extension:kernel-spec-manager',
    description: 'The kernel spec manager plugin.',
    autoStart: true,
    provides: IKernelSpecManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new KernelSpecManager({ serverSettings });
    }
};
/**
 * The nbconvert manager plugin.
 */
const nbConvertManagerPlugin = {
    id: '@jupyterlab/services-extension:nbconvert-manager',
    description: 'The nbconvert manager plugin.',
    autoStart: true,
    provides: INbConvertManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new NbConvertManager({ serverSettings });
    }
};
/**
 * The session manager plugin.
 */
const sessionManagerPlugin = {
    id: '@jupyterlab/services-extension:session-manager',
    description: 'The session manager plugin.',
    autoStart: true,
    provides: ISessionManager,
    requires: [IKernelManager],
    optional: [IServerSettings],
    activate: (_, kernelManager, serverSettings) => {
        return new SessionManager({ kernelManager, serverSettings });
    }
};
/**
 * The setting manager plugin.
 */
const settingManagerPlugin = {
    id: '@jupyterlab/services-extension:setting-manager',
    description: 'The setting manager plugin.',
    autoStart: true,
    provides: ISettingManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new SettingManager({ serverSettings });
    }
};
/**
 * The terminal manager plugin.
 */
const terminalManagerPlugin = {
    id: '@jupyterlab/services-extension:terminal-manager',
    description: 'The terminal manager plugin.',
    autoStart: true,
    provides: ITerminalManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new TerminalManager({ serverSettings });
    }
};
/**
 * The user manager plugin.
 */
const userManagerPlugin = {
    id: '@jupyterlab/services-extension:user-manager',
    description: 'The user manager plugin.',
    autoStart: true,
    provides: IUserManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new UserManager({ serverSettings });
    }
};
/**
 * The workspace manager plugin.
 */
const workspaceManagerPlugin = {
    id: '@jupyterlab/services-extension:workspace-manager',
    description: 'The workspace manager plugin.',
    autoStart: true,
    provides: IWorkspaceManager,
    optional: [IServerSettings],
    activate: (_, serverSettings) => {
        return new WorkspaceManager({ serverSettings });
    }
};
/**
 * The default server settings plugin.
 */
const serverSettingsPlugin = {
    id: '@jupyterlab/services-extension:server-settings',
    description: 'The default server settings plugin.',
    autoStart: true,
    provides: IServerSettings,
    activate: (_) => {
        return ServerConnection.makeSettings();
    }
};
/**
 * Instantiate a new service manager.
 */
const serviceManagerPlugin = {
    id: '@jupyterlab/services-extension:service-manager',
    description: 'The default service manager plugin.',
    autoStart: true,
    provides: IServiceManager,
    // Builder is not exposed as a plugin since it is now deprecated.
    optional: [
        IConnectionStatus,
        IContentsManager,
        IDefaultDrive,
        IServerSettings,
        IEventManager,
        IKernelManager,
        IKernelSpecManager,
        INbConvertManager,
        ISessionManager,
        ISettingManager,
        ITerminalManager,
        IUserManager,
        IWorkspaceManager
    ],
    activate: (_, connectionStatus, contents, defaultDrive, serverSettings, events, kernels, kernelspecs, nbconvert, sessions, settings, terminals, user, workspaces) => {
        return new ServiceManager({
            standby: () => {
                return !(connectionStatus === null || connectionStatus === void 0 ? void 0 : connectionStatus.isConnected) || 'when-hidden';
            },
            contents,
            defaultDrive,
            serverSettings,
            events,
            kernels,
            kernelspecs,
            nbconvert,
            sessions,
            settings,
            terminals,
            user,
            workspaces
        });
    }
};
export default [
    configSectionManager,
    connectionStatusPlugin,
    contentsManagerPlugin,
    defaultDrivePlugin,
    eventManagerPlugin,
    kernelManagerPlugin,
    kernelSpecManagerPlugin,
    nbConvertManagerPlugin,
    sessionManagerPlugin,
    settingManagerPlugin,
    serverSettingsPlugin,
    serviceManagerPlugin,
    terminalManagerPlugin,
    userManagerPlugin,
    workspaceManagerPlugin
];
//# sourceMappingURL=index.js.map