/*
 * Copyright (c) Jupyter Development Team.
 * Distributed under the terms of the Modified BSD License.
 */
import { ReactWidget } from '@jupyterlab/ui-components';
import React, { useState } from 'react';
const SettingsImport = (props) => {
    const trans = props.translator.load('jupyterlab');
    const [checkedStates, setCheckedStates] = useState(props.importedSettings.reduce((acc, key) => {
        acc[key] = true;
        return acc;
    }, {}));
    const handleCheckboxChange = (key, isChecked) => {
        const updatedStates = { ...checkedStates, [key]: isChecked };
        setCheckedStates(updatedStates);
    };
    return (React.createElement("div", { className: "jp-SettingsImport-container" },
        React.createElement("div", { className: "jp-SettingsImport-header" },
            React.createElement("span", { className: "jp-SettingsImport-title" }, trans.__('Select settings sections to import')),
            React.createElement("button", { className: "jp-Button jp-mod-styled jp-mod-accept", onClick: () => {
                    props.handleImport(Object.keys(checkedStates).filter(key => !checkedStates[key]));
                } }, trans.__('Import'))),
        React.createElement("div", { className: "jp-SettingsImport-list" }, props.importedSettings.map(key => (React.createElement("label", { key: key, className: "jp-SettingsImport-item" },
            React.createElement("span", { className: "jp-SettingsImport-itemKey" }, key),
            React.createElement("input", { type: "checkbox", checked: checkedStates[key], onChange: e => handleCheckboxChange(key, e.target.checked), className: "jp-SettingsImport-checkbox" })))))));
};
/**
 * A widget for importing settings with checkboxes.
 */
export class ImportSettingsWidget extends ReactWidget {
    /**
     * Constructs a new ImportSettingsWidget.
     *
     * @param importedSettings - The settings to display.
     * @param handleImport - A callback for handling imports.
     */
    constructor(options) {
        const { importedSettings, handleImport, translator } = options;
        super();
        this.importedSettings = importedSettings;
        this.handleImport = handleImport;
        this.addClass('jp-SettingsImport-widget');
        this.translator = translator;
    }
    render() {
        return (React.createElement(SettingsImport, { importedSettings: this.importedSettings, handleImport: this.handleImport, translator: this.translator }));
    }
}
const ImportSettingsDialogBody = (props) => {
    return (React.createElement("div", null,
        React.createElement("div", null, props.successMessage),
        props.failureMessage && (React.createElement("div", null,
            React.createElement("br", null),
            React.createElement("div", null, props.failureMessage),
            props.failedSettings &&
                props.failedSettings.map((setting, index) => (React.createElement("div", { key: index }, setting)))))));
};
export class ImportSettingsDialogBodyWidget extends ReactWidget {
    constructor(_props) {
        super();
        this._props = _props;
    }
    render() {
        return React.createElement(ImportSettingsDialogBody, { ...this._props });
    }
}
//# sourceMappingURL=importSettingsWidget.js.map