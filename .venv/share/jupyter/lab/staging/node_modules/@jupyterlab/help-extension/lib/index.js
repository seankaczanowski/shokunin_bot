// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * @packageDocumentation
 * @module help-extension
 */
import { ILabShell, ILayoutRestorer } from '@jupyterlab/application';
import { Dialog, ICommandPalette, MainAreaWidget, showDialog, WidgetTracker } from '@jupyterlab/apputils';
import { URLExt } from '@jupyterlab/coreutils';
import { IMainMenu } from '@jupyterlab/mainmenu';
import { ITranslator, nullTranslator } from '@jupyterlab/translation';
import { IFrame, jupyterIcon, jupyterlabWordmarkIcon } from '@jupyterlab/ui-components';
import * as React from 'react';
/**
 * The command IDs used by the help plugin.
 */
var CommandIDs;
(function (CommandIDs) {
    CommandIDs.open = 'help:open';
    CommandIDs.about = 'help:about';
    CommandIDs.activate = 'help:activate';
    CommandIDs.close = 'help:close';
    CommandIDs.show = 'help:show';
    CommandIDs.hide = 'help:hide';
    CommandIDs.jupyterForum = 'help:jupyter-forum';
    // Commands kept for backwards compatibility after the move to the apputils-extension
    CommandIDs.licenses = 'help:licenses';
    CommandIDs.licenseReport = 'help:license-report';
    CommandIDs.refreshLicenses = 'help:licenses-refresh';
})(CommandIDs || (CommandIDs = {}));
/**
 * A flag denoting whether the application is loaded over HTTPS.
 */
const LAB_IS_SECURE = window.location.protocol === 'https:';
/**
 * The class name added to the help widget.
 */
const HELP_CLASS = 'jp-Help';
/**
 * A plugin to keep licenses commands that were previously defined in the help-extension.
 * This is mostly for backwards compatibility, in case some other plugins were manually executing these commands.
 */
const licensesCommands = {
    id: '@jupyterlab/help-extension:licenses-commands',
    autoStart: true,
    optional: [ITranslator],
    description: 'Add licenses commands for backwards compatibility.',
    activate: (app, translator) => {
        const { commands } = app;
        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');
        const licensesText = trans.__('Licenses');
        const downloadAsText = trans.__('Download All Licenses');
        const refreshLicenses = trans.__('Refresh Licenses');
        const apputilsLicencesCommand = 'apputils:licenses';
        commands.addCommand(CommandIDs.licenses, {
            label: licensesText,
            execute: args => {
                console.warn(`The command ${CommandIDs.licenses} is deprecated, use ${apputilsLicencesCommand} instead.`);
                return commands.execute(apputilsLicencesCommand, args);
            }
        });
        const apputilsLicenseReportCommand = 'apputils:license-report';
        commands.addCommand(CommandIDs.licenseReport, {
            label: downloadAsText,
            execute: args => {
                console.warn(`The command ${CommandIDs.licenseReport} is deprecated, use ${apputilsLicenseReportCommand} instead.`);
                return commands.execute(apputilsLicenseReportCommand, args);
            }
        });
        const apputilsRefreshLicensesCommand = 'apputils:licenses-refresh';
        commands.addCommand(CommandIDs.refreshLicenses, {
            label: refreshLicenses,
            execute: args => {
                console.warn(`The command ${CommandIDs.refreshLicenses} is deprecated, use ${apputilsRefreshLicensesCommand} instead.`);
                return commands.execute(apputilsRefreshLicensesCommand, args);
            }
        });
    }
};
/**
 * Add a command to show an About dialog.
 */
const about = {
    id: '@jupyterlab/help-extension:about',
    description: 'Adds a "About" dialog feature.',
    autoStart: true,
    requires: [ITranslator],
    optional: [ICommandPalette],
    activate: (app, translator, palette) => {
        const { commands } = app;
        const trans = translator.load('jupyterlab');
        const category = trans.__('Help');
        commands.addCommand(CommandIDs.about, {
            label: trans.__('About %1', app.name),
            execute: () => {
                // Create the header of the about dialog
                const versionNumber = trans.__('Version %1', app.version);
                const versionInfo = (React.createElement("span", { className: "jp-About-version-info" },
                    React.createElement("span", { className: "jp-About-version" }, versionNumber)));
                const title = (React.createElement("span", { className: "jp-About-header" },
                    React.createElement(jupyterIcon.react, { margin: "7px 9.5px", height: "auto", width: "58px" }),
                    React.createElement("div", { className: "jp-About-header-info" },
                        React.createElement(jupyterlabWordmarkIcon.react, { height: "auto", width: "196px" }),
                        versionInfo)));
                // Create the body of the about dialog
                const jupyterURL = 'https://jupyter.org/about.html';
                const contributorsURL = 'https://github.com/jupyterlab/jupyterlab/graphs/contributors';
                const externalLinks = (React.createElement("span", { className: "jp-About-externalLinks" },
                    React.createElement("a", { href: contributorsURL, target: "_blank", rel: "noopener noreferrer", className: "jp-Button-flat" }, trans.__('CONTRIBUTOR LIST')),
                    React.createElement("a", { href: jupyterURL, target: "_blank", rel: "noopener noreferrer", className: "jp-Button-flat" }, trans.__('ABOUT PROJECT JUPYTER'))));
                const copyright = (React.createElement("span", { className: "jp-About-copyright" }, trans.__('Â© %1-%2 Project Jupyter Contributors', 2015, 2025)));
                const body = (React.createElement("div", { className: "jp-About-body" },
                    externalLinks,
                    copyright));
                return showDialog({
                    title,
                    body,
                    buttons: [
                        Dialog.cancelButton({
                            label: trans.__('Close')
                        })
                    ]
                });
            }
        });
        if (palette) {
            palette.addItem({ command: CommandIDs.about, category });
        }
    }
};
/**
 * A plugin to add a command to open the Jupyter Forum.
 */
const jupyterForum = {
    id: '@jupyterlab/help-extension:jupyter-forum',
    description: 'Adds command to open the Jupyter Forum website.',
    autoStart: true,
    requires: [ITranslator],
    optional: [ICommandPalette],
    activate: (app, translator, palette) => {
        const { commands } = app;
        const trans = translator.load('jupyterlab');
        const category = trans.__('Help');
        commands.addCommand(CommandIDs.jupyterForum, {
            label: trans.__('Jupyter Forum'),
            execute: () => {
                window.open('https://discourse.jupyter.org/c/jupyterlab');
            }
        });
        if (palette) {
            palette.addItem({ command: CommandIDs.jupyterForum, category });
        }
    }
};
/**
 * A plugin to open resources in IFrames or new browser tabs.
 */
const open = {
    id: '@jupyterlab/help-extension:open',
    description: 'Add command to open websites as panel or browser tab.',
    autoStart: true,
    requires: [ITranslator],
    optional: [ILayoutRestorer],
    activate: (app, translator, restorer) => {
        const { commands, shell } = app;
        const trans = translator.load('jupyterlab');
        const namespace = 'help-doc';
        const tracker = new WidgetTracker({ namespace });
        let counter = 0;
        /**
         * Create a new HelpWidget widget.
         */
        function newHelpWidget(url, text) {
            // Allow scripts and forms so that things like
            // readthedocs can use their search functionality.
            // We *don't* allow same origin requests, which
            // can prevent some content from being loaded onto the
            // help pages.
            const content = new IFrame({
                sandbox: ['allow-scripts', 'allow-forms'],
                loading: 'lazy'
            });
            content.url = url;
            content.addClass(HELP_CLASS);
            content.title.label = text;
            content.id = `${namespace}-${++counter}`;
            const widget = new MainAreaWidget({ content });
            widget.addClass('jp-Help');
            return widget;
        }
        commands.addCommand(CommandIDs.open, {
            label: args => {
                var _a;
                return (_a = args['text']) !== null && _a !== void 0 ? _a : trans.__('Open the provided `url` in a tab.');
            },
            execute: args => {
                const url = args['url'];
                const text = args['text'];
                const newBrowserTab = args['newBrowserTab'] || false;
                // If help resource will generate a mixed content error, load externally.
                if (newBrowserTab ||
                    (LAB_IS_SECURE && URLExt.parse(url).protocol !== 'https:')) {
                    window.open(url);
                    return;
                }
                const widget = newHelpWidget(url, text);
                void tracker.add(widget);
                shell.add(widget, 'main');
                return widget;
            }
        });
        // Handle state restoration.
        if (restorer) {
            void restorer.restore(tracker, {
                command: CommandIDs.open,
                args: widget => ({
                    url: widget.content.url,
                    text: widget.content.title.label
                }),
                name: widget => widget.content.url
            });
        }
    }
};
/**
 * A plugin to add a list of resources to the help menu.
 */
const resources = {
    id: '@jupyterlab/help-extension:resources',
    description: 'Adds menu entries to Jupyter reference documentation websites.',
    autoStart: true,
    requires: [IMainMenu, ITranslator],
    optional: [ILabShell, ICommandPalette],
    activate: (app, mainMenu, translator, labShell, palette) => {
        const trans = translator.load('jupyterlab');
        const category = trans.__('Help');
        const { commands, serviceManager } = app;
        const resources = [
            {
                text: trans.__('JupyterLab Reference'),
                url: 'https://jupyterlab.readthedocs.io/en/stable/'
            },
            {
                text: trans.__('JupyterLab FAQ'),
                url: 'https://jupyterlab.readthedocs.io/en/stable/getting_started/faq.html'
            },
            {
                text: trans.__('Jupyter Reference'),
                url: 'https://jupyter.org/documentation'
            },
            {
                text: trans.__('Markdown Reference'),
                url: 'https://commonmark.org/help/'
            }
        ];
        resources.sort((a, b) => {
            return a.text.localeCompare(b.text);
        });
        // Populate the Help menu.
        const helpMenu = mainMenu.helpMenu;
        const resourcesGroup = resources.map(args => ({
            args,
            command: CommandIDs.open
        }));
        helpMenu.addGroup(resourcesGroup, 10);
        // Generate a cache of the kernel help links.
        const kernelInfoCache = new Map();
        const onSessionRunningChanged = (m, sessions) => {
            var _a;
            // If a new session has been added, it is at the back
            // of the session list. If one has changed or stopped,
            // it does not hurt to check it.
            if (!sessions.length) {
                return;
            }
            const sessionModel = sessions[sessions.length - 1];
            if (!sessionModel.kernel ||
                kernelInfoCache.has(sessionModel.kernel.name)) {
                return;
            }
            const session = serviceManager.sessions.connectTo({
                model: sessionModel,
                kernelConnectionOptions: { handleComms: false }
            });
            void ((_a = session.kernel) === null || _a === void 0 ? void 0 : _a.info.then(kernelInfo => {
                var _a, _b;
                const name = session.kernel.name;
                // Check the cache second time so that, if two callbacks get scheduled,
                // they don't try to add the same commands.
                if (kernelInfoCache.has(name)) {
                    return;
                }
                const spec = (_b = (_a = serviceManager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specs) === null || _b === void 0 ? void 0 : _b.kernelspecs[name];
                if (!spec) {
                    return;
                }
                // Set the Kernel Info cache.
                kernelInfoCache.set(name, kernelInfo);
                // Utility function to check if the current widget
                // has registered itself with the help menu.
                let usesKernel = false;
                const onCurrentChanged = async () => {
                    const kernel = await commands.execute('helpmenu:get-kernel');
                    usesKernel = (kernel === null || kernel === void 0 ? void 0 : kernel.name) === name;
                };
                // Set the status for the current widget
                onCurrentChanged().catch(error => {
                    console.error('Failed to get the kernel for the current widget.', error);
                });
                if (labShell) {
                    // Update status when current widget changes
                    labShell.currentChanged.connect(onCurrentChanged);
                }
                const isEnabled = () => usesKernel;
                // Add the kernel banner to the Help Menu.
                const bannerCommand = `help-menu-${name}:banner`;
                const kernelName = spec.display_name;
                const kernelIconUrl = spec.resources['logo-svg'] || spec.resources['logo-64x64'];
                commands.addCommand(bannerCommand, {
                    label: trans.__('About the %1 Kernel', kernelName),
                    isVisible: isEnabled,
                    isEnabled,
                    execute: () => {
                        // Create the header of the about dialog
                        const headerLogo = (React.createElement("img", { src: kernelIconUrl, alt: trans.__('Kernel Icon') }));
                        const title = (React.createElement("span", { className: "jp-About-header" },
                            headerLogo,
                            React.createElement("div", { className: "jp-About-header-info" }, kernelName)));
                        const banner = React.createElement("pre", null, kernelInfo.banner);
                        const body = React.createElement("div", { className: "jp-About-body" }, banner);
                        return showDialog({
                            title,
                            body,
                            buttons: [
                                Dialog.cancelButton({
                                    label: trans.__('Close')
                                })
                            ]
                        });
                    }
                });
                helpMenu.addGroup([{ command: bannerCommand }], 20);
                // Add the kernel info help_links to the Help menu.
                const kernelGroup = [];
                (kernelInfo.help_links || []).forEach(link => {
                    const commandId = `help-menu-${name}:${link.text}`;
                    commands.addCommand(commandId, {
                        label: commands.label(CommandIDs.open, link),
                        isVisible: isEnabled,
                        isEnabled,
                        execute: () => {
                            return commands.execute(CommandIDs.open, link);
                        }
                    });
                    kernelGroup.push({ command: commandId });
                });
                helpMenu.addGroup(kernelGroup, 21);
            }).then(() => {
                // Dispose of the session object since we no longer need it.
                session.dispose();
            }));
        };
        // Create menu items for currently running sessions
        for (const model of serviceManager.sessions.running()) {
            onSessionRunningChanged(serviceManager.sessions, [model]);
        }
        serviceManager.sessions.runningChanged.connect(onSessionRunningChanged);
        if (palette) {
            resources.forEach(args => {
                palette.addItem({ args, command: CommandIDs.open, category });
            });
            palette.addItem({
                args: { reload: true },
                command: 'apputils:reset',
                category
            });
        }
    }
};
const plugins = [
    about,
    jupyterForum,
    licensesCommands,
    open,
    resources
];
export default plugins;
//# sourceMappingURL=index.js.map