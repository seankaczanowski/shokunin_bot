{"version":3,"file":"2590.793ef5df282b5fa7828c.js?v=793ef5df282b5fa7828c","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/platform.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/dom.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/observation/observable.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/html-directive.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/binding.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/compiler.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/view.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/template.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/styles/element-styles.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/components/attributes.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/components/fast-definitions.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/components/controller.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/components/fast-element.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/styles/css-directive.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/styles/css.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/observation/array-change-records.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/observation/array-observer.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/ref.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/interfaces.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/when.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/repeat.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js","webpack://@jupyterlab/application-top/./node_modules/@microsoft/fast-element/dist/esm/templating/children.js"],"sourcesContent":["/**\n * A reference to globalThis, with support\n * for browsers that don't yet support the spec.\n * @public\n */\nexport const $global = (function () {\n    if (typeof globalThis !== \"undefined\") {\n        // We're running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== \"undefined\") {\n        // We're running in NodeJS\n        return global;\n    }\n    if (typeof self !== \"undefined\") {\n        // We're running in a worker.\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        // We're running in the browser's main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function(\"return this\")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\nconst propConfig = {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n};\nif ($global.FAST === void 0) {\n    Reflect.defineProperty($global, \"FAST\", Object.assign({ value: Object.create(null) }, propConfig));\n}\n/**\n * The FAST global.\n * @internal\n */\nexport const FAST = $global.FAST;\nif (FAST.getById === void 0) {\n    const storage = Object.create(null);\n    Reflect.defineProperty(FAST, \"getById\", Object.assign({ value(id, initialize) {\n            let found = storage[id];\n            if (found === void 0) {\n                found = initialize ? (storage[id] = initialize()) : null;\n            }\n            return found;\n        } }, propConfig));\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\nexport const emptyArray = Object.freeze([]);\n/**\n * Creates a function capable of locating metadata associated with a type.\n * @returns A metadata locator function.\n * @internal\n */\nexport function createMetadataLocator() {\n    const metadataLookup = new WeakMap();\n    return function (target) {\n        let metadata = metadataLookup.get(target);\n        if (metadata === void 0) {\n            let currentTarget = Reflect.getPrototypeOf(target);\n            while (metadata === void 0 && currentTarget !== null) {\n                metadata = metadataLookup.get(currentTarget);\n                currentTarget = Reflect.getPrototypeOf(currentTarget);\n            }\n            metadata = metadata === void 0 ? [] : metadata.slice(0);\n            metadataLookup.set(target, metadata);\n        }\n        return metadata;\n    };\n}\n","import { $global } from \"./platform.js\";\nconst updateQueue = $global.FAST.getById(1 /* updateQueue */, () => {\n    const tasks = [];\n    const pendingErrors = [];\n    function throwFirstError() {\n        if (pendingErrors.length) {\n            throw pendingErrors.shift();\n        }\n    }\n    function tryRunTask(task) {\n        try {\n            task.call();\n        }\n        catch (error) {\n            pendingErrors.push(error);\n            setTimeout(throwFirstError, 0);\n        }\n    }\n    function process() {\n        const capacity = 1024;\n        let index = 0;\n        while (index < tasks.length) {\n            tryRunTask(tasks[index]);\n            index++;\n            // Prevent leaking memory for long chains of recursive calls to `DOM.queueUpdate`.\n            // If we call `DOM.queueUpdate` within a task scheduled by `DOM.queueUpdate`, the queue will\n            // grow, but to avoid an O(n) walk for every task we execute, we don't\n            // shift tasks off the queue after they have been executed.\n            // Instead, we periodically shift 1024 tasks off the queue.\n            if (index > capacity) {\n                // Manually shift all values starting at the index back to the\n                // beginning of the queue.\n                for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {\n                    tasks[scan] = tasks[scan + index];\n                }\n                tasks.length -= index;\n                index = 0;\n            }\n        }\n        tasks.length = 0;\n    }\n    function enqueue(callable) {\n        if (tasks.length < 1) {\n            $global.requestAnimationFrame(process);\n        }\n        tasks.push(callable);\n    }\n    return Object.freeze({\n        enqueue,\n        process,\n    });\n});\n/* eslint-disable */\nconst fastHTMLPolicy = $global.trustedTypes.createPolicy(\"fast-html\", {\n    createHTML: html => html,\n});\n/* eslint-enable */\nlet htmlPolicy = fastHTMLPolicy;\nconst marker = `fast-${Math.random().toString(36).substring(2, 8)}`;\n/** @internal */\nexport const _interpolationStart = `${marker}{`;\n/** @internal */\nexport const _interpolationEnd = `}${marker}`;\n/**\n * Common DOM APIs.\n * @public\n */\nexport const DOM = Object.freeze({\n    /**\n     * Indicates whether the DOM supports the adoptedStyleSheets feature.\n     */\n    supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) &&\n        \"replace\" in CSSStyleSheet.prototype,\n    /**\n     * Sets the HTML trusted types policy used by the templating engine.\n     * @param policy - The policy to set for HTML.\n     * @remarks\n     * This API can only be called once, for security reasons. It should be\n     * called by the application developer at the start of their program.\n     */\n    setHTMLPolicy(policy) {\n        if (htmlPolicy !== fastHTMLPolicy) {\n            throw new Error(\"The HTML policy can only be set once.\");\n        }\n        htmlPolicy = policy;\n    },\n    /**\n     * Turns a string into trusted HTML using the configured trusted types policy.\n     * @param html - The string to turn into trusted HTML.\n     * @remarks\n     * Used internally by the template engine when creating templates\n     * and setting innerHTML.\n     */\n    createHTML(html) {\n        return htmlPolicy.createHTML(html);\n    },\n    /**\n     * Determines if the provided node is a template marker used by the runtime.\n     * @param node - The node to test.\n     */\n    isMarker(node) {\n        return node && node.nodeType === 8 && node.data.startsWith(marker);\n    },\n    /**\n     * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.\n     * @param node - The marker node to extract the index from.\n     */\n    extractDirectiveIndexFromMarker(node) {\n        return parseInt(node.data.replace(`${marker}:`, \"\"));\n    },\n    /**\n     * Creates a placeholder string suitable for marking out a location *within*\n     * an attribute value or HTML content.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by binding directives.\n     */\n    createInterpolationPlaceholder(index) {\n        return `${_interpolationStart}${index}${_interpolationEnd}`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as an attribute on an\n     * element.\n     * @param attributeName - The name of the custom attribute.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.\n     */\n    createCustomAttributePlaceholder(attributeName, index) {\n        return `${attributeName}=\"${this.createInterpolationPlaceholder(index)}\"`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as a marker within the DOM structure.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by structural directives such as `repeat`.\n     */\n    createBlockPlaceholder(index) {\n        return `<!--${marker}:${index}-->`;\n    },\n    /**\n     * Schedules DOM update work in the next async batch.\n     * @param callable - The callable function or object to queue.\n     */\n    queueUpdate: updateQueue.enqueue,\n    /**\n     * Immediately processes all work previously scheduled\n     * through queueUpdate.\n     * @remarks\n     * This also forces nextUpdate promises\n     * to resolve.\n     */\n    processUpdates: updateQueue.process,\n    /**\n     * Resolves with the next DOM update.\n     */\n    nextUpdate() {\n        return new Promise(updateQueue.enqueue);\n    },\n    /**\n     * Sets an attribute value on an element.\n     * @param element - The element to set the attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is `null` or `undefined`, the attribute is removed, otherwise\n     * it is set to the provided value using the standard `setAttribute` API.\n     */\n    setAttribute(element, attributeName, value) {\n        if (value === null || value === undefined) {\n            element.removeAttribute(attributeName);\n        }\n        else {\n            element.setAttribute(attributeName, value);\n        }\n    },\n    /**\n     * Sets a boolean attribute value.\n     * @param element - The element to set the boolean attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is true, the attribute is added; otherwise it is removed.\n     */\n    setBooleanAttribute(element, attributeName, value) {\n        value\n            ? element.setAttribute(attributeName, \"\")\n            : element.removeAttribute(attributeName);\n    },\n    /**\n     * Removes all the child nodes of the provided parent node.\n     * @param parent - The node to remove the children from.\n     */\n    removeChildNodes(parent) {\n        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {\n            parent.removeChild(child);\n        }\n    },\n    /**\n     * Creates a TreeWalker configured to walk a template fragment.\n     * @param fragment - The fragment to walk.\n     */\n    createTemplateWalker(fragment) {\n        return document.createTreeWalker(fragment, 133, // element, text, comment\n        null, false);\n    },\n});\n","/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nexport class SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.spillover === void 0\n            ? this.sub1 === subscriber || this.sub2 === subscriber\n            : this.spillover.indexOf(subscriber) !== -1;\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        const spillover = this.spillover;\n        if (spillover === void 0) {\n            if (this.has(subscriber)) {\n                return;\n            }\n            if (this.sub1 === void 0) {\n                this.sub1 = subscriber;\n                return;\n            }\n            if (this.sub2 === void 0) {\n                this.sub2 = subscriber;\n                return;\n            }\n            this.spillover = [this.sub1, this.sub2, subscriber];\n            this.sub1 = void 0;\n            this.sub2 = void 0;\n        }\n        else {\n            const index = spillover.indexOf(subscriber);\n            if (index === -1) {\n                spillover.push(subscriber);\n            }\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        const spillover = this.spillover;\n        if (spillover === void 0) {\n            if (this.sub1 === subscriber) {\n                this.sub1 = void 0;\n            }\n            else if (this.sub2 === subscriber) {\n                this.sub2 = void 0;\n            }\n        }\n        else {\n            const index = spillover.indexOf(subscriber);\n            if (index !== -1) {\n                spillover.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const spillover = this.spillover;\n        const source = this.source;\n        if (spillover === void 0) {\n            const sub1 = this.sub1;\n            const sub2 = this.sub2;\n            if (sub1 !== void 0) {\n                sub1.handleChange(source, args);\n            }\n            if (sub2 !== void 0) {\n                sub2.handleChange(source, args);\n            }\n        }\n        else {\n            for (let i = 0, ii = spillover.length; i < ii; ++i) {\n                spillover[i].handleChange(source, args);\n            }\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nexport class PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.sourceSubscribers = null;\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        var _a;\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n        (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        var _a;\n        if (propertyToWatch) {\n            let subscribers = this.subscribers[propertyToWatch];\n            if (subscribers === void 0) {\n                this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n            }\n            subscribers.subscribe(subscriber);\n        }\n        else {\n            this.sourceSubscribers =\n                (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);\n            this.sourceSubscribers.subscribe(subscriber);\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        var _a;\n        if (propertyToUnwatch) {\n            const subscribers = this.subscribers[propertyToUnwatch];\n            if (subscribers !== void 0) {\n                subscribers.unsubscribe(subscriber);\n            }\n        }\n        else {\n            (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);\n        }\n    }\n}\n","import { DOM } from \"../dom.js\";\nimport { createMetadataLocator, FAST } from \"../platform.js\";\nimport { PropertyChangeNotifier, SubscriberSet } from \"./notifier.js\";\n/**\n * Common Observable APIs.\n * @public\n */\nexport const Observable = FAST.getById(2 /* observable */, () => {\n    const volatileRegex = /(:|&&|\\|\\||if)/;\n    const notifierLookup = new WeakMap();\n    const queueUpdate = DOM.queueUpdate;\n    let watcher = void 0;\n    let createArrayObserver = (array) => {\n        throw new Error(\"Must call enableArrayObservation before observing arrays.\");\n    };\n    function getNotifier(source) {\n        let found = source.$fastController || notifierLookup.get(source);\n        if (found === void 0) {\n            if (Array.isArray(source)) {\n                found = createArrayObserver(source);\n            }\n            else {\n                notifierLookup.set(source, (found = new PropertyChangeNotifier(source)));\n            }\n        }\n        return found;\n    }\n    const getAccessors = createMetadataLocator();\n    class DefaultObservableAccessor {\n        constructor(name) {\n            this.name = name;\n            this.field = `_${name}`;\n            this.callback = `${name}Changed`;\n        }\n        getValue(source) {\n            if (watcher !== void 0) {\n                watcher.watch(source, this.name);\n            }\n            return source[this.field];\n        }\n        setValue(source, newValue) {\n            const field = this.field;\n            const oldValue = source[field];\n            if (oldValue !== newValue) {\n                source[field] = newValue;\n                const callback = source[this.callback];\n                if (typeof callback === \"function\") {\n                    callback.call(source, oldValue, newValue);\n                }\n                getNotifier(source).notify(this.name);\n            }\n        }\n    }\n    class BindingObserverImplementation extends SubscriberSet {\n        constructor(binding, initialSubscriber, isVolatileBinding = false) {\n            super(binding, initialSubscriber);\n            this.binding = binding;\n            this.isVolatileBinding = isVolatileBinding;\n            this.needsRefresh = true;\n            this.needsQueue = true;\n            this.first = this;\n            this.last = null;\n            this.propertySource = void 0;\n            this.propertyName = void 0;\n            this.notifier = void 0;\n            this.next = void 0;\n        }\n        observe(source, context) {\n            if (this.needsRefresh && this.last !== null) {\n                this.disconnect();\n            }\n            const previousWatcher = watcher;\n            watcher = this.needsRefresh ? this : void 0;\n            this.needsRefresh = this.isVolatileBinding;\n            const result = this.binding(source, context);\n            watcher = previousWatcher;\n            return result;\n        }\n        disconnect() {\n            if (this.last !== null) {\n                let current = this.first;\n                while (current !== void 0) {\n                    current.notifier.unsubscribe(this, current.propertyName);\n                    current = current.next;\n                }\n                this.last = null;\n                this.needsRefresh = this.needsQueue = true;\n            }\n        }\n        watch(propertySource, propertyName) {\n            const prev = this.last;\n            const notifier = getNotifier(propertySource);\n            const current = prev === null ? this.first : {};\n            current.propertySource = propertySource;\n            current.propertyName = propertyName;\n            current.notifier = notifier;\n            notifier.subscribe(this, propertyName);\n            if (prev !== null) {\n                if (!this.needsRefresh) {\n                    // Declaring the variable prior to assignment below circumvents\n                    // a bug in Angular's optimization process causing infinite recursion\n                    // of this watch() method. Details https://github.com/microsoft/fast/issues/4969\n                    let prevValue;\n                    watcher = void 0;\n                    /* eslint-disable-next-line */\n                    prevValue = prev.propertySource[prev.propertyName];\n                    /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n                    watcher = this;\n                    if (propertySource === prevValue) {\n                        this.needsRefresh = true;\n                    }\n                }\n                prev.next = current;\n            }\n            this.last = current;\n        }\n        handleChange() {\n            if (this.needsQueue) {\n                this.needsQueue = false;\n                queueUpdate(this);\n            }\n        }\n        call() {\n            if (this.last !== null) {\n                this.needsQueue = true;\n                this.notify(this);\n            }\n        }\n        records() {\n            let next = this.first;\n            return {\n                next: () => {\n                    const current = next;\n                    if (current === undefined) {\n                        return { value: void 0, done: true };\n                    }\n                    else {\n                        next = next.next;\n                        return {\n                            value: current,\n                            done: false,\n                        };\n                    }\n                },\n                [Symbol.iterator]: function () {\n                    return this;\n                },\n            };\n        }\n    }\n    return Object.freeze({\n        /**\n         * @internal\n         * @param factory - The factory used to create array observers.\n         */\n        setArrayObserverFactory(factory) {\n            createArrayObserver = factory;\n        },\n        /**\n         * Gets a notifier for an object or Array.\n         * @param source - The object or Array to get the notifier for.\n         */\n        getNotifier,\n        /**\n         * Records a property change for a source object.\n         * @param source - The object to record the change against.\n         * @param propertyName - The property to track as changed.\n         */\n        track(source, propertyName) {\n            if (watcher !== void 0) {\n                watcher.watch(source, propertyName);\n            }\n        },\n        /**\n         * Notifies watchers that the currently executing property getter or function is volatile\n         * with respect to its observable dependencies.\n         */\n        trackVolatile() {\n            if (watcher !== void 0) {\n                watcher.needsRefresh = true;\n            }\n        },\n        /**\n         * Notifies subscribers of a source object of changes.\n         * @param source - the object to notify of changes.\n         * @param args - The change args to pass to subscribers.\n         */\n        notify(source, args) {\n            getNotifier(source).notify(args);\n        },\n        /**\n         * Defines an observable property on an object or prototype.\n         * @param target - The target object to define the observable on.\n         * @param nameOrAccessor - The name of the property to define as observable;\n         * or a custom accessor that specifies the property name and accessor implementation.\n         */\n        defineProperty(target, nameOrAccessor) {\n            if (typeof nameOrAccessor === \"string\") {\n                nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);\n            }\n            getAccessors(target).push(nameOrAccessor);\n            Reflect.defineProperty(target, nameOrAccessor.name, {\n                enumerable: true,\n                get: function () {\n                    return nameOrAccessor.getValue(this);\n                },\n                set: function (newValue) {\n                    nameOrAccessor.setValue(this, newValue);\n                },\n            });\n        },\n        /**\n         * Finds all the observable accessors defined on the target,\n         * including its prototype chain.\n         * @param target - The target object to search for accessor on.\n         */\n        getAccessors,\n        /**\n         * Creates a {@link BindingObserver} that can watch the\n         * provided {@link Binding} for changes.\n         * @param binding - The binding to observe.\n         * @param initialSubscriber - An initial subscriber to changes in the binding value.\n         * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.\n         */\n        binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {\n            return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);\n        },\n        /**\n         * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated\n         * on every evaluation of the value.\n         * @param binding - The binding to inspect.\n         */\n        isVolatileBinding(binding) {\n            return volatileRegex.test(binding.toString());\n        },\n    });\n});\n/**\n * Decorator: Defines an observable property on the target.\n * @param target - The target to define the observable on.\n * @param nameOrAccessor - The property name or accessor to define the observable as.\n * @public\n */\nexport function observable(target, nameOrAccessor) {\n    Observable.defineProperty(target, nameOrAccessor);\n}\n/**\n * Decorator: Marks a property getter as having volatile observable dependencies.\n * @param target - The target that the property is defined on.\n * @param name - The property name.\n * @param name - The existing descriptor.\n * @public\n */\nexport function volatile(target, name, descriptor) {\n    return Object.assign({}, descriptor, {\n        get: function () {\n            Observable.trackVolatile();\n            return descriptor.get.apply(this);\n        },\n    });\n}\nconst contextEvent = FAST.getById(3 /* contextEvent */, () => {\n    let current = null;\n    return {\n        get() {\n            return current;\n        },\n        set(event) {\n            current = event;\n        },\n    };\n});\n/**\n * Provides additional contextual information available to behaviors and expressions.\n * @public\n */\nexport class ExecutionContext {\n    constructor() {\n        /**\n         * The index of the current item within a repeat context.\n         */\n        this.index = 0;\n        /**\n         * The length of the current collection within a repeat context.\n         */\n        this.length = 0;\n        /**\n         * The parent data object within a repeat context.\n         */\n        this.parent = null;\n        /**\n         * The parent execution context when in nested context scenarios.\n         */\n        this.parentContext = null;\n    }\n    /**\n     * The current event within an event handler.\n     */\n    get event() {\n        return contextEvent.get();\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an even index.\n     */\n    get isEven() {\n        return this.index % 2 === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an odd index.\n     */\n    get isOdd() {\n        return this.index % 2 !== 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the first item in the collection.\n     */\n    get isFirst() {\n        return this.index === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is somewhere in the middle of the collection.\n     */\n    get isInMiddle() {\n        return !this.isFirst && !this.isLast;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the last item in the collection.\n     */\n    get isLast() {\n        return this.index === this.length - 1;\n    }\n    /**\n     * Sets the event for the current execution context.\n     * @param event - The event to set.\n     * @internal\n     */\n    static setEvent(event) {\n        contextEvent.set(event);\n    }\n}\nObservable.defineProperty(ExecutionContext.prototype, \"index\");\nObservable.defineProperty(ExecutionContext.prototype, \"length\");\n/**\n * The default execution context used in binding expressions.\n * @public\n */\nexport const defaultExecutionContext = Object.seal(new ExecutionContext());\n","import { DOM } from \"../dom.js\";\n/**\n * Instructs the template engine to apply behavior to a node.\n * @public\n */\nexport class HTMLDirective {\n    constructor() {\n        /**\n         * The index of the DOM node to which the created behavior will apply.\n         */\n        this.targetIndex = 0;\n    }\n}\n/**\n * A {@link HTMLDirective} that targets a named attribute or property on a node.\n * @public\n */\nexport class TargetedHTMLDirective extends HTMLDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createInterpolationPlaceholder;\n    }\n}\n/**\n * A directive that attaches special behavior to an element via a custom attribute.\n * @public\n */\nexport class AttachedBehaviorHTMLDirective extends HTMLDirective {\n    /**\n     *\n     * @param name - The name of the behavior; used as a custom attribute on the element.\n     * @param behavior - The behavior to instantiate and attach to the element.\n     * @param options - Options to pass to the behavior during creation.\n     */\n    constructor(name, behavior, options) {\n        super();\n        this.name = name;\n        this.behavior = behavior;\n        this.options = options;\n    }\n    /**\n     * Creates a placeholder string based on the directive's index within the template.\n     * @param index - The index of the directive within the template.\n     * @remarks\n     * Creates a custom attribute placeholder.\n     */\n    createPlaceholder(index) {\n        return DOM.createCustomAttributePlaceholder(this.name, index);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     * @remarks\n     * Creates an instance of the `behavior` type this directive was constructed with\n     * and passes the target and options to that `behavior`'s constructor.\n     */\n    createBehavior(target) {\n        return new this.behavior(target, this.options);\n    }\n}\n","import { DOM } from \"../dom.js\";\nimport { ExecutionContext, Observable, } from \"../observation/observable.js\";\nimport { TargetedHTMLDirective } from \"./html-directive.js\";\nfunction normalBind(source, context) {\n    this.source = source;\n    this.context = context;\n    if (this.bindingObserver === null) {\n        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);\n    }\n    this.updateTarget(this.bindingObserver.observe(source, context));\n}\nfunction triggerBind(source, context) {\n    this.source = source;\n    this.context = context;\n    this.target.addEventListener(this.targetName, this);\n}\nfunction normalUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n}\nfunction contentUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n    const view = this.target.$fastView;\n    if (view !== void 0 && view.isComposed) {\n        view.unbind();\n        view.needsBindOnly = true;\n    }\n}\nfunction triggerUnbind() {\n    this.target.removeEventListener(this.targetName, this);\n    this.source = null;\n    this.context = null;\n}\nfunction updateAttributeTarget(value) {\n    DOM.setAttribute(this.target, this.targetName, value);\n}\nfunction updateBooleanAttributeTarget(value) {\n    DOM.setBooleanAttribute(this.target, this.targetName, value);\n}\nfunction updateContentTarget(value) {\n    // If there's no actual value, then this equates to the\n    // empty string for the purposes of content bindings.\n    if (value === null || value === undefined) {\n        value = \"\";\n    }\n    // If the value has a \"create\" method, then it's a template-like.\n    if (value.create) {\n        this.target.textContent = \"\";\n        let view = this.target.$fastView;\n        // If there's no previous view that we might be able to\n        // reuse then create a new view from the template.\n        if (view === void 0) {\n            view = value.create();\n        }\n        else {\n            // If there is a previous view, but it wasn't created\n            // from the same template as the new value, then we\n            // need to remove the old view if it's still in the DOM\n            // and create a new view from the template.\n            if (this.target.$fastTemplate !== value) {\n                if (view.isComposed) {\n                    view.remove();\n                    view.unbind();\n                }\n                view = value.create();\n            }\n        }\n        // It's possible that the value is the same as the previous template\n        // and that there's actually no need to compose it.\n        if (!view.isComposed) {\n            view.isComposed = true;\n            view.bind(this.source, this.context);\n            view.insertBefore(this.target);\n            this.target.$fastView = view;\n            this.target.$fastTemplate = value;\n        }\n        else if (view.needsBindOnly) {\n            view.needsBindOnly = false;\n            view.bind(this.source, this.context);\n        }\n    }\n    else {\n        const view = this.target.$fastView;\n        // If there is a view and it's currently composed into\n        // the DOM, then we need to remove it.\n        if (view !== void 0 && view.isComposed) {\n            view.isComposed = false;\n            view.remove();\n            if (view.needsBindOnly) {\n                view.needsBindOnly = false;\n            }\n            else {\n                view.unbind();\n            }\n        }\n        this.target.textContent = value;\n    }\n}\nfunction updatePropertyTarget(value) {\n    this.target[this.targetName] = value;\n}\nfunction updateClassTarget(value) {\n    const classVersions = this.classVersions || Object.create(null);\n    const target = this.target;\n    let version = this.version || 0;\n    // Add the classes, tracking the version at which they were added.\n    if (value !== null && value !== undefined && value.length) {\n        const names = value.split(/\\s+/);\n        for (let i = 0, ii = names.length; i < ii; ++i) {\n            const currentName = names[i];\n            if (currentName === \"\") {\n                continue;\n            }\n            classVersions[currentName] = version;\n            target.classList.add(currentName);\n        }\n    }\n    this.classVersions = classVersions;\n    this.version = version + 1;\n    // If this is the first call to add classes, there's no need to remove old ones.\n    if (version === 0) {\n        return;\n    }\n    // Remove classes from the previous version.\n    version -= 1;\n    for (const name in classVersions) {\n        if (classVersions[name] === version) {\n            target.classList.remove(name);\n        }\n    }\n}\n/**\n * A directive that configures data binding to element content and attributes.\n * @public\n */\nexport class HTMLBindingDirective extends TargetedHTMLDirective {\n    /**\n     * Creates an instance of BindingDirective.\n     * @param binding - A binding that returns the data used to update the DOM.\n     */\n    constructor(binding) {\n        super();\n        this.binding = binding;\n        this.bind = normalBind;\n        this.unbind = normalUnbind;\n        this.updateTarget = updateAttributeTarget;\n        this.isBindingVolatile = Observable.isVolatileBinding(this.binding);\n    }\n    /**\n     * Gets/sets the name of the attribute or property that this\n     * binding is targeting.\n     */\n    get targetName() {\n        return this.originalTargetName;\n    }\n    set targetName(value) {\n        this.originalTargetName = value;\n        if (value === void 0) {\n            return;\n        }\n        switch (value[0]) {\n            case \":\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updatePropertyTarget;\n                if (this.cleanedTargetName === \"innerHTML\") {\n                    const binding = this.binding;\n                    this.binding = (s, c) => DOM.createHTML(binding(s, c));\n                }\n                break;\n            case \"?\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updateBooleanAttributeTarget;\n                break;\n            case \"@\":\n                this.cleanedTargetName = value.substr(1);\n                this.bind = triggerBind;\n                this.unbind = triggerUnbind;\n                break;\n            default:\n                this.cleanedTargetName = value;\n                if (value === \"class\") {\n                    this.updateTarget = updateClassTarget;\n                }\n                break;\n        }\n    }\n    /**\n     * Makes this binding target the content of an element rather than\n     * a particular attribute or property.\n     */\n    targetAtContent() {\n        this.updateTarget = updateContentTarget;\n        this.unbind = contentUnbind;\n    }\n    /**\n     * Creates the runtime BindingBehavior instance based on the configuration\n     * information stored in the BindingDirective.\n     * @param target - The target node that the binding behavior should attach to.\n     */\n    createBehavior(target) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);\n    }\n}\n/**\n * A behavior that updates content and attributes based on a configured\n * BindingDirective.\n * @public\n */\nexport class BindingBehavior {\n    /**\n     * Creates an instance of BindingBehavior.\n     * @param target - The target of the data updates.\n     * @param binding - The binding that returns the latest value for an update.\n     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.\n     * @param bind - The operation to perform during binding.\n     * @param unbind - The operation to perform during unbinding.\n     * @param updateTarget - The operation to perform when updating.\n     * @param targetName - The name of the target attribute or property to update.\n     */\n    constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {\n        /** @internal */\n        this.source = null;\n        /** @internal */\n        this.context = null;\n        /** @internal */\n        this.bindingObserver = null;\n        this.target = target;\n        this.binding = binding;\n        this.isBindingVolatile = isBindingVolatile;\n        this.bind = bind;\n        this.unbind = unbind;\n        this.updateTarget = updateTarget;\n        this.targetName = targetName;\n    }\n    /** @internal */\n    handleChange() {\n        this.updateTarget(this.bindingObserver.observe(this.source, this.context));\n    }\n    /** @internal */\n    handleEvent(event) {\n        ExecutionContext.setEvent(event);\n        const result = this.binding(this.source, this.context);\n        ExecutionContext.setEvent(null);\n        if (result !== true) {\n            event.preventDefault();\n        }\n    }\n}\n","import { _interpolationEnd, _interpolationStart, DOM } from \"../dom.js\";\nimport { HTMLBindingDirective } from \"./binding.js\";\nlet sharedContext = null;\nclass CompilationContext {\n    addFactory(factory) {\n        factory.targetIndex = this.targetIndex;\n        this.behaviorFactories.push(factory);\n    }\n    captureContentBinding(directive) {\n        directive.targetAtContent();\n        this.addFactory(directive);\n    }\n    reset() {\n        this.behaviorFactories = [];\n        this.targetIndex = -1;\n    }\n    release() {\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        sharedContext = this;\n    }\n    static borrow(directives) {\n        const shareable = sharedContext || new CompilationContext();\n        shareable.directives = directives;\n        shareable.reset();\n        sharedContext = null;\n        return shareable;\n    }\n}\nfunction createAggregateBinding(parts) {\n    if (parts.length === 1) {\n        return parts[0];\n    }\n    let targetName;\n    const partCount = parts.length;\n    const finalParts = parts.map((x) => {\n        if (typeof x === \"string\") {\n            return () => x;\n        }\n        targetName = x.targetName || targetName;\n        return x.binding;\n    });\n    const binding = (scope, context) => {\n        let output = \"\";\n        for (let i = 0; i < partCount; ++i) {\n            output += finalParts[i](scope, context);\n        }\n        return output;\n    };\n    const directive = new HTMLBindingDirective(binding);\n    directive.targetName = targetName;\n    return directive;\n}\nconst interpolationEndLength = _interpolationEnd.length;\nfunction parseContent(context, value) {\n    const valueParts = value.split(_interpolationStart);\n    if (valueParts.length === 1) {\n        return null;\n    }\n    const bindingParts = [];\n    for (let i = 0, ii = valueParts.length; i < ii; ++i) {\n        const current = valueParts[i];\n        const index = current.indexOf(_interpolationEnd);\n        let literal;\n        if (index === -1) {\n            literal = current;\n        }\n        else {\n            const directiveIndex = parseInt(current.substring(0, index));\n            bindingParts.push(context.directives[directiveIndex]);\n            literal = current.substring(index + interpolationEndLength);\n        }\n        if (literal !== \"\") {\n            bindingParts.push(literal);\n        }\n    }\n    return bindingParts;\n}\nfunction compileAttributes(context, node, includeBasicValues = false) {\n    const attributes = node.attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n        const attr = attributes[i];\n        const attrValue = attr.value;\n        const parseResult = parseContent(context, attrValue);\n        let result = null;\n        if (parseResult === null) {\n            if (includeBasicValues) {\n                result = new HTMLBindingDirective(() => attrValue);\n                result.targetName = attr.name;\n            }\n        }\n        else {\n            result = createAggregateBinding(parseResult);\n        }\n        if (result !== null) {\n            node.removeAttributeNode(attr);\n            i--;\n            ii--;\n            context.addFactory(result);\n        }\n    }\n}\nfunction compileContent(context, node, walker) {\n    const parseResult = parseContent(context, node.textContent);\n    if (parseResult !== null) {\n        let lastNode = node;\n        for (let i = 0, ii = parseResult.length; i < ii; ++i) {\n            const currentPart = parseResult[i];\n            const currentNode = i === 0\n                ? node\n                : lastNode.parentNode.insertBefore(document.createTextNode(\"\"), lastNode.nextSibling);\n            if (typeof currentPart === \"string\") {\n                currentNode.textContent = currentPart;\n            }\n            else {\n                currentNode.textContent = \" \";\n                context.captureContentBinding(currentPart);\n            }\n            lastNode = currentNode;\n            context.targetIndex++;\n            if (currentNode !== node) {\n                walker.nextNode();\n            }\n        }\n        context.targetIndex--;\n    }\n}\n/**\n * Compiles a template and associated directives into a raw compilation\n * result which include a cloneable DocumentFragment and factories capable\n * of attaching runtime behavior to nodes within the fragment.\n * @param template - The template to compile.\n * @param directives - The directives referenced by the template.\n * @remarks\n * The template that is provided for compilation is altered in-place\n * and cannot be compiled again. If the original template must be preserved,\n * it is recommended that you clone the original and pass the clone to this API.\n * @public\n */\nexport function compileTemplate(template, directives) {\n    const fragment = template.content;\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864\n    document.adoptNode(fragment);\n    const context = CompilationContext.borrow(directives);\n    compileAttributes(context, template, true);\n    const hostBehaviorFactories = context.behaviorFactories;\n    context.reset();\n    const walker = DOM.createTemplateWalker(fragment);\n    let node;\n    while ((node = walker.nextNode())) {\n        context.targetIndex++;\n        switch (node.nodeType) {\n            case 1: // element node\n                compileAttributes(context, node);\n                break;\n            case 3: // text node\n                compileContent(context, node, walker);\n                break;\n            case 8: // comment\n                if (DOM.isMarker(node)) {\n                    context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);\n                }\n        }\n    }\n    let targetOffset = 0;\n    if (\n    // If the first node in a fragment is a marker, that means it's an unstable first node,\n    // because something like a when, repeat, etc. could add nodes before the marker.\n    // To mitigate this, we insert a stable first node. However, if we insert a node,\n    // that will alter the result of the TreeWalker. So, we also need to offset the target index.\n    DOM.isMarker(fragment.firstChild) ||\n        // Or if there is only one node and a directive, it means the template's content\n        // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by\n        // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.\n        (fragment.childNodes.length === 1 && directives.length)) {\n        fragment.insertBefore(document.createComment(\"\"), fragment.firstChild);\n        targetOffset = -1;\n    }\n    const viewBehaviorFactories = context.behaviorFactories;\n    context.release();\n    return {\n        fragment,\n        viewBehaviorFactories,\n        hostBehaviorFactories,\n        targetOffset,\n    };\n}\n","// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nexport class HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view's DOM nodes to the referenced node.\n     * @param node - The parent node to append the view's DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view's DOM nodes before the referenced node.\n     * @param node - The node to insert the view's DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const end = this.lastChild;\n            if (node.previousSibling === end)\n                return;\n            const parentNode = node.parentNode;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view's DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view's behaviors to its binding source.\n     * @param source - The binding source for the view's binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view's behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        range.setStartBefore(views[0].firstChild);\n        range.setEndAfter(views[views.length - 1].lastChild);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n","import { DOM } from \"../dom.js\";\nimport { defaultExecutionContext } from \"../observation/observable.js\";\nimport { compileTemplate } from \"./compiler.js\";\nimport { HTMLView } from \"./view.js\";\nimport { HTMLDirective, TargetedHTMLDirective, } from \"./html-directive.js\";\nimport { HTMLBindingDirective } from \"./binding.js\";\n/**\n * A template capable of creating HTMLView instances or rendering directly to DOM.\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nexport class ViewTemplate {\n    /**\n     * Creates an instance of ViewTemplate.\n     * @param html - The html representing what this template will instantiate, including placeholders for directives.\n     * @param directives - The directives that will be connected to placeholders in the html.\n     */\n    constructor(html, directives) {\n        this.behaviorCount = 0;\n        this.hasHostBehaviors = false;\n        this.fragment = null;\n        this.targetOffset = 0;\n        this.viewBehaviorFactories = null;\n        this.hostBehaviorFactories = null;\n        this.html = html;\n        this.directives = directives;\n    }\n    /**\n     * Creates an HTMLView instance based on this template definition.\n     * @param hostBindingTarget - The element that host behaviors will be bound to.\n     */\n    create(hostBindingTarget) {\n        if (this.fragment === null) {\n            let template;\n            const html = this.html;\n            if (typeof html === \"string\") {\n                template = document.createElement(\"template\");\n                template.innerHTML = DOM.createHTML(html);\n                const fec = template.content.firstElementChild;\n                if (fec !== null && fec.tagName === \"TEMPLATE\") {\n                    template = fec;\n                }\n            }\n            else {\n                template = html;\n            }\n            const result = compileTemplate(template, this.directives);\n            this.fragment = result.fragment;\n            this.viewBehaviorFactories = result.viewBehaviorFactories;\n            this.hostBehaviorFactories = result.hostBehaviorFactories;\n            this.targetOffset = result.targetOffset;\n            this.behaviorCount =\n                this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;\n            this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;\n        }\n        const fragment = this.fragment.cloneNode(true);\n        const viewFactories = this.viewBehaviorFactories;\n        const behaviors = new Array(this.behaviorCount);\n        const walker = DOM.createTemplateWalker(fragment);\n        let behaviorIndex = 0;\n        let targetIndex = this.targetOffset;\n        let node = walker.nextNode();\n        for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {\n            const factory = viewFactories[behaviorIndex];\n            const factoryIndex = factory.targetIndex;\n            while (node !== null) {\n                if (targetIndex === factoryIndex) {\n                    behaviors[behaviorIndex] = factory.createBehavior(node);\n                    break;\n                }\n                else {\n                    node = walker.nextNode();\n                    targetIndex++;\n                }\n            }\n        }\n        if (this.hasHostBehaviors) {\n            const hostFactories = this.hostBehaviorFactories;\n            for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {\n                behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);\n            }\n        }\n        return new HTMLView(fragment, behaviors);\n    }\n    /**\n     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.\n     * @param source - The data source to bind the template to.\n     * @param host - The Element where the template will be rendered.\n     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the\n     * host that the template is being attached to.\n     */\n    render(source, host, hostBindingTarget) {\n        if (typeof host === \"string\") {\n            host = document.getElementById(host);\n        }\n        if (hostBindingTarget === void 0) {\n            hostBindingTarget = host;\n        }\n        const view = this.create(hostBindingTarget);\n        view.bind(source, defaultExecutionContext);\n        view.appendTo(host);\n        return view;\n    }\n}\n// Much thanks to LitHTML for working this out!\nconst lastAttributeNameRegex = \n/* eslint-disable-next-line no-control-regex */\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n/**\n * Transforms a template literal string into a renderable ViewTemplate.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The html helper supports interpolation of strings, numbers, binding expressions,\n * other template instances, and Directive instances.\n * @public\n */\nexport function html(strings, ...values) {\n    const directives = [];\n    let html = \"\";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        const currentString = strings[i];\n        let value = values[i];\n        html += currentString;\n        if (value instanceof ViewTemplate) {\n            const template = value;\n            value = () => template;\n        }\n        if (typeof value === \"function\") {\n            value = new HTMLBindingDirective(value);\n        }\n        if (value instanceof TargetedHTMLDirective) {\n            const match = lastAttributeNameRegex.exec(currentString);\n            if (match !== null) {\n                value.targetName = match[2];\n            }\n        }\n        if (value instanceof HTMLDirective) {\n            // Since not all values are directives, we can't use i\n            // as the index for the placeholder. Instead, we need to\n            // use directives.length to get the next index.\n            html += value.createPlaceholder(directives.length);\n            directives.push(value);\n        }\n        else {\n            html += value;\n        }\n    }\n    html += strings[strings.length - 1];\n    return new ViewTemplate(html, directives);\n}\n","import { DOM } from \"../dom.js\";\n/**\n * Represents styles that can be applied to a custom element.\n * @public\n */\nexport class ElementStyles {\n    constructor() {\n        this.targets = new WeakSet();\n    }\n    /** @internal */\n    addStylesTo(target) {\n        this.targets.add(target);\n    }\n    /** @internal */\n    removeStylesFrom(target) {\n        this.targets.delete(target);\n    }\n    /** @internal */\n    isAttachedTo(target) {\n        return this.targets.has(target);\n    }\n    /**\n     * Associates behaviors with this set of styles.\n     * @param behaviors - The behaviors to associate.\n     */\n    withBehaviors(...behaviors) {\n        this.behaviors =\n            this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);\n        return this;\n    }\n}\n/**\n * Create ElementStyles from ComposableStyles.\n */\nElementStyles.create = (() => {\n    if (DOM.supportsAdoptedStyleSheets) {\n        const styleSheetCache = new Map();\n        return (styles) => \n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new AdoptedStyleSheetsStyles(styles, styleSheetCache);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return (styles) => new StyleElementStyles(styles);\n})();\nfunction reduceStyles(styles) {\n    return styles\n        .map((x) => x instanceof ElementStyles ? reduceStyles(x.styles) : [x])\n        .reduce((prev, curr) => prev.concat(curr), []);\n}\nfunction reduceBehaviors(styles) {\n    return styles\n        .map((x) => (x instanceof ElementStyles ? x.behaviors : null))\n        .reduce((prev, curr) => {\n        if (curr === null) {\n            return prev;\n        }\n        if (prev === null) {\n            prev = [];\n        }\n        return prev.concat(curr);\n    }, null);\n}\nlet addAdoptedStyleSheets = (target, sheets) => {\n    target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...sheets];\n};\nlet removeAdoptedStyleSheets = (target, sheets) => {\n    target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sheets.indexOf(x) === -1);\n};\nif (DOM.supportsAdoptedStyleSheets) {\n    try {\n        // Test if browser implementation uses FrozenArray.\n        // If not, use push / splice to alter the stylesheets\n        // in place. This circumvents a bug in Safari 16.4 where\n        // periodically, assigning the array would previously\n        // cause sheets to be removed.\n        document.adoptedStyleSheets.push();\n        document.adoptedStyleSheets.splice();\n        addAdoptedStyleSheets = (target, sheets) => {\n            target.adoptedStyleSheets.push(...sheets);\n        };\n        removeAdoptedStyleSheets = (target, sheets) => {\n            for (const sheet of sheets) {\n                const index = target.adoptedStyleSheets.indexOf(sheet);\n                if (index !== -1) {\n                    target.adoptedStyleSheets.splice(index, 1);\n                }\n            }\n        };\n    }\n    catch (e) {\n        // Do nothing if an error is thrown, the default\n        // case handles FrozenArray.\n    }\n}\n/**\n * https://wicg.github.io/construct-stylesheets/\n * https://developers.google.com/web/updates/2019/02/constructable-stylesheets\n *\n * @internal\n */\nexport class AdoptedStyleSheetsStyles extends ElementStyles {\n    constructor(styles, styleSheetCache) {\n        super();\n        this.styles = styles;\n        this.styleSheetCache = styleSheetCache;\n        this._styleSheets = void 0;\n        this.behaviors = reduceBehaviors(styles);\n    }\n    get styleSheets() {\n        if (this._styleSheets === void 0) {\n            const styles = this.styles;\n            const styleSheetCache = this.styleSheetCache;\n            this._styleSheets = reduceStyles(styles).map((x) => {\n                if (x instanceof CSSStyleSheet) {\n                    return x;\n                }\n                let sheet = styleSheetCache.get(x);\n                if (sheet === void 0) {\n                    sheet = new CSSStyleSheet();\n                    sheet.replaceSync(x);\n                    styleSheetCache.set(x, sheet);\n                }\n                return sheet;\n            });\n        }\n        return this._styleSheets;\n    }\n    addStylesTo(target) {\n        addAdoptedStyleSheets(target, this.styleSheets);\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        removeAdoptedStyleSheets(target, this.styleSheets);\n        super.removeStylesFrom(target);\n    }\n}\nlet styleClassId = 0;\nfunction getNextStyleClass() {\n    return `fast-style-class-${++styleClassId}`;\n}\n/**\n * @internal\n */\nexport class StyleElementStyles extends ElementStyles {\n    constructor(styles) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles);\n        this.styleClass = getNextStyleClass();\n    }\n    addStylesTo(target) {\n        const styleSheets = this.styleSheets;\n        const styleClass = this.styleClass;\n        target = this.normalizeTarget(target);\n        for (let i = 0; i < styleSheets.length; i++) {\n            const element = document.createElement(\"style\");\n            element.innerHTML = styleSheets[i];\n            element.className = styleClass;\n            target.append(element);\n        }\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        target = this.normalizeTarget(target);\n        const styles = target.querySelectorAll(`.${this.styleClass}`);\n        for (let i = 0, ii = styles.length; i < ii; ++i) {\n            target.removeChild(styles[i]);\n        }\n        super.removeStylesFrom(target);\n    }\n    isAttachedTo(target) {\n        return super.isAttachedTo(this.normalizeTarget(target));\n    }\n    normalizeTarget(target) {\n        return target === document ? document.body : target;\n    }\n}\n","import { Observable } from \"../observation/observable.js\";\nimport { DOM } from \"../dom.js\";\nimport { createMetadataLocator } from \"../platform.js\";\n/**\n * Metadata used to configure a custom attribute's behavior.\n * @public\n */\nexport const AttributeConfiguration = Object.freeze({\n    /**\n     * Locates all attribute configurations associated with a type.\n     */\n    locate: createMetadataLocator(),\n});\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nexport const booleanConverter = {\n    toView(value) {\n        return value ? \"true\" : \"false\";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === \"false\" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nexport const nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nexport class AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = \"reflect\", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === \"boolean\" && converter === void 0) {\n            this.converter = booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === \"fromView\") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case \"reflect\":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case \"boolean\":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(AttributeConfiguration.locate(Owner));\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === \"string\") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nexport function attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        AttributeConfiguration.locate($target.constructor).push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n","import { FAST } from \"../platform.js\";\nimport { Observable } from \"../observation/observable.js\";\nimport { ElementStyles } from \"../styles/element-styles.js\";\nimport { AttributeDefinition } from \"./attributes.js\";\nconst defaultShadowOptions = { mode: \"open\" };\nconst defaultElementOptions = {};\nconst fastRegistry = FAST.getById(4 /* elementRegistry */, () => {\n    const typeToDefinition = new Map();\n    return Object.freeze({\n        register(definition) {\n            if (typeToDefinition.has(definition.type)) {\n                return false;\n            }\n            typeToDefinition.set(definition.type, definition);\n            return true;\n        },\n        getByType(key) {\n            return typeToDefinition.get(key);\n        },\n    });\n});\n/**\n * Defines metadata for a FASTElement.\n * @public\n */\nexport class FASTElementDefinition {\n    /**\n     * Creates an instance of FASTElementDefinition.\n     * @param type - The type this definition is being created for.\n     * @param nameOrConfig - The name of the element to define or a config object\n     * that describes the element to define.\n     */\n    constructor(type, nameOrConfig = type.definition) {\n        if (typeof nameOrConfig === \"string\") {\n            nameOrConfig = { name: nameOrConfig };\n        }\n        this.type = type;\n        this.name = nameOrConfig.name;\n        this.template = nameOrConfig.template;\n        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);\n        const observedAttributes = new Array(attributes.length);\n        const propertyLookup = {};\n        const attributeLookup = {};\n        for (let i = 0, ii = attributes.length; i < ii; ++i) {\n            const current = attributes[i];\n            observedAttributes[i] = current.attribute;\n            propertyLookup[current.name] = current;\n            attributeLookup[current.attribute] = current;\n        }\n        this.attributes = attributes;\n        this.observedAttributes = observedAttributes;\n        this.propertyLookup = propertyLookup;\n        this.attributeLookup = attributeLookup;\n        this.shadowOptions =\n            nameOrConfig.shadowOptions === void 0\n                ? defaultShadowOptions\n                : nameOrConfig.shadowOptions === null\n                    ? void 0\n                    : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);\n        this.elementOptions =\n            nameOrConfig.elementOptions === void 0\n                ? defaultElementOptions\n                : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);\n        this.styles =\n            nameOrConfig.styles === void 0\n                ? void 0\n                : Array.isArray(nameOrConfig.styles)\n                    ? ElementStyles.create(nameOrConfig.styles)\n                    : nameOrConfig.styles instanceof ElementStyles\n                        ? nameOrConfig.styles\n                        : ElementStyles.create([nameOrConfig.styles]);\n    }\n    /**\n     * Indicates if this element has been defined in at least one registry.\n     */\n    get isDefined() {\n        return !!fastRegistry.getByType(this.type);\n    }\n    /**\n     * Defines a custom element based on this definition.\n     * @param registry - The element registry to define the element in.\n     */\n    define(registry = customElements) {\n        const type = this.type;\n        if (fastRegistry.register(this)) {\n            const attributes = this.attributes;\n            const proto = type.prototype;\n            for (let i = 0, ii = attributes.length; i < ii; ++i) {\n                Observable.defineProperty(proto, attributes[i]);\n            }\n            Reflect.defineProperty(type, \"observedAttributes\", {\n                value: this.observedAttributes,\n                enumerable: true,\n            });\n        }\n        if (!registry.get(this.name)) {\n            registry.define(this.name, type, this.elementOptions);\n        }\n        return this;\n    }\n}\n/**\n * Gets the element definition associated with the specified type.\n * @param type - The custom element type to retrieve the definition for.\n */\nFASTElementDefinition.forType = fastRegistry.getByType;\n","import { DOM } from \"../dom.js\";\nimport { PropertyChangeNotifier } from \"../observation/notifier.js\";\nimport { defaultExecutionContext, Observable } from \"../observation/observable.js\";\nimport { FASTElementDefinition } from \"./fast-definitions.js\";\nconst shadowRoots = new WeakMap();\nconst defaultEventOptions = {\n    bubbles: true,\n    composed: true,\n    cancelable: true,\n};\nfunction getShadowRoot(element) {\n    return element.shadowRoot || shadowRoots.get(element) || null;\n}\n/**\n * Controls the lifecycle and rendering of a `FASTElement`.\n * @public\n */\nexport class Controller extends PropertyChangeNotifier {\n    /**\n     * Creates a Controller to control the specified element.\n     * @param element - The element to be controlled by this controller.\n     * @param definition - The element definition metadata that instructs this\n     * controller in how to handle rendering and other platform integrations.\n     * @internal\n     */\n    constructor(element, definition) {\n        super(element);\n        this.boundObservables = null;\n        this.behaviors = null;\n        this.needsInitialization = true;\n        this._template = null;\n        this._styles = null;\n        this._isConnected = false;\n        /**\n         * This allows Observable.getNotifier(...) to return the Controller\n         * when the notifier for the Controller itself is being requested. The\n         * result is that the Observable system does not need to create a separate\n         * instance of Notifier for observables on the Controller. The component and\n         * the controller will now share the same notifier, removing one-object construct\n         * per web component instance.\n         */\n        this.$fastController = this;\n        /**\n         * The view associated with the custom element.\n         * @remarks\n         * If `null` then the element is managing its own rendering.\n         */\n        this.view = null;\n        this.element = element;\n        this.definition = definition;\n        const shadowOptions = definition.shadowOptions;\n        if (shadowOptions !== void 0) {\n            const shadowRoot = element.attachShadow(shadowOptions);\n            if (shadowOptions.mode === \"closed\") {\n                shadowRoots.set(element, shadowRoot);\n            }\n        }\n        // Capture any observable values that were set by the binding engine before\n        // the browser upgraded the element. Then delete the property since it will\n        // shadow the getter/setter that is required to make the observable operate.\n        // Later, in the connect callback, we'll re-apply the values.\n        const accessors = Observable.getAccessors(element);\n        if (accessors.length > 0) {\n            const boundObservables = (this.boundObservables = Object.create(null));\n            for (let i = 0, ii = accessors.length; i < ii; ++i) {\n                const propertyName = accessors[i].name;\n                const value = element[propertyName];\n                if (value !== void 0) {\n                    delete element[propertyName];\n                    boundObservables[propertyName] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Indicates whether or not the custom element has been\n     * connected to the document.\n     */\n    get isConnected() {\n        Observable.track(this, \"isConnected\");\n        return this._isConnected;\n    }\n    setIsConnected(value) {\n        this._isConnected = value;\n        Observable.notify(this, \"isConnected\");\n    }\n    /**\n     * Gets/sets the template used to render the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get template() {\n        return this._template;\n    }\n    set template(value) {\n        if (this._template === value) {\n            return;\n        }\n        this._template = value;\n        if (!this.needsInitialization) {\n            this.renderTemplate(value);\n        }\n    }\n    /**\n     * Gets/sets the primary styles used for the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get styles() {\n        return this._styles;\n    }\n    set styles(value) {\n        if (this._styles === value) {\n            return;\n        }\n        if (this._styles !== null) {\n            this.removeStyles(this._styles);\n        }\n        this._styles = value;\n        if (!this.needsInitialization && value !== null) {\n            this.addStyles(value);\n        }\n    }\n    /**\n     * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.\n     * @param styles - The styles to add.\n     */\n    addStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.append(styles);\n        }\n        else if (!styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.addStylesTo(target);\n            if (sourceBehaviors !== null) {\n                this.addBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.\n     * @param styles - the styles to remove.\n     */\n    removeStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.removeChild(styles);\n        }\n        else if (styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.removeStylesFrom(target);\n            if (sourceBehaviors !== null) {\n                this.removeBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Adds behaviors to this element.\n     * @param behaviors - The behaviors to add.\n     */\n    addBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors || (this.behaviors = new Map());\n        const length = behaviors.length;\n        const behaviorsToBind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);\n            }\n            else {\n                targetBehaviors.set(behavior, 1);\n                behaviorsToBind.push(behavior);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToBind.length; ++i) {\n                behaviorsToBind[i].bind(element, defaultExecutionContext);\n            }\n        }\n    }\n    /**\n     * Removes behaviors from this element.\n     * @param behaviors - The behaviors to remove.\n     * @param force - Forces unbinding of behaviors.\n     */\n    removeBehaviors(behaviors, force = false) {\n        const targetBehaviors = this.behaviors;\n        if (targetBehaviors === null) {\n            return;\n        }\n        const length = behaviors.length;\n        const behaviorsToUnbind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                const count = targetBehaviors.get(behavior) - 1;\n                count === 0 || force\n                    ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior)\n                    : targetBehaviors.set(behavior, count);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToUnbind.length; ++i) {\n                behaviorsToUnbind[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs connected lifecycle behavior on the associated element.\n     */\n    onConnectedCallback() {\n        if (this._isConnected) {\n            return;\n        }\n        const element = this.element;\n        if (this.needsInitialization) {\n            this.finishInitialization();\n        }\n        else if (this.view !== null) {\n            this.view.bind(element, defaultExecutionContext);\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            for (const [behavior] of behaviors) {\n                behavior.bind(element, defaultExecutionContext);\n            }\n        }\n        this.setIsConnected(true);\n    }\n    /**\n     * Runs disconnected lifecycle behavior on the associated element.\n     */\n    onDisconnectedCallback() {\n        if (!this._isConnected) {\n            return;\n        }\n        this.setIsConnected(false);\n        const view = this.view;\n        if (view !== null) {\n            view.unbind();\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            const element = this.element;\n            for (const [behavior] of behaviors) {\n                behavior.unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs the attribute changed callback for the associated element.\n     * @param name - The name of the attribute that changed.\n     * @param oldValue - The previous value of the attribute.\n     * @param newValue - The new value of the attribute.\n     */\n    onAttributeChangedCallback(name, oldValue, newValue) {\n        const attrDef = this.definition.attributeLookup[name];\n        if (attrDef !== void 0) {\n            attrDef.onAttributeChangedCallback(this.element, newValue);\n        }\n    }\n    /**\n     * Emits a custom HTML event.\n     * @param type - The type name of the event.\n     * @param detail - The event detail object to send with the event.\n     * @param options - The event options. By default bubbles and composed.\n     * @remarks\n     * Only emits events if connected.\n     */\n    emit(type, detail, options) {\n        if (this._isConnected) {\n            return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));\n        }\n        return false;\n    }\n    finishInitialization() {\n        const element = this.element;\n        const boundObservables = this.boundObservables;\n        // If we have any observables that were bound, re-apply their values.\n        if (boundObservables !== null) {\n            const propertyNames = Object.keys(boundObservables);\n            for (let i = 0, ii = propertyNames.length; i < ii; ++i) {\n                const propertyName = propertyNames[i];\n                element[propertyName] = boundObservables[propertyName];\n            }\n            this.boundObservables = null;\n        }\n        const definition = this.definition;\n        // 1. Template overrides take top precedence.\n        if (this._template === null) {\n            if (this.element.resolveTemplate) {\n                // 2. Allow for element instance overrides next.\n                this._template = this.element.resolveTemplate();\n            }\n            else if (definition.template) {\n                // 3. Default to the static definition.\n                this._template = definition.template || null;\n            }\n        }\n        // If we have a template after the above process, render it.\n        // If there's no template, then the element author has opted into\n        // custom rendering and they will managed the shadow root's content themselves.\n        if (this._template !== null) {\n            this.renderTemplate(this._template);\n        }\n        // 1. Styles overrides take top precedence.\n        if (this._styles === null) {\n            if (this.element.resolveStyles) {\n                // 2. Allow for element instance overrides next.\n                this._styles = this.element.resolveStyles();\n            }\n            else if (definition.styles) {\n                // 3. Default to the static definition.\n                this._styles = definition.styles || null;\n            }\n        }\n        // If we have styles after the above process, add them.\n        if (this._styles !== null) {\n            this.addStyles(this._styles);\n        }\n        this.needsInitialization = false;\n    }\n    renderTemplate(template) {\n        const element = this.element;\n        // When getting the host to render to, we start by looking\n        // up the shadow root. If there isn't one, then that means\n        // we're doing a Light DOM render to the element's direct children.\n        const host = getShadowRoot(element) || element;\n        if (this.view !== null) {\n            // If there's already a view, we need to unbind and remove through dispose.\n            this.view.dispose();\n            this.view = null;\n        }\n        else if (!this.needsInitialization) {\n            // If there was previous custom rendering, we need to clear out the host.\n            DOM.removeChildNodes(host);\n        }\n        if (template) {\n            // If a new template was provided, render it.\n            this.view = template.render(element, host, element);\n        }\n    }\n    /**\n     * Locates or creates a controller for the specified element.\n     * @param element - The element to return the controller for.\n     * @remarks\n     * The specified element must have a {@link FASTElementDefinition}\n     * registered either through the use of the {@link customElement}\n     * decorator or a call to `FASTElement.define`.\n     */\n    static forCustomElement(element) {\n        const controller = element.$fastController;\n        if (controller !== void 0) {\n            return controller;\n        }\n        const definition = FASTElementDefinition.forType(element.constructor);\n        if (definition === void 0) {\n            throw new Error(\"Missing FASTElement definition.\");\n        }\n        return (element.$fastController = new Controller(element, definition));\n    }\n}\n","import { Controller } from \"./controller.js\";\nimport { FASTElementDefinition, } from \"./fast-definitions.js\";\n/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\nfunction createFASTElement(BaseType) {\n    return class extends BaseType {\n        constructor() {\n            /* eslint-disable-next-line */\n            super();\n            Controller.forCustomElement(this);\n        }\n        $emit(type, detail, options) {\n            return this.$fastController.emit(type, detail, options);\n        }\n        connectedCallback() {\n            this.$fastController.onConnectedCallback();\n        }\n        disconnectedCallback() {\n            this.$fastController.onDisconnectedCallback();\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);\n        }\n    };\n}\n/**\n * A minimal base class for FASTElements that also provides\n * static helpers for working with FASTElements.\n * @public\n */\nexport const FASTElement = Object.assign(createFASTElement(HTMLElement), {\n    /**\n     * Creates a new FASTElement base class inherited from the\n     * provided base type.\n     * @param BaseType - The base element type to inherit from.\n     */\n    from(BaseType) {\n        return createFASTElement(BaseType);\n    },\n    /**\n     * Defines a platform custom element based on the provided type and definition.\n     * @param type - The custom element type to define.\n     * @param nameOrDef - The name of the element to define or a definition object\n     * that describes the element to define.\n     */\n    define(type, nameOrDef) {\n        return new FASTElementDefinition(type, nameOrDef).define().type;\n    },\n});\n/**\n * Decorator: Defines a platform custom element based on `FASTElement`.\n * @param nameOrDef - The name of the element to define or a definition object\n * that describes the element to define.\n * @public\n */\nexport function customElement(nameOrDef) {\n    /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\n    return function (type) {\n        new FASTElementDefinition(type, nameOrDef).define();\n    };\n}\n","/**\n * Directive for use in {@link css}.\n *\n * @public\n */\nexport class CSSDirective {\n    /**\n     * Creates a CSS fragment to interpolate into the CSS document.\n     * @returns - the string to interpolate into CSS\n     */\n    createCSS() {\n        return \"\";\n    }\n    /**\n     * Creates a behavior to bind to the host element.\n     * @returns - the behavior to bind to the host element, or undefined.\n     */\n    createBehavior() {\n        return undefined;\n    }\n}\n","import { CSSDirective } from \"./css-directive.js\";\nimport { ElementStyles } from \"./element-styles.js\";\nfunction collectStyles(strings, values) {\n    const styles = [];\n    let cssString = \"\";\n    const behaviors = [];\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        let value = values[i];\n        if (value instanceof CSSDirective) {\n            const behavior = value.createBehavior();\n            value = value.createCSS();\n            if (behavior) {\n                behaviors.push(behavior);\n            }\n        }\n        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== \"\") {\n                styles.push(cssString);\n                cssString = \"\";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== \"\") {\n        styles.push(cssString);\n    }\n    return {\n        styles,\n        behaviors,\n    };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nexport function css(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    const elementStyles = ElementStyles.create(styles);\n    if (behaviors.length) {\n        elementStyles.withBehaviors(...behaviors);\n    }\n    return elementStyles;\n}\nclass CSSPartial extends CSSDirective {\n    constructor(styles, behaviors) {\n        super();\n        this.behaviors = behaviors;\n        this.css = \"\";\n        const stylesheets = styles.reduce((accumulated, current) => {\n            if (typeof current === \"string\") {\n                this.css += current;\n            }\n            else {\n                accumulated.push(current);\n            }\n            return accumulated;\n        }, []);\n        if (stylesheets.length) {\n            this.styles = ElementStyles.create(stylesheets);\n        }\n    }\n    createBehavior() {\n        return this;\n    }\n    createCSS() {\n        return this.css;\n    }\n    bind(el) {\n        if (this.styles) {\n            el.$fastController.addStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.addBehaviors(this.behaviors);\n        }\n    }\n    unbind(el) {\n        if (this.styles) {\n            el.$fastController.removeStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.removeBehaviors(this.behaviors);\n        }\n    }\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\nexport function cssPartial(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    return new CSSPartial(styles, behaviors);\n}\n","import { emptyArray } from \"../platform.js\";\n/** @internal */\nexport function newSplice(index, removed, addedCount) {\n    return {\n        index: index,\n        removed: removed,\n        addedCount: addedCount,\n    };\n}\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    // \"Deletion\" columns\n    const rowCount = oldEnd - oldStart + 1;\n    const columnCount = currentEnd - currentStart + 1;\n    const distances = new Array(rowCount);\n    let north;\n    let west;\n    // \"Addition\" rows. Initialize null column.\n    for (let i = 0; i < rowCount; ++i) {\n        distances[i] = new Array(columnCount);\n        distances[i][0] = i;\n    }\n    // Initialize null row\n    for (let j = 0; j < columnCount; ++j) {\n        distances[0][j] = j;\n    }\n    for (let i = 1; i < rowCount; ++i) {\n        for (let j = 1; j < columnCount; ++j) {\n            if (current[currentStart + j - 1] === old[oldStart + i - 1]) {\n                distances[i][j] = distances[i - 1][j - 1];\n            }\n            else {\n                north = distances[i - 1][j] + 1;\n                west = distances[i][j - 1] + 1;\n                distances[i][j] = north < west ? north : west;\n            }\n        }\n    }\n    return distances;\n}\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    const edits = [];\n    while (i > 0 || j > 0) {\n        if (i === 0) {\n            edits.push(EDIT_ADD);\n            j--;\n            continue;\n        }\n        if (j === 0) {\n            edits.push(EDIT_DELETE);\n            i--;\n            continue;\n        }\n        const northWest = distances[i - 1][j - 1];\n        const west = distances[i - 1][j];\n        const north = distances[i][j - 1];\n        let min;\n        if (west < north) {\n            min = west < northWest ? west : northWest;\n        }\n        else {\n            min = north < northWest ? north : northWest;\n        }\n        if (min === northWest) {\n            if (northWest === current) {\n                edits.push(EDIT_LEAVE);\n            }\n            else {\n                edits.push(EDIT_UPDATE);\n                current = northWest;\n            }\n            i--;\n            j--;\n        }\n        else if (min === west) {\n            edits.push(EDIT_DELETE);\n            i--;\n            current = west;\n        }\n        else {\n            edits.push(EDIT_ADD);\n            j--;\n            current = north;\n        }\n    }\n    edits.reverse();\n    return edits;\n}\nfunction sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; ++i) {\n        if (current[i] !== old[i]) {\n            return i;\n        }\n    }\n    return searchLength;\n}\nfunction sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && current[--index1] === old[--index2]) {\n        count++;\n    }\n    return count;\n}\nfunction intersect(start1, end1, start2, end2) {\n    // Disjoint\n    if (end1 < start2 || end2 < start1) {\n        return -1;\n    }\n    // Adjacent\n    if (end1 === start2 || end2 === start1) {\n        return 0;\n    }\n    // Non-zero intersect, span1 first\n    if (start1 < start2) {\n        if (end1 < end2) {\n            return end1 - start2; // Overlap\n        }\n        return end2 - start2; // Contained\n    }\n    // Non-zero intersect, span2 first\n    if (end2 < end1) {\n        return end2 - start1; // Overlap\n    }\n    return end1 - start1; // Contained\n}\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n/**\n * @internal\n * @remarks\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n */\nexport function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart === 0 && oldStart === 0) {\n        prefixCount = sharedPrefix(current, old, minLength);\n    }\n    if (currentEnd === current.length && oldEnd === old.length) {\n        suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n    }\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {\n        return emptyArray;\n    }\n    if (currentStart === currentEnd) {\n        const splice = newSplice(currentStart, [], 0);\n        while (oldStart < oldEnd) {\n            splice.removed.push(old[oldStart++]);\n        }\n        return [splice];\n    }\n    else if (oldStart === oldEnd) {\n        return [newSplice(currentStart, [], currentEnd - currentStart)];\n    }\n    const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n    const splices = [];\n    let splice = void 0;\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; ++i) {\n        switch (ops[i]) {\n            case EDIT_LEAVE:\n                if (splice !== void 0) {\n                    splices.push(splice);\n                    splice = void 0;\n                }\n                index++;\n                oldIndex++;\n                break;\n            case EDIT_UPDATE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            case EDIT_ADD:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                break;\n            case EDIT_DELETE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            // no default\n        }\n    }\n    if (splice !== void 0) {\n        splices.push(splice);\n    }\n    return splices;\n}\nconst $push = Array.prototype.push;\nfunction mergeSplice(splices, index, removed, addedCount) {\n    const splice = newSplice(index, removed, addedCount);\n    let inserted = false;\n    let insertionOffset = 0;\n    for (let i = 0; i < splices.length; i++) {\n        const current = splices[i];\n        current.index += insertionOffset;\n        if (inserted) {\n            continue;\n        }\n        const intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);\n        if (intersectCount >= 0) {\n            // Merge the two splices\n            splices.splice(i, 1);\n            i--;\n            insertionOffset -= current.addedCount - current.removed.length;\n            splice.addedCount += current.addedCount - intersectCount;\n            const deleteCount = splice.removed.length + current.removed.length - intersectCount;\n            if (!splice.addedCount && !deleteCount) {\n                // merged splice is a noop. discard.\n                inserted = true;\n            }\n            else {\n                let currentRemoved = current.removed;\n                if (splice.index < current.index) {\n                    // some prefix of splice.removed is prepended to current.removed.\n                    const prepend = splice.removed.slice(0, current.index - splice.index);\n                    $push.apply(prepend, currentRemoved);\n                    currentRemoved = prepend;\n                }\n                if (splice.index + splice.removed.length >\n                    current.index + current.addedCount) {\n                    // some suffix of splice.removed is appended to current.removed.\n                    const append = splice.removed.slice(current.index + current.addedCount - splice.index);\n                    $push.apply(currentRemoved, append);\n                }\n                splice.removed = currentRemoved;\n                if (current.index < splice.index) {\n                    splice.index = current.index;\n                }\n            }\n        }\n        else if (splice.index < current.index) {\n            // Insert splice here.\n            inserted = true;\n            splices.splice(i, 0, splice);\n            i++;\n            const offset = splice.addedCount - splice.removed.length;\n            current.index += offset;\n            insertionOffset += offset;\n        }\n    }\n    if (!inserted) {\n        splices.push(splice);\n    }\n}\nfunction createInitialSplices(changeRecords) {\n    const splices = [];\n    for (let i = 0, ii = changeRecords.length; i < ii; i++) {\n        const record = changeRecords[i];\n        mergeSplice(splices, record.index, record.removed, record.addedCount);\n    }\n    return splices;\n}\n/** @internal */\nexport function projectArraySplices(array, changeRecords) {\n    let splices = [];\n    const initialSplices = createInitialSplices(changeRecords);\n    for (let i = 0, ii = initialSplices.length; i < ii; ++i) {\n        const splice = initialSplices[i];\n        if (splice.addedCount === 1 && splice.removed.length === 1) {\n            if (splice.removed[0] !== array[splice.index]) {\n                splices.push(splice);\n            }\n            continue;\n        }\n        splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));\n    }\n    return splices;\n}\n","import { DOM } from \"../dom.js\";\nimport { calcSplices, newSplice, projectArraySplices } from \"./array-change-records.js\";\nimport { SubscriberSet } from \"./notifier.js\";\nimport { Observable } from \"./observable.js\";\nlet arrayObservationEnabled = false;\nfunction adjustIndex(changeRecord, array) {\n    let index = changeRecord.index;\n    const arrayLength = array.length;\n    if (index > arrayLength) {\n        index = arrayLength - changeRecord.addedCount;\n    }\n    else if (index < 0) {\n        index =\n            arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n    }\n    if (index < 0) {\n        index = 0;\n    }\n    changeRecord.index = index;\n    return changeRecord;\n}\nclass ArrayObserver extends SubscriberSet {\n    constructor(source) {\n        super(source);\n        this.oldCollection = void 0;\n        this.splices = void 0;\n        this.needsQueue = true;\n        this.call = this.flush;\n        Reflect.defineProperty(source, \"$fastController\", {\n            value: this,\n            enumerable: false,\n        });\n    }\n    subscribe(subscriber) {\n        this.flush();\n        super.subscribe(subscriber);\n    }\n    addSplice(splice) {\n        if (this.splices === void 0) {\n            this.splices = [splice];\n        }\n        else {\n            this.splices.push(splice);\n        }\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    reset(oldCollection) {\n        this.oldCollection = oldCollection;\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    flush() {\n        const splices = this.splices;\n        const oldCollection = this.oldCollection;\n        if (splices === void 0 && oldCollection === void 0) {\n            return;\n        }\n        this.needsQueue = true;\n        this.splices = void 0;\n        this.oldCollection = void 0;\n        const finalSplices = oldCollection === void 0\n            ? projectArraySplices(this.source, splices)\n            : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);\n        this.notify(finalSplices);\n    }\n}\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Enables the array observation mechanism.\n * @remarks\n * Array observation is enabled automatically when using the\n * {@link RepeatDirective}, so calling this API manually is\n * not typically necessary.\n * @public\n */\nexport function enableArrayObservation() {\n    if (arrayObservationEnabled) {\n        return;\n    }\n    arrayObservationEnabled = true;\n    Observable.setArrayObserverFactory((collection) => {\n        return new ArrayObserver(collection);\n    });\n    const proto = Array.prototype;\n    // Don't patch Array if it has already been patched\n    // by another copy of fast-element.\n    if (proto.$fastPatch) {\n        return;\n    }\n    Reflect.defineProperty(proto, \"$fastPatch\", {\n        value: 1,\n        enumerable: false,\n    });\n    const pop = proto.pop;\n    const push = proto.push;\n    const reverse = proto.reverse;\n    const shift = proto.shift;\n    const sort = proto.sort;\n    const splice = proto.splice;\n    const unshift = proto.unshift;\n    proto.pop = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = pop.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(this.length, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.push = function () {\n        const methodCallResult = push.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n    proto.reverse = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = reverse.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.shift = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = shift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(0, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.sort = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = sort.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.splice = function () {\n        const methodCallResult = splice.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));\n        }\n        return methodCallResult;\n    };\n    proto.unshift = function () {\n        const methodCallResult = unshift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n}\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n","import { AttachedBehaviorHTMLDirective } from \"./html-directive.js\";\n/**\n * The runtime behavior for template references.\n * @public\n */\nexport class RefBehavior {\n    /**\n     * Creates an instance of RefBehavior.\n     * @param target - The element to reference.\n     * @param propertyName - The name of the property to assign the reference to.\n     */\n    constructor(target, propertyName) {\n        this.target = target;\n        this.propertyName = propertyName;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        source[this.propertyName] = this.target;\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    unbind() { }\n}\n/**\n * A directive that observes the updates a property with a reference to the element.\n * @param propertyName - The name of the property to assign the reference to.\n * @public\n */\nexport function ref(propertyName) {\n    return new AttachedBehaviorHTMLDirective(\"fast-ref\", RefBehavior, propertyName);\n}\n","/**\n * Determines whether or not an object is a function.\n * @public\n */\nexport const isFunction = (object) => typeof object === \"function\";\n","import { isFunction } from \"../interfaces.js\";\nconst noTemplate = () => null;\nfunction normalizeBinding(value) {\n    return value === undefined ? noTemplate : isFunction(value) ? value : () => value;\n}\n/**\n * A directive that enables basic conditional rendering in a template.\n * @param binding - The condition to test for rendering.\n * @param templateOrTemplateBinding - The template or a binding that gets\n * the template to render when the condition is true.\n * @param elseTemplateOrTemplateBinding - Optional template or binding that that\n * gets the template to render when the conditional is false.\n * @public\n */\nexport function when(binding, templateOrTemplateBinding, elseTemplateOrTemplateBinding) {\n    const dataBinding = isFunction(binding) ? binding : () => binding;\n    const templateBinding = normalizeBinding(templateOrTemplateBinding);\n    const elseBinding = normalizeBinding(elseTemplateOrTemplateBinding);\n    return (source, context) => dataBinding(source, context)\n        ? templateBinding(source, context)\n        : elseBinding(source, context);\n}\n","import { DOM } from \"../dom.js\";\nimport { Observable, } from \"../observation/observable.js\";\nimport { enableArrayObservation } from \"../observation/array-observer.js\";\nimport { emptyArray } from \"../platform.js\";\nimport { HTMLDirective } from \"./html-directive.js\";\nimport { HTMLView } from \"./view.js\";\nconst defaultRepeatOptions = Object.freeze({\n    positioning: false,\n    recycle: true,\n});\nfunction bindWithoutPositioning(view, items, index, context) {\n    view.bind(items[index], context);\n}\nfunction bindWithPositioning(view, items, index, context) {\n    const childContext = Object.create(context);\n    childContext.index = index;\n    childContext.length = items.length;\n    view.bind(items[index], childContext);\n}\n/**\n * A behavior that renders a template for each item in an array.\n * @public\n */\nexport class RepeatBehavior {\n    /**\n     * Creates an instance of RepeatBehavior.\n     * @param location - The location in the DOM to render the repeat.\n     * @param itemsBinding - The array to render.\n     * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.\n     * @param templateBinding - The template to render for each item.\n     * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {\n        this.location = location;\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        this.source = null;\n        this.views = [];\n        this.items = null;\n        this.itemsObserver = null;\n        this.originalContext = void 0;\n        this.childContext = void 0;\n        this.bindView = bindWithoutPositioning;\n        this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);\n        this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);\n        if (options.positioning) {\n            this.bindView = bindWithPositioning;\n        }\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source, context) {\n        this.source = source;\n        this.originalContext = context;\n        this.childContext = Object.create(context);\n        this.childContext.parent = source;\n        this.childContext.parentContext = this.originalContext;\n        this.items = this.itemsBindingObserver.observe(source, this.originalContext);\n        this.template = this.templateBindingObserver.observe(source, this.originalContext);\n        this.observeItems(true);\n        this.refreshAllViews();\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.source = null;\n        this.items = null;\n        if (this.itemsObserver !== null) {\n            this.itemsObserver.unsubscribe(this);\n        }\n        this.unbindAllViews();\n        this.itemsBindingObserver.disconnect();\n        this.templateBindingObserver.disconnect();\n    }\n    /** @internal */\n    handleChange(source, args) {\n        if (source === this.itemsBinding) {\n            this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);\n            this.observeItems();\n            this.refreshAllViews();\n        }\n        else if (source === this.templateBinding) {\n            this.template = this.templateBindingObserver.observe(this.source, this.originalContext);\n            this.refreshAllViews(true);\n        }\n        else {\n            this.updateViews(args);\n        }\n    }\n    observeItems(force = false) {\n        if (!this.items) {\n            this.items = emptyArray;\n            return;\n        }\n        const oldObserver = this.itemsObserver;\n        const newObserver = (this.itemsObserver = Observable.getNotifier(this.items));\n        const hasNewObserver = oldObserver !== newObserver;\n        if (hasNewObserver && oldObserver !== null) {\n            oldObserver.unsubscribe(this);\n        }\n        if (hasNewObserver || force) {\n            newObserver.subscribe(this);\n        }\n    }\n    updateViews(splices) {\n        const childContext = this.childContext;\n        const views = this.views;\n        const bindView = this.bindView;\n        const items = this.items;\n        const template = this.template;\n        const recycle = this.options.recycle;\n        const leftoverViews = [];\n        let leftoverIndex = 0;\n        let availableViews = 0;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            const removed = splice.removed;\n            let removeIndex = 0;\n            let addIndex = splice.index;\n            const end = addIndex + splice.addedCount;\n            const removedViews = views.splice(splice.index, removed.length);\n            const totalAvailableViews = (availableViews =\n                leftoverViews.length + removedViews.length);\n            for (; addIndex < end; ++addIndex) {\n                const neighbor = views[addIndex];\n                const location = neighbor ? neighbor.firstChild : this.location;\n                let view;\n                if (recycle && availableViews > 0) {\n                    if (removeIndex <= totalAvailableViews && removedViews.length > 0) {\n                        view = removedViews[removeIndex];\n                        removeIndex++;\n                    }\n                    else {\n                        view = leftoverViews[leftoverIndex];\n                        leftoverIndex++;\n                    }\n                    availableViews--;\n                }\n                else {\n                    view = template.create();\n                }\n                views.splice(addIndex, 0, view);\n                bindView(view, items, addIndex, childContext);\n                view.insertBefore(location);\n            }\n            if (removedViews[removeIndex]) {\n                leftoverViews.push(...removedViews.slice(removeIndex));\n            }\n        }\n        for (let i = leftoverIndex, ii = leftoverViews.length; i < ii; ++i) {\n            leftoverViews[i].dispose();\n        }\n        if (this.options.positioning) {\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const currentContext = views[i].context;\n                currentContext.length = ii;\n                currentContext.index = i;\n            }\n        }\n    }\n    refreshAllViews(templateChanged = false) {\n        const items = this.items;\n        const childContext = this.childContext;\n        const template = this.template;\n        const location = this.location;\n        const bindView = this.bindView;\n        let itemsLength = items.length;\n        let views = this.views;\n        let viewsLength = views.length;\n        if (itemsLength === 0 || templateChanged || !this.options.recycle) {\n            // all views need to be removed\n            HTMLView.disposeContiguousBatch(views);\n            viewsLength = 0;\n        }\n        if (viewsLength === 0) {\n            // all views need to be created\n            this.views = views = new Array(itemsLength);\n            for (let i = 0; i < itemsLength; ++i) {\n                const view = template.create();\n                bindView(view, items, i, childContext);\n                views[i] = view;\n                view.insertBefore(location);\n            }\n        }\n        else {\n            // attempt to reuse existing views with new data\n            let i = 0;\n            for (; i < itemsLength; ++i) {\n                if (i < viewsLength) {\n                    const view = views[i];\n                    bindView(view, items, i, childContext);\n                }\n                else {\n                    const view = template.create();\n                    bindView(view, items, i, childContext);\n                    views.push(view);\n                    view.insertBefore(location);\n                }\n            }\n            const removed = views.splice(i, viewsLength - i);\n            for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {\n                removed[i].dispose();\n            }\n        }\n    }\n    unbindAllViews() {\n        const views = this.views;\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            views[i].unbind();\n        }\n    }\n}\n/**\n * A directive that configures list rendering.\n * @public\n */\nexport class RepeatDirective extends HTMLDirective {\n    /**\n     * Creates an instance of RepeatDirective.\n     * @param itemsBinding - The binding that provides the array to render.\n     * @param templateBinding - The template binding used to obtain a template to render for each item in the array.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(itemsBinding, templateBinding, options) {\n        super();\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createBlockPlaceholder;\n        enableArrayObservation();\n        this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);\n        this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     */\n    createBehavior(target) {\n        return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);\n    }\n}\n/**\n * A directive that enables list rendering.\n * @param itemsBinding - The array to render.\n * @param templateOrTemplateBinding - The template or a template binding used obtain a template\n * to render for each item in the array.\n * @param options - Options used to turn on special repeat features.\n * @public\n */\nexport function repeat(itemsBinding, templateOrTemplateBinding, options = defaultRepeatOptions) {\n    const templateBinding = typeof templateOrTemplateBinding === \"function\"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return new RepeatDirective(itemsBinding, templateBinding, Object.assign(Object.assign({}, defaultRepeatOptions), options));\n}\n","import { Observable } from \"../observation/observable.js\";\nimport { emptyArray } from \"../platform.js\";\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\nexport function elements(selector) {\n    if (selector) {\n        return function (value, index, array) {\n            return value.nodeType === 1 && value.matches(selector);\n        };\n    }\n    return function (value, index, array) {\n        return value.nodeType === 1;\n    };\n}\n/**\n * A base class for node observation.\n * @internal\n */\nexport class NodeObservationBehavior {\n    /**\n     * Creates an instance of NodeObservationBehavior.\n     * @param target - The target to assign the nodes property on.\n     * @param options - The options to use in configuring node observation.\n     */\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n        this.source = null;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        const name = this.options.property;\n        this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);\n        this.source = source;\n        this.updateTarget(this.computeNodes());\n        if (this.shouldUpdate) {\n            this.observe();\n        }\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.updateTarget(emptyArray);\n        this.source = null;\n        if (this.shouldUpdate) {\n            this.disconnect();\n        }\n    }\n    /** @internal */\n    handleEvent() {\n        this.updateTarget(this.computeNodes());\n    }\n    computeNodes() {\n        let nodes = this.getNodes();\n        if (this.options.filter !== void 0) {\n            nodes = nodes.filter(this.options.filter);\n        }\n        return nodes;\n    }\n    updateTarget(value) {\n        this.source[this.options.property] = value;\n    }\n}\n","import { AttachedBehaviorHTMLDirective } from \"./html-directive.js\";\nimport { NodeObservationBehavior } from \"./node-observation.js\";\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\nexport class SlottedBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of SlottedBehavior.\n     * @param target - The slot element target to observe.\n     * @param options - The options to use when observing the slot.\n     */\n    constructor(target, options) {\n        super(target, options);\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        this.target.addEventListener(\"slotchange\", this);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.target.removeEventListener(\"slotchange\", this);\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        return this.target.assignedNodes(this.options);\n    }\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\nexport function slotted(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = { property: propertyOrOptions };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-slotted\", SlottedBehavior, propertyOrOptions);\n}\n","import { AttachedBehaviorHTMLDirective } from \"./html-directive.js\";\nimport { NodeObservationBehavior } from \"./node-observation.js\";\n/**\n * The runtime behavior for child node observation.\n * @public\n */\nexport class ChildrenBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of ChildrenBehavior.\n     * @param target - The element target to observe children on.\n     * @param options - The options to use when observing the element children.\n     */\n    constructor(target, options) {\n        super(target, options);\n        this.observer = null;\n        options.childList = true;\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        if (this.observer === null) {\n            this.observer = new MutationObserver(this.handleEvent.bind(this));\n        }\n        this.observer.observe(this.target, this.options);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        if (\"subtree\" in this.options) {\n            return Array.from(this.target.querySelectorAll(this.options.selector));\n        }\n        return Array.from(this.target.childNodes);\n    }\n}\n/**\n * A directive that observes the `childNodes` of an element and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure child node observation.\n * @public\n */\nexport function children(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = {\n            property: propertyOrOptions,\n        };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-children\", ChildrenBehavior, propertyOrOptions);\n}\n"],"names":["$global","globalThis","g","self","window","Function","_a","trustedTypes","createPolicy","n","r","propConfig","configurable","enumerable","writable","FAST","Reflect","defineProperty","Object","assign","value","create","getById","storage","id","initialize","found","emptyArray","freeze","createMetadataLocator","metadataLookup","WeakMap","target","metadata","get","currentTarget","getPrototypeOf","slice","set","updateQueue","tasks","pendingErrors","throwFirstError","length","shift","tryRunTask","task","call","error","push","setTimeout","process","capacity","index","scan","newLength","enqueue","callable","requestAnimationFrame","fastHTMLPolicy","createHTML","html","htmlPolicy","marker","Math","random","toString","substring","_interpolationStart","_interpolationEnd","DOM","supportsAdoptedStyleSheets","Array","isArray","document","adoptedStyleSheets","CSSStyleSheet","prototype","setHTMLPolicy","policy","Error","isMarker","node","nodeType","data","startsWith","extractDirectiveIndexFromMarker","parseInt","replace","createInterpolationPlaceholder","createCustomAttributePlaceholder","attributeName","this","createBlockPlaceholder","queueUpdate","processUpdates","nextUpdate","Promise","setAttribute","element","undefined","removeAttribute","setBooleanAttribute","removeChildNodes","parent","child","firstChild","removeChild","createTemplateWalker","fragment","createTreeWalker","SubscriberSet","constructor","source","initialSubscriber","sub1","sub2","spillover","has","subscriber","indexOf","subscribe","unsubscribe","splice","notify","args","handleChange","i","ii","PropertyChangeNotifier","subscribers","sourceSubscribers","propertyName","propertyToWatch","propertyToUnwatch","Observable","volatileRegex","notifierLookup","watcher","createArrayObserver","array","getNotifier","$fastController","getAccessors","DefaultObservableAccessor","name","field","callback","getValue","watch","setValue","newValue","oldValue","BindingObserverImplementation","binding","isVolatileBinding","super","needsRefresh","needsQueue","first","last","propertySource","notifier","next","observe","context","disconnect","previousWatcher","result","current","prev","prevValue","records","done","Symbol","iterator","setArrayObserverFactory","factory","track","trackVolatile","nameOrAccessor","test","observable","descriptor","apply","contextEvent","event","ExecutionContext","parentContext","isEven","isOdd","isFirst","isInMiddle","isLast","setEvent","defaultExecutionContext","seal","HTMLDirective","targetIndex","TargetedHTMLDirective","arguments","createPlaceholder","AttachedBehaviorHTMLDirective","behavior","options","createBehavior","normalBind","bindingObserver","isBindingVolatile","updateTarget","triggerBind","addEventListener","targetName","normalUnbind","contentUnbind","view","$fastView","isComposed","unbind","needsBindOnly","triggerUnbind","removeEventListener","updateAttributeTarget","updateBooleanAttributeTarget","updateContentTarget","textContent","$fastTemplate","remove","bind","insertBefore","updatePropertyTarget","updateClassTarget","classVersions","version","names","split","currentName","classList","add","HTMLBindingDirective","originalTargetName","cleanedTargetName","substr","s","c","targetAtContent","BindingBehavior","handleEvent","preventDefault","sharedContext","CompilationContext","addFactory","behaviorFactories","captureContentBinding","directive","reset","release","borrow","directives","shareable","createAggregateBinding","parts","partCount","finalParts","map","x","scope","output","interpolationEndLength","parseContent","valueParts","bindingParts","literal","directiveIndex","compileAttributes","includeBasicValues","attributes","attr","attrValue","parseResult","removeAttributeNode","compileContent","walker","lastNode","currentPart","currentNode","parentNode","createTextNode","nextSibling","nextNode","compileTemplate","template","content","adoptNode","hostBehaviorFactories","targetOffset","childNodes","createComment","viewBehaviorFactories","range","createRange","HTMLView","behaviors","lastChild","appendTo","appendChild","hasChildNodes","end","previousSibling","dispose","oldSource","disposeContiguousBatch","views","setStartBefore","setEndAfter","deleteContents","j","jj","ViewTemplate","behaviorCount","hasHostBehaviors","hostBindingTarget","createElement","innerHTML","fec","firstElementChild","tagName","cloneNode","viewFactories","behaviorIndex","factoryIndex","hostFactories","render","host","getElementById","lastAttributeNameRegex","strings","values","currentString","match","exec","ElementStyles","targets","WeakSet","addStylesTo","removeStylesFrom","delete","isAttachedTo","withBehaviors","concat","styleSheetCache","Map","styles","AdoptedStyleSheetsStyles","StyleElementStyles","reduceStyles","reduce","curr","reduceBehaviors","addAdoptedStyleSheets","sheets","removeAdoptedStyleSheets","filter","sheet","e","_styleSheets","styleSheets","replaceSync","styleClassId","getNextStyleClass","styleClass","normalizeTarget","className","append","querySelectorAll","body","AttributeConfiguration","locate","booleanConverter","toView","fromView","nullableNumberConverter","number","isNaN","AttributeDefinition","Owner","attribute","toLowerCase","mode","converter","guards","Set","fieldName","callbackName","hasCallback","tryReflectToAttribute","onAttributeChangedCallback","latestValue","collect","attributeLists","list","config","property","configOrTarget","prop","decorator","$target","$prop","defaultShadowOptions","defaultElementOptions","fastRegistry","typeToDefinition","register","definition","type","getByType","key","FASTElementDefinition","nameOrConfig","observedAttributes","propertyLookup","attributeLookup","shadowOptions","elementOptions","isDefined","define","registry","customElements","proto","forType","shadowRoots","defaultEventOptions","bubbles","composed","cancelable","getShadowRoot","shadowRoot","Controller","boundObservables","needsInitialization","_template","_styles","_isConnected","attachShadow","accessors","isConnected","setIsConnected","renderTemplate","removeStyles","addStyles","getRootNode","HTMLStyleElement","sourceBehaviors","addBehaviors","removeBehaviors","targetBehaviors","behaviorsToBind","force","behaviorsToUnbind","count","onConnectedCallback","finishInitialization","onDisconnectedCallback","attrDef","emit","detail","dispatchEvent","CustomEvent","propertyNames","keys","resolveTemplate","resolveStyles","forCustomElement","controller","createFASTElement","BaseType","$emit","connectedCallback","disconnectedCallback","attributeChangedCallback","FASTElement","HTMLElement","from","nameOrDef","customElement","CSSDirective","createCSS","collectStyles","cssString","trim","css","elementStyles","CSSPartial","stylesheets","accumulated","el","cssPartial","newSplice","removed","addedCount","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","calcEditDistances","currentStart","currentEnd","old","oldStart","oldEnd","rowCount","columnCount","distances","north","west","spliceOperationsFromEditDistances","edits","northWest","min","reverse","sharedPrefix","searchLength","sharedSuffix","index1","index2","intersect","start1","end1","start2","end2","calcSplices","prefixCount","suffixCount","minLength","ops","splices","oldIndex","$push","mergeSplice","inserted","insertionOffset","intersectCount","deleteCount","currentRemoved","prepend","offset","createInitialSplices","changeRecords","record","projectArraySplices","initialSplices","arrayObservationEnabled","adjustIndex","changeRecord","arrayLength","ArrayObserver","oldCollection","flush","addSplice","finalSplices","enableArrayObservation","collection","$fastPatch","pop","sort","unshift","notEmpty","methodCallResult","o","oldArray","RefBehavior","ref","isFunction","object","noTemplate","normalizeBinding","when","templateOrTemplateBinding","elseTemplateOrTemplateBinding","dataBinding","templateBinding","elseBinding","defaultRepeatOptions","positioning","recycle","bindWithoutPositioning","items","bindWithPositioning","childContext","RepeatBehavior","location","itemsBinding","isItemsBindingVolatile","isTemplateBindingVolatile","itemsObserver","originalContext","bindView","itemsBindingObserver","templateBindingObserver","observeItems","refreshAllViews","unbindAllViews","updateViews","oldObserver","newObserver","hasNewObserver","leftoverViews","leftoverIndex","availableViews","removeIndex","addIndex","removedViews","totalAvailableViews","neighbor","currentContext","templateChanged","itemsLength","viewsLength","RepeatDirective","repeat","selector","matches","NodeObservationBehavior","shouldUpdate","some","computeNodes","nodes","getNodes","SlottedBehavior","assignedNodes","slotted","propertyOrOptions","ChildrenBehavior","observer","childList","MutationObserver","children"],"sourceRoot":""}