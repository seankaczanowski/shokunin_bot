{"version":3,"file":"7756.62b8143ffeda16b6f3af.js?v=62b8143ffeda16b6f3af","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js"],"sourcesContent":["// Tokenizer\nvar textwords = {};\n\nvar keywords = {\n  \"allTags\": true, \"closeAll\": true, \"list\": true,\n  \"newJournal\": true, \"newTiddler\": true,\n  \"permaview\": true, \"saveChanges\": true,\n  \"search\": true, \"slider\": true, \"tabs\": true,\n  \"tag\": true, \"tagging\": true, \"tags\": true,\n  \"tiddler\": true, \"timeline\": true,\n  \"today\": true, \"version\": true, \"option\": true,\n  \"with\": true, \"filter\": true\n};\n\nvar isSpaceName = /[\\w_\\-]/i,\n    reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\n    reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\n    reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\n    reBlockQuote = /^<<<$/,\n\n    reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\n    reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\n    reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\n    reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\n\n    reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\n    reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\n\n    reUntilCodeStop = /.*?\\}\\}\\}/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  var sol = stream.sol(), ch = stream.peek();\n\n  state.block = false;        // indicates the start of a code block.\n\n  // check start of  blocks\n  if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n    if (stream.match(reCodeBlockStart)) {\n      state.block = true;\n      return chain(stream, state, twTokenCode);\n    }\n    if (stream.match(reBlockQuote))\n      return 'quote';\n    if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))\n      return 'comment';\n    if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))\n      return 'comment';\n    if (stream.match(reHR))\n      return 'contentSeparator';\n  }\n\n  stream.next();\n  if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n    if (ch == \"!\") { // tw header\n      stream.skipToEnd();\n      return \"header\";\n    }\n    if (ch == \"*\") { // tw list\n      stream.eatWhile('*');\n      return \"comment\";\n    }\n    if (ch == \"#\") { // tw numbered list\n      stream.eatWhile('#');\n      return \"comment\";\n    }\n    if (ch == \";\") { // definition list, term\n      stream.eatWhile(';');\n      return \"comment\";\n    }\n    if (ch == \":\") { // definition list, description\n      stream.eatWhile(':');\n      return \"comment\";\n    }\n    if (ch == \">\") { // single line quote\n      stream.eatWhile(\">\");\n      return \"quote\";\n    }\n    if (ch == '|')\n      return 'header';\n  }\n\n  if (ch == '{' && stream.match('{{'))\n    return chain(stream, state, twTokenCode);\n\n  // rudimentary html:// file:// link matching. TW knows much more ...\n  if (/[hf]/i.test(ch) &&\n      /[ti]/i.test(stream.peek()) &&\n      stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i))\n    return \"link\";\n\n  // just a little string indicator, don't want to have the whole string covered\n  if (ch == '\"')\n    return 'string';\n\n  if (ch == '~')    // _no_ CamelCase indicator should be bold\n    return 'brace';\n\n  if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n    return 'brace';\n\n  if (ch == \"@\") {    // check for space link. TODO fix @@...@@ highlighting\n    stream.eatWhile(isSpaceName);\n    return \"link\";\n  }\n\n  if (/\\d/.test(ch)) {        // numbers\n    stream.eatWhile(/\\d/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") { // tw invisible comment\n    if (stream.eat(\"%\")) {\n      return chain(stream, state, twTokenComment);\n    } else if (stream.eat(\"/\")) { //\n      return chain(stream, state, twTokenEm);\n    }\n  }\n\n  if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n    return chain(stream, state, twTokenUnderline);\n\n  // strikethrough and mdash handling\n  if (ch == \"-\" && stream.eat(\"-\")) {\n    // if strikethrough looks ugly, change CSS.\n    if (stream.peek() != ' ')\n      return chain(stream, state, twTokenStrike);\n    // mdash\n    if (stream.peek() == ' ')\n      return 'brace';\n  }\n\n  if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n    return chain(stream, state, twTokenStrong);\n\n  if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n    return chain(stream, state, twTokenMacro);\n\n  // core macro handling\n  stream.eatWhile(/[\\w\\$_]/);\n  return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n}\n\n// tw invisible comment\nfunction twTokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"%\");\n  }\n  return \"comment\";\n}\n\n// tw strong / bold\nfunction twTokenStrong(stream, state) {\n  var maybeEnd = false,\n      ch;\n  while (ch = stream.next()) {\n    if (ch == \"'\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"'\");\n  }\n  return \"strong\";\n}\n\n// tw code\nfunction twTokenCode(stream, state) {\n  var sb = state.block;\n\n  if (sb && stream.current()) {\n    return \"comment\";\n  }\n\n  if (!sb && stream.match(reUntilCodeStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n\n  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n\n  stream.next();\n  return \"comment\";\n}\n\n// tw em / italic\nfunction twTokenEm(stream, state) {\n  var maybeEnd = false,\n      ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"/\");\n  }\n  return \"emphasis\";\n}\n\n// tw underlined text\nfunction twTokenUnderline(stream, state) {\n  var maybeEnd = false,\n      ch;\n  while (ch = stream.next()) {\n    if (ch == \"_\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"_\");\n  }\n  return \"link\";\n}\n\n// tw strike through text looks ugly\n// change CSS if needed\nfunction twTokenStrike(stream, state) {\n  var maybeEnd = false, ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"-\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"-\");\n  }\n  return \"deleted\";\n}\n\n// macro\nfunction twTokenMacro(stream, state) {\n  if (stream.current() == '<<') {\n    return 'meta';\n  }\n\n  var ch = stream.next();\n  if (!ch) {\n    state.tokenize = tokenBase;\n    return null;\n  }\n  if (ch == \">\") {\n    if (stream.peek() == '>') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return \"meta\";\n    }\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n}\n\n// Interface\nexport const tiddlyWiki = {\n  name: \"tiddlywiki\",\n\n  startState: function () {\n    return {tokenize: tokenBase};\n  },\n\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  }\n};\n\n"],"names":["textwords","keywords","isSpaceName","reHR","reWikiCommentStart","reWikiCommentStop","reBlockQuote","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reCodeBlockStart","reCodeBlockStop","reUntilCodeStop","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","twTokenCode","next","skipToEnd","eatWhile","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","tiddlyWiki","name","startState","token","eatSpace","style"],"sourceRoot":""}