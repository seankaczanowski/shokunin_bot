{"version":3,"file":"7260.70dcf123375257e2297b.js?v=70dcf123375257e2297b","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/octave.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nvar builtins = wordRegexp([\n  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n]);\n\nvar keywords = wordRegexp([\n  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n  'continue', 'pkg'\n]);\n\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  };\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')){\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)){\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number'; };\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n  }\n  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n  if (m) { return m[1] ? 'string' : \"error\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return 'keyword'; } ;\n  if (stream.match(builtins)) { return 'builtin'; } ;\n  if (stream.match(identifiers)) { return 'variable'; } ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  };\n\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n};\n\n\nexport const octave = {\n  name: \"octave\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable'){\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","sol","peek","next","tokenize","tokenBase","tokenComment","match","skipToEnd","eatSpace","m","octave","name","startState","token","style","languageData","commentTokens","line"],"sourceRoot":""}