{"version":3,"file":"731.9cfdf759c144473a7d26.js?v=9cfdf759c144473a7d26","mappings":"2KAAA,IAAIA,EAAO,CAAC,OAAQ,QAAS,KAAM,MAAO,MAAO,MACjD,IAAIC,EAAe,IAAIC,OAAO,QAAQF,EAAKG,KAAK,OAAO,MAAO,KAEvD,MAAMC,EAAO,CAClBC,KAAM,OACNC,MAAO,SAASC,EAAQC,GACtB,IAAIC,EAAKF,EAAOG,OAChB,IAAIC,EAAMH,EAAMI,QAChBJ,EAAMI,QAAU,MAEhB,GAAIH,GAAM,MAAQF,EAAOM,KAAO,GAAK,KAAKC,KAAKP,EAAOQ,OAAOC,OAAOT,EAAOM,IAAM,KAAM,CACrFN,EAAOU,YACP,MAAO,SACT,CAEA,GAAIV,EAAOW,MAAM,oCACf,MAAO,SAET,GAAIV,EAAMW,SAAWZ,EAAOa,cAAgBZ,EAAMa,OAAQ,CACxDd,EAAOU,YAAa,MAAO,QAC7B,MAAO,GAAIT,EAAMW,QAAS,CAAEX,EAAMW,QAAU,KAAO,CACnD,GAAIZ,EAAOe,MAAO,CAChBd,EAAMa,OAAS,EACfb,EAAMe,KAAO,MACbf,EAAMgB,UAAY,MAElB,GAAGjB,EAAOW,MAAM,OAAQ,CAAE,MAAO,KAAO,CAExC,GAAIX,EAAOW,MAAM,OAAQ,CAAE,MAAO,KAAO,CAEzC,GAAIX,EAAOW,MAAM,YAAa,CAAE,MAAO,MAAQ,CACjD,CAEA,GAAIX,EAAOW,MAAM,kBAAmB,CAClC,GAAIT,GAAM,IACRD,EAAMiB,mBACH,GAAIhB,GAAM,IACbD,EAAMiB,mBACH,GAAIhB,GAAM,IACbD,EAAMkB,kBAENlB,EAAMkB,aACR,MAAO,MACT,CAGA,GAAIlB,EAAMkB,WAAa,IAAMf,GAAOF,GAAM,IAAK,CAC7CF,EAAOoB,OACP,MAAO,MACT,CAEA,GAAInB,EAAMiB,YAAc,IAAMd,GAAOF,GAAM,IAAK,CAC9CD,EAAMa,OAAS,EACfb,EAAMe,KAAO,MACbf,EAAMgB,UAAY,MAClBjB,EAAOoB,OACP,MAAO,MACT,CAGA,GAAInB,EAAMgB,UAAW,CAEnB,GAAIjB,EAAOW,MAAM,kBAAmB,CAAEV,EAAMW,QAAU,KAAM,MAAO,MAAQ,CAE3E,GAAIZ,EAAOW,MAAM,+BAAgC,CAAE,MAAO,UAAY,CAEtE,GAAIV,EAAMiB,aAAe,GAAKlB,EAAOW,MAAM,wBAAyB,CAAE,MAAO,QAAU,CACvF,GAAIV,EAAMiB,YAAc,GAAKlB,EAAOW,MAAM,gCAAiC,CAAE,MAAO,QAAU,CAE9F,GAAIX,EAAOW,MAAMjB,GAAe,CAAE,MAAO,SAAW,CACtD,CAGA,IAAKO,EAAMe,MAAQhB,EAAOW,MAAM,iFAAkF,CAChHV,EAAMe,KAAO,KACbf,EAAMa,OAASd,EAAOa,cACtB,MAAO,MACT,CACA,GAAIZ,EAAMe,MAAQhB,EAAOW,MAAM,SAAU,CAAEV,EAAMgB,UAAY,KAAM,MAAO,MAAQ,CAGlFhB,EAAMgB,UAAY,MAClBhB,EAAMI,QAAWH,GAAM,KACvBF,EAAOoB,OACP,OAAO,IACT,EACAC,WAAY,WACV,MAAO,CACLL,KAAM,MACNC,UAAW,MACXH,OAAQ,EACRI,YAAa,EACbC,WAAY,EACZP,QAAS,MACTP,QAAS,MAEb,EACAiB,aAAc,CACZC,cAAe,CAACC,KAAM,M","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/yaml.js"],"sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  name: \"yaml\",\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["cons","keywordRegex","RegExp","join","yaml","name","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"sourceRoot":""}