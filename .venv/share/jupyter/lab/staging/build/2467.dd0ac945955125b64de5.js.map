{"version":3,"file":"2467.dd0ac945955125b64de5.js?v=dd0ac945955125b64de5","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/velocity.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                          \"#{end} #{else} #{break} #{stop}\");\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                           \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  // start of unparsed string?\n  if ((ch == \"'\") && !state.inString && state.inParams) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenString(ch));\n  }\n  // start of parsed string?\n  else if ((ch == '\"')) {\n    state.lastTokenWasBuiltin = false;\n    if (state.inString) {\n      state.inString = false;\n      return \"string\";\n    }\n    else if (state.inParams)\n      return chain(stream, state, tokenString(ch));\n  }\n  // is it one of the special signs []{}().,;? Separator?\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams)\n      state.inParams = true;\n    else if (ch == \")\") {\n      state.inParams = false;\n      state.lastTokenWasBuiltin = true;\n    }\n    return null;\n  }\n  // start of a number value?\n  else if (/\\d/.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment?\n  else if (ch == \"#\" && stream.eat(\"*\")) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenComment);\n  }\n  // unparsed content?\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenUnparsed);\n  }\n  // single line comment?\n  else if (ch == \"#\" && stream.eat(\"#\")) {\n    state.lastTokenWasBuiltin = false;\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // variable?\n  else if (ch == \"$\") {\n    stream.eat(\"!\");\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n    // is it one of the specials?\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\n      return \"keyword\";\n    }\n    else {\n      state.lastTokenWasBuiltin = true;\n      state.beforeParams = true;\n      return \"builtin\";\n    }\n  }\n  // is it a operator?\n  else if (isOperatorChar.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the whole word\n    stream.eatWhile(/[\\w\\$_{}@]/);\n    var word = stream.current();\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    // is it one of the listed functions?\n    if (functions && functions.propertyIsEnumerable(word) ||\n        (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n        !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n      state.beforeParams = true;\n      state.lastTokenWasBuiltin = false;\n      return \"keyword\";\n    }\n    if (state.inString) {\n      state.lastTokenWasBuiltin = false;\n      return \"string\";\n    }\n    if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n      return \"builtin\";\n    // default: just a \"word\"\n    state.lastTokenWasBuiltin = false;\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if ((next == quote) && !escaped) {\n        end = true;\n        break;\n      }\n      if (quote=='\"' && stream.peek() == '$' && !escaped) {\n        state.inString = true;\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\n// Interface\n\nexport const velocity = {\n  name: \"velocity\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false,\n      inString: false,\n      lastTokenWasBuiltin: false\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"##\", block: {open: \"#*\", close: \"*#\"}}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","velocity","name","startState","token","eatSpace","languageData","commentTokens","line","block","open","close"],"sourceRoot":""}