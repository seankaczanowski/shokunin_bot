{"version":3,"file":"5929.e933e6898bde343d7148.js?v=e933e6898bde343d7148","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/asn1.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst defaults = {\n  keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n                  \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n                  \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n                  \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n                  \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n                  \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n                  \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n                  \" IMPLIED EXPORTS\"),\n  cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n  compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n                      \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n                      \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n                      \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n                      \" TEXTUAL-CONVENTION\"),\n  status: words(\"current deprecated mandatory obsolete\"),\n  tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n              \" UNIVERSAL\"),\n  storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n                 \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n                 \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n                 \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n                 \" TruthValue RowStatus DisplayString GeneralString\" +\n                 \" GraphicString IA5String NumericString\" +\n                 \" PrintableString SnmpAdminString TeletexString\" +\n                 \" UTF8String VideotexString VisibleString StringStore\" +\n                 \" ISO646String T61String UniversalString Unsigned32\" +\n                 \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n  modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n                  \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n                  \" DEFINED\"),\n  accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n                     \" read-create read-write\"),\n  multiLineStrings: true\n}\n\nexport function asn1(parserConfig) {\n  var keywords = parserConfig.keywords || defaults.keywords,\n      cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,\n      compareTypes = parserConfig.compareTypes || defaults.compareTypes,\n      status = parserConfig.status || defaults.status,\n      tags = parserConfig.tags || defaults.tags,\n      storage = parserConfig.storage || defaults.storage,\n      modifier = parserConfig.modifier || defaults.modifier,\n      accessTypes = parserConfig.accessTypes|| defaults.accessTypes,\n      multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[\\|\\^]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n      curPunc = ch;\n      return \"punctuation\";\n    }\n    if (ch == \"-\"){\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n\n    stream.eatWhile(/[\\w\\-]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (cmipVerbs.propertyIsEnumerable(cur)) return \"variableName\";\n    if (compareTypes.propertyIsEnumerable(cur)) return \"atom\";\n    if (status.propertyIsEnumerable(cur)) return \"comment\";\n    if (tags.propertyIsEnumerable(cur)) return \"typeName\";\n    if (storage.propertyIsEnumerable(cur)) return \"modifier\";\n    if (modifier.propertyIsEnumerable(cur)) return \"modifier\";\n    if (accessTypes.propertyIsEnumerable(cur)) return \"modifier\";\n\n    return \"variableName\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped){\n          var afterNext = stream.peek();\n          //look if the character if the quote is like the B in '10100010'B\n          if (afterNext){\n            afterNext = afterNext.toLowerCase();\n            if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n              stream.next();\n          }\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  //Interface\n  return {\n    name: \"asn1\",\n    startState: function() {\n      return {\n        tokenize: null,\n        context: new Context(-2, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n          && ctx.type == \"statement\"){\n        popContext(state);\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                     && curPunc != ';') || (ctx.type == \"statement\"\n                                                            && curPunc == \"newstatement\")))\n        pushContext(state, stream.column(), \"statement\");\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*[{}]$/,\n      commentTokens: {line: \"--\"}\n    }\n  };\n};\n"],"names":["words","str","obj","split","i","length","defaults","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","asn1","parserConfig","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","name","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"sourceRoot":""}