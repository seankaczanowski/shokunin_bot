{"version":3,"file":"5224.cb6fceb9cbf1ac251189.js?v=cb6fceb9cbf1ac251189","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/sieve.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch == \")\")  {\n    state._indent.pop();\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n\n  if (ch == \",\")\n    return null;\n\n  if (ch == \";\")\n    return null;\n\n\n  if (/[{}\\(\\),;]/.test(ch))\n    return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if ((cur == \"text\") && stream.eat(\":\"))\n  {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur))\n    return \"keyword\";\n\n  if (atoms.propertyIsEnumerable(cur))\n    return \"atom\";\n\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state)\n{\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if ((stream.next() == \".\")  && (stream.eol()))\n  {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  name: \"sieve\",\n  startState: function(base) {\n    return {tokenize: tokenBase,\n            baseIndent: base || 0,\n            _indent: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n\n  indent: function(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && (_textAfter[0] == \"}\"))\n      length--;\n\n    if (length <0)\n      length = 0;\n\n    return length * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n"],"names":["words","str","obj","split","i","length","keywords","atoms","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eatSpace","peek","eol","maybeEnd","quote","escaped","sieve","name","startState","base","baseIndent","token","indent","_textAfter","cx","unit","languageData","indentOnInput"],"sourceRoot":""}