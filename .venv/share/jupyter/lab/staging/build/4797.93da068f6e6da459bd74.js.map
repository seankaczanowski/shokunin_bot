{"version":3,"file":"4797.93da068f6e6da459bd74.js?v=93da068f6e6da459bd74","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],"sourcesContent":["var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();\n    else if (!symbol.test(ch)) { stream.backUp(1); break; }\n  }\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {type = \"ws\"; return null;}\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);\n  else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n  else if (ch == \")\") { type = \"close\"; return \"bracket\"; }\n  else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n  else if (/['`,@]/.test(ch)) return null;\n  else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) { stream.next(); return \"variableName\"; }\n    else { stream.skipToEnd(); return \"error\"; }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (/[+\\-=\\.']/.test(ch)) return null;\n    else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n    else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n    else if (ch == \":\") { readSym(stream); return \"meta\"; }\n    else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string.special\" }\n    else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) { state.tokenize = base; break; }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport const commonLisp = {\n  name: \"commonlisp\",\n  startState: function () {\n    return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current()))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else\n          state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n\n  languageData: {\n    commentTokens: {line: \";;\", block: {open: \"#|\", close: \"|#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']}\n  }\n};\n\n"],"names":["specialForm","assumeBody","numLiteral","symbol","type","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","commonLisp","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","i","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"sourceRoot":""}