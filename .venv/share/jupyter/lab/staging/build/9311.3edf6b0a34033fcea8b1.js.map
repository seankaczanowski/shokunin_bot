{"version":3,"file":"9311.3edf6b0a34033fcea8b1.js?v=3edf6b0a34033fcea8b1","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@lezer/markdown/dist/index.js","webpack://@jupyterlab/application-top/./node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n    Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            for (let markI = 0;;) {\n                let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n                while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n                    let mark = line.markers[markI++];\n                    this.addNode(mark.type, mark.from, mark.to);\n                }\n                if (!next)\n                    break;\n                this.finishContext();\n            }\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url) {\n            return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [\n                elt(Type.LinkMark, start, start + 1),\n                // url[0] includes the closing bracket, so exclude it from this slice\n                elt(Type.URL, start + 1, start + url[0].length),\n                elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)\n            ]));\n        }\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            // The destination and title must be separated by whitespace\n            if (pos != dest.to) {\n                title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n                if (title)\n                    pos = cx.skipSpace(title.to);\n            }\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /// Returns true when there is an unmatched link or image opening\n    /// token before the current position.\n    get hasOpenLink() {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))\n                return true;\n        }\n        return false;\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    \"URL Autolink\": tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && cx.hasOpenLink) {\n                        let noBracket = /([^\\[\\]]|\\[[^\\]]*\\])*/.exec(cx.text.slice(pos, end));\n                        end = pos + noBracket[0].length;\n                    }\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null || isList(type) ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction isList(type) {\n    return type.name == \"OrderedList\" || type.name == \"BulletList\";\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [], context = [];\n    for (let cur = node; cur; cur = cur.parent) {\n        if (cur.name == \"FencedCode\")\n            return context;\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\")\n            nodes.push(cur);\n    }\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from, 0))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            let first = inner.node.firstChild, second = inner.node.getChild(\"ListItem\", \"ListItem\");\n            // Not second item or blank line before: delete a level of markup\n            if (first.to >= pos || second && second.to < pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move second item down, making tight two-item list non-tight\n                let insert = blankLine(context, state, line);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        if (nonTightList(inner.node, state.doc))\n            insert = blankLine(context, state, line) + state.lineBreak + insert;\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction nonTightList(node, doc) {\n    if (node.name != \"OrderedList\" && node.name != \"BulletList\")\n        return false;\n    let first = node.firstChild, second = node.getChild(\"ListItem\", \"ListItem\");\n    if (!second)\n        return false;\n    let line1 = doc.lineAt(first.to), line2 = doc.lineAt(second.from);\n    let empty = /^[\\s>]*$/.test(line1.text);\n    return line1.number + (empty ? 0 : 1) < line2.number;\n}\nfunction blankLine(context, state, line) {\n    let insert = \"\";\n    for (let i = 0, e = context.length - 2; i <= e; i++) {\n        insert += context[i].blank(i < e\n            ? countColumn(line.text, 4, Math.min(line.text.length, context[i + 1].from)) - insert.length\n            : null, i < e);\n    }\n    return normalizeIndent(insert, state);\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true, htmlTagLanguage = htmlNoMatch } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlTagLanguage.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlTagLanguage.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["CompositeBlock","create","type","value","from","parentHash","end","hash","constructor","children","positions","this","hashProp","NodeProp","contextHash","addChild","child","pos","prop","Tree","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","NodeType","none","Type","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","parseURL","skip","title","parseLinkTitle","titleEnd","lineEnd","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","markI","mark","finishContext","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","Parser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","Tag","NodeSet","extend","styleTags","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","Autolink","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","hasOpenLink","emp","closeSize","k","element","keep","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","tags","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","parseCode","codeParser","htmlParser","parseMixed","info","infoNode","getChild","overlay","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","firstCount","Table","heading","TaskParser","TaskList","atom","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkURLEnd","lastIndex","index","autolinkEmailEnd","absPos","noBracket","GFM","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","defineLanguageFacet","commentTokens","headingProp","commonmark","foldNodeProp","add","isHeading","isList","state","doc","lineAt","indentNodeProp","languageDataProp","findSectionEnd","headerNode","level","headerIndent","foldService","of","syntaxTree","resolveInner","mkLang","Language","commonmarkLanguage","extended","markdownLanguage","getCodeParser","languages","defaultLanguage","LanguageDescription","matchLanguageName","support","language","ParseContext","getSkippingParser","load","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","normalizeIndent","facet","indentUnit","col","countColumn","insertNewlineContinueMarkup","dispatch","dont","changeByRange","range","empty","isActiveAt","emptyLine","second","delTo","EditorSelection","blankLine","lineBreak","prevLine","quoted","continued","charAt","nonTightList","update","scrollIntoView","userEvent","isMark","line1","line2","contextNodeForDelete","scan","childBefore","lastChild","deleteMarkupBackward","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","completeHTMLTags","htmlTagLanguage","extensions","defaultCode","LanguageSupport","Prec","high","keymap","lang","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","htmlCompletionSource","EditorState"],"sourceRoot":""}