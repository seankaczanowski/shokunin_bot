{"version":3,"file":"3112.58c6807e0b3ca4f26f15.js?v=58c6807e0b3ca4f26f15","mappings":"2KAAA,SAASA,EAAcC,EAAQC,GAC7BD,EAAOE,YACPD,EAAME,IAAMC,EACZ,MAAO,OACT,CAEA,SAASC,EAAML,EAAQC,GACrB,GAAID,EAAOM,MAAM,iBAAkB,CACjCL,EAAME,IAAMI,EACZ,MAAO,SACT,MAAO,GAAIP,EAAOM,MAAM,YAAc,QAAQE,KAAKR,EAAOS,QAAS,CACjER,EAAME,IAAMO,EACZ,MAAO,SACT,KAAO,CACL,OAAOX,EAAcC,EAAQC,EAC/B,CACF,CAEA,SAASM,EAAmBP,EAAQC,GAClC,IAAIU,EAAOX,EAAOM,MAAM,QACxB,IAAKK,EAAM,OAAOZ,EAAcC,EAAQC,GAExCA,EAAME,IAAMS,EACZ,IAAIC,EAASC,OAAOH,EAAK,IACzB,GAAIE,GAAU,KAAOA,EAAS,IAAK,CACjC,MAAO,MACT,KAAO,CACL,MAAO,OACT,CACF,CAEA,SAASD,EAAmBZ,EAAQC,GAClCD,EAAOE,YACPD,EAAME,IAAMC,EACZ,OAAO,IACT,CAEA,SAASM,EAAYV,EAAQC,GAC3BD,EAAOe,SAAS,MAChBd,EAAME,IAAMa,EACZ,MAAO,gBACT,CAEA,SAASA,EAAgBhB,EAAQC,GAC/B,GAAID,EAAOM,MAAM,kBAAmB,CAClCL,EAAME,IAAMC,EACZ,MAAO,SACT,KAAO,CACL,OAAOL,EAAcC,EAAQC,EAC/B,CACF,CAEA,SAASG,EAAOJ,GACd,GAAIA,EAAOiB,QAAUjB,EAAOkB,IAAI,SAAU,CACxC,GAAIlB,EAAOM,MAAM,SAAU,CACzB,MAAO,MACT,KAAO,CACLN,EAAOE,YACP,MAAO,OACT,CACF,KAAO,CACLF,EAAOE,YACP,MAAO,QACT,CACF,CAEA,SAASiB,EAAKnB,GACZA,EAAOE,YACP,OAAO,IACT,CAEO,MAAMkB,EAAO,CAClBC,KAAM,OACNC,MAAO,SAAStB,EAAQC,GACtB,IAAIE,EAAMF,EAAME,IAChB,GAAIA,GAAOC,GAAUD,GAAOgB,GAAQnB,EAAOuB,WAAY,OAAO,KAC9D,OAAOpB,EAAIH,EAAQC,EACrB,EAEAuB,UAAW,SAASvB,GAClBA,EAAME,IAAMgB,CACd,EAEAM,WAAY,WACV,MAAO,CAACtB,IAAKE,EACf,E","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/http.js"],"sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  name: \"http\",\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],"names":["failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","http","name","token","eatSpace","blankLine","startState"],"sourceRoot":""}