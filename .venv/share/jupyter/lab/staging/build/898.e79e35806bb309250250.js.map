{"version":3,"file":"898.e79e35806bb309250250.js?v=e79e35806bb309250250","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BMEZGHF.mjs","webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/chunks/mermaid.core/diagram-SSKATNLV.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-YTJNT7DU.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  populateCommonDb\n} from \"./chunk-4BMEZGHF.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-O4NI6UNU.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-7B677QYD.mjs\";\nimport {\n  __name,\n  clear,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  getThemeVariables,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-YTJNT7DU.mjs\";\n\n// src/diagrams/radar/db.ts\nvar defaultOptions = {\n  showLegend: true,\n  ticks: 5,\n  max: null,\n  min: 0,\n  graticule: \"circle\"\n};\nvar defaultRadarData = {\n  axes: [],\n  curves: [],\n  options: defaultOptions\n};\nvar data = structuredClone(defaultRadarData);\nvar DEFAULT_RADAR_CONFIG = defaultConfig_default.radar;\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_RADAR_CONFIG,\n    ...getConfig().radar\n  });\n  return config;\n}, \"getConfig\");\nvar getAxes = /* @__PURE__ */ __name(() => data.axes, \"getAxes\");\nvar getCurves = /* @__PURE__ */ __name(() => data.curves, \"getCurves\");\nvar getOptions = /* @__PURE__ */ __name(() => data.options, \"getOptions\");\nvar setAxes = /* @__PURE__ */ __name((axes) => {\n  data.axes = axes.map((axis) => {\n    return {\n      name: axis.name,\n      label: axis.label ?? axis.name\n    };\n  });\n}, \"setAxes\");\nvar setCurves = /* @__PURE__ */ __name((curves) => {\n  data.curves = curves.map((curve) => {\n    return {\n      name: curve.name,\n      label: curve.label ?? curve.name,\n      entries: computeCurveEntries(curve.entries)\n    };\n  });\n}, \"setCurves\");\nvar computeCurveEntries = /* @__PURE__ */ __name((entries) => {\n  if (entries[0].axis == void 0) {\n    return entries.map((entry) => entry.value);\n  }\n  const axes = getAxes();\n  if (axes.length === 0) {\n    throw new Error(\"Axes must be populated before curves for reference entries\");\n  }\n  return axes.map((axis) => {\n    const entry = entries.find((entry2) => entry2.axis?.$refText === axis.name);\n    if (entry === void 0) {\n      throw new Error(\"Missing entry for axis \" + axis.label);\n    }\n    return entry.value;\n  });\n}, \"computeCurveEntries\");\nvar setOptions = /* @__PURE__ */ __name((options) => {\n  const optionMap = options.reduce(\n    (acc, option) => {\n      acc[option.name] = option;\n      return acc;\n    },\n    {}\n  );\n  data.options = {\n    showLegend: optionMap.showLegend?.value ?? defaultOptions.showLegend,\n    ticks: optionMap.ticks?.value ?? defaultOptions.ticks,\n    max: optionMap.max?.value ?? defaultOptions.max,\n    min: optionMap.min?.value ?? defaultOptions.min,\n    graticule: optionMap.graticule?.value ?? defaultOptions.graticule\n  };\n}, \"setOptions\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  data = structuredClone(defaultRadarData);\n}, \"clear\");\nvar db = {\n  getAxes,\n  getCurves,\n  getOptions,\n  setAxes,\n  setCurves,\n  setOptions,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription\n};\n\n// src/diagrams/radar/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  const { axes, curves, options } = ast;\n  db.setAxes(axes);\n  db.setCurves(curves);\n  db.setOptions(options);\n}, \"populate\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"radar\", input);\n    log.debug(ast);\n    populate(ast);\n  }, \"parse\")\n};\n\n// src/diagrams/radar/renderer.ts\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const db2 = diagram2.db;\n  const axes = db2.getAxes();\n  const curves = db2.getCurves();\n  const options = db2.getOptions();\n  const config = db2.getConfig();\n  const title = db2.getDiagramTitle();\n  const svg = selectSvgElement(id);\n  const g = drawFrame(svg, config);\n  const maxValue = options.max ?? Math.max(...curves.map((curve) => Math.max(...curve.entries)));\n  const minValue = options.min;\n  const radius = Math.min(config.width, config.height) / 2;\n  drawGraticule(g, axes, radius, options.ticks, options.graticule);\n  drawAxes(g, axes, radius, config);\n  drawCurves(g, axes, curves, minValue, maxValue, options.graticule, config);\n  drawLegend(g, curves, options.showLegend, config);\n  g.append(\"text\").attr(\"class\", \"radarTitle\").text(title).attr(\"x\", 0).attr(\"y\", -config.height / 2 - config.marginTop);\n}, \"draw\");\nvar drawFrame = /* @__PURE__ */ __name((svg, config) => {\n  const totalWidth = config.width + config.marginLeft + config.marginRight;\n  const totalHeight = config.height + config.marginTop + config.marginBottom;\n  const center = {\n    x: config.marginLeft + config.width / 2,\n    y: config.marginTop + config.height / 2\n  };\n  svg.attr(\"viewbox\", `0 0 ${totalWidth} ${totalHeight}`).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n  return svg.append(\"g\").attr(\"transform\", `translate(${center.x}, ${center.y})`);\n}, \"drawFrame\");\nvar drawGraticule = /* @__PURE__ */ __name((g, axes, radius, ticks, graticule) => {\n  if (graticule === \"circle\") {\n    for (let i = 0; i < ticks; i++) {\n      const r = radius * (i + 1) / ticks;\n      g.append(\"circle\").attr(\"r\", r).attr(\"class\", \"radarGraticule\");\n    }\n  } else if (graticule === \"polygon\") {\n    const numAxes = axes.length;\n    for (let i = 0; i < ticks; i++) {\n      const r = radius * (i + 1) / ticks;\n      const points = axes.map((_, j) => {\n        const angle = 2 * j * Math.PI / numAxes - Math.PI / 2;\n        const x = r * Math.cos(angle);\n        const y = r * Math.sin(angle);\n        return `${x},${y}`;\n      }).join(\" \");\n      g.append(\"polygon\").attr(\"points\", points).attr(\"class\", \"radarGraticule\");\n    }\n  }\n}, \"drawGraticule\");\nvar drawAxes = /* @__PURE__ */ __name((g, axes, radius, config) => {\n  const numAxes = axes.length;\n  for (let i = 0; i < numAxes; i++) {\n    const label = axes[i].label;\n    const angle = 2 * i * Math.PI / numAxes - Math.PI / 2;\n    g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", radius * config.axisScaleFactor * Math.cos(angle)).attr(\"y2\", radius * config.axisScaleFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLine\");\n    g.append(\"text\").text(label).attr(\"x\", radius * config.axisLabelFactor * Math.cos(angle)).attr(\"y\", radius * config.axisLabelFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLabel\");\n  }\n}, \"drawAxes\");\nfunction drawCurves(g, axes, curves, minValue, maxValue, graticule, config) {\n  const numAxes = axes.length;\n  const radius = Math.min(config.width, config.height) / 2;\n  curves.forEach((curve, index) => {\n    if (curve.entries.length !== numAxes) {\n      return;\n    }\n    const points = curve.entries.map((entry, i) => {\n      const angle = 2 * Math.PI * i / numAxes - Math.PI / 2;\n      const r = relativeRadius(entry, minValue, maxValue, radius);\n      const x = r * Math.cos(angle);\n      const y = r * Math.sin(angle);\n      return { x, y };\n    });\n    if (graticule === \"circle\") {\n      g.append(\"path\").attr(\"d\", closedRoundCurve(points, config.curveTension)).attr(\"class\", `radarCurve-${index}`);\n    } else if (graticule === \"polygon\") {\n      g.append(\"polygon\").attr(\"points\", points.map((p) => `${p.x},${p.y}`).join(\" \")).attr(\"class\", `radarCurve-${index}`);\n    }\n  });\n}\n__name(drawCurves, \"drawCurves\");\nfunction relativeRadius(value, minValue, maxValue, radius) {\n  const clippedValue = Math.min(Math.max(value, minValue), maxValue);\n  return radius * (clippedValue - minValue) / (maxValue - minValue);\n}\n__name(relativeRadius, \"relativeRadius\");\nfunction closedRoundCurve(points, tension) {\n  const numPoints = points.length;\n  let d = `M${points[0].x},${points[0].y}`;\n  for (let i = 0; i < numPoints; i++) {\n    const p0 = points[(i - 1 + numPoints) % numPoints];\n    const p1 = points[i];\n    const p2 = points[(i + 1) % numPoints];\n    const p3 = points[(i + 2) % numPoints];\n    const cp1 = {\n      x: p1.x + (p2.x - p0.x) * tension,\n      y: p1.y + (p2.y - p0.y) * tension\n    };\n    const cp2 = {\n      x: p2.x - (p3.x - p1.x) * tension,\n      y: p2.y - (p3.y - p1.y) * tension\n    };\n    d += ` C${cp1.x},${cp1.y} ${cp2.x},${cp2.y} ${p2.x},${p2.y}`;\n  }\n  return `${d} Z`;\n}\n__name(closedRoundCurve, \"closedRoundCurve\");\nfunction drawLegend(g, curves, showLegend, config) {\n  if (!showLegend) {\n    return;\n  }\n  const legendX = (config.width / 2 + config.marginRight) * 3 / 4;\n  const legendY = -(config.height / 2 + config.marginTop) * 3 / 4;\n  const lineHeight = 20;\n  curves.forEach((curve, index) => {\n    const itemGroup = g.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + index * lineHeight})`);\n    itemGroup.append(\"rect\").attr(\"width\", 12).attr(\"height\", 12).attr(\"class\", `radarLegendBox-${index}`);\n    itemGroup.append(\"text\").attr(\"x\", 16).attr(\"y\", 0).attr(\"class\", \"radarLegendText\").text(curve.label);\n  });\n}\n__name(drawLegend, \"drawLegend\");\nvar renderer = { draw };\n\n// src/diagrams/radar/styles.ts\nvar genIndexStyles = /* @__PURE__ */ __name((themeVariables, radarOptions) => {\n  let sections = \"\";\n  for (let i = 0; i < themeVariables.THEME_COLOR_LIMIT; i++) {\n    const indexColor = themeVariables[`cScale${i}`];\n    sections += `\n\t\t.radarCurve-${i} {\n\t\t\tcolor: ${indexColor};\n\t\t\tfill: ${indexColor};\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\n\t\t\tstroke: ${indexColor};\n\t\t\tstroke-width: ${radarOptions.curveStrokeWidth};\n\t\t}\n\t\t.radarLegendBox-${i} {\n\t\t\tfill: ${indexColor};\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\n\t\t\tstroke: ${indexColor};\n\t\t}\n\t\t`;\n  }\n  return sections;\n}, \"genIndexStyles\");\nvar buildRadarStyleOptions = /* @__PURE__ */ __name((radar) => {\n  const defaultThemeVariables = getThemeVariables();\n  const currentConfig = getConfig();\n  const themeVariables = cleanAndMerge(defaultThemeVariables, currentConfig.themeVariables);\n  const radarOptions = cleanAndMerge(themeVariables.radar, radar);\n  return { themeVariables, radarOptions };\n}, \"buildRadarStyleOptions\");\nvar styles = /* @__PURE__ */ __name(({ radar } = {}) => {\n  const { themeVariables, radarOptions } = buildRadarStyleOptions(radar);\n  return `\n\t.radarTitle {\n\t\tfont-size: ${themeVariables.fontSize};\n\t\tcolor: ${themeVariables.titleColor};\n\t\tdominant-baseline: hanging;\n\t\ttext-anchor: middle;\n\t}\n\t.radarAxisLine {\n\t\tstroke: ${radarOptions.axisColor};\n\t\tstroke-width: ${radarOptions.axisStrokeWidth};\n\t}\n\t.radarAxisLabel {\n\t\tdominant-baseline: middle;\n\t\ttext-anchor: middle;\n\t\tfont-size: ${radarOptions.axisLabelFontSize}px;\n\t\tcolor: ${radarOptions.axisColor};\n\t}\n\t.radarGraticule {\n\t\tfill: ${radarOptions.graticuleColor};\n\t\tfill-opacity: ${radarOptions.graticuleOpacity};\n\t\tstroke: ${radarOptions.graticuleColor};\n\t\tstroke-width: ${radarOptions.graticuleStrokeWidth};\n\t}\n\t.radarLegendText {\n\t\ttext-anchor: start;\n\t\tfont-size: ${radarOptions.legendFontSize}px;\n\t\tdominant-baseline: hanging;\n\t}\n\t${genIndexStyles(themeVariables, radarOptions)}\n\t`;\n}, \"styles\");\n\n// src/diagrams/radar/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n"],"names":["populateCommonDb","ast","db","accDescr","setAccDescription","accTitle","setAccTitle","title","setDiagramTitle","defaultOptions","showLegend","ticks","max","min","graticule","defaultRadarData","axes","curves","options","data","structuredClone","DEFAULT_RADAR_CONFIG","radar","getConfig2","config","getAxes","getCurves","getOptions","setAxes","map","axis","name","label","setCurves","curve","entries","computeCurveEntries","entry","value","length","Error","find","entry2","$refText","setOptions","optionMap","reduce","acc","option","clear2","getConfig","clear","getAccTitle","getDiagramTitle","getAccDescription","populate","parser","parse","async","input","debug","draw","_text","id","_version","diagram2","db2","svg","g","drawFrame","maxValue","Math","minValue","radius","width","height","drawGraticule","drawAxes","drawCurves","drawLegend","append","attr","text","marginTop","totalWidth","marginLeft","marginRight","totalHeight","marginBottom","center","x","y","i","r","numAxes","points","_","j","angle","PI","cos","sin","join","axisScaleFactor","axisLabelFactor","forEach","index","relativeRadius","closedRoundCurve","curveTension","p","clippedValue","tension","numPoints","d","p0","p1","p2","p3","cp1","cp2","legendX","legendY","lineHeight","itemGroup","renderer","genIndexStyles","themeVariables","radarOptions","sections","THEME_COLOR_LIMIT","indexColor","curveOpacity","curveStrokeWidth","buildRadarStyleOptions","defaultThemeVariables","currentConfig","styles","fontSize","titleColor","axisColor","axisStrokeWidth","axisLabelFontSize","graticuleColor","graticuleOpacity","graticuleStrokeWidth","legendFontSize","diagram"],"sourceRoot":""}