{"version":3,"file":"6974.a6ca969044617c5a5dd4.js?v=a6ca969044617c5a5dd4","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/lodash-es/clone.js","webpack://@jupyterlab/application-top/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/chunks/mermaid.core/dagre-OKDRZEBW.mjs"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import {\n  clear as clear2,\n  insertEdge,\n  insertEdgeLabel,\n  markers_default,\n  positionEdgeLabel\n} from \"./chunk-IIMUDSI4.mjs\";\nimport \"./chunk-VV3M67IP.mjs\";\nimport {\n  clear,\n  clear2 as clear3,\n  insertCluster,\n  insertNode,\n  positionNode,\n  setNodeElem,\n  updateNodeBounds\n} from \"./chunk-HRU6DDCH.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-K557N5IZ.mjs\";\nimport \"./chunk-H2D2JQ3I.mjs\";\nimport \"./chunk-C3MQ5ANM.mjs\";\nimport \"./chunk-O4NI6UNU.mjs\";\nimport {\n  __name,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-YTJNT7DU.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ __name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb.get(e.v),\n      \" --- \",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb.get(node).externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.trace(\n          \"Setting data for parent cluster XXX\\n Node.id = \",\n          v,\n          \"\\n data=\",\n          data.height,\n          \"\\nParent cluster\",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\n          \"New compound node after recursive render XAX\",\n          v,\n          \"width\",\n          // node,\n          node.width,\n          \"height\",\n          node.height\n          // node.x,\n          // node.y\n        );\n        setNodeElem(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.trace(\n            \"Cluster - the non recursive path XBX\",\n            v,\n            node.id,\n            node,\n            node.width,\n            \"Graph:\",\n            graph\n          );\n          log.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ __name(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\n        \"Fix\",\n        clusterDb,\n        \"ids:\",\n        e.v,\n        e.w,\n        \"Translating: \",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      log.info(\n        \"Position XBX => \" + v + \": (\" + node.x,\n        \",\" + node.y,\n        \") width: \",\n        node.width,\n        \" height: \",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        log.info(\n          \"A tainted cluster node XBX1\",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        positionNode(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\n            \"A pure cluster node XBX1\",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n          await insertCluster(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          log.info(\n            \"A regular node XBX1 - using the padding\",\n            node.id,\n            \"parent\",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            \"offsetY\",\n            node.offsetY,\n            \"parent\",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          positionNode(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return { elem, diff };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeStart = \"none\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      edge2.arrowTypeStart = \"none\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, \"render\");\nexport {\n  render\n};\n"],"names":["CLONE_SYMBOLS_FLAG","clone","value","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","read","Graph","setGraph","_","each","entry","setNode","setParent","setEdge","clusterDb","Map","descendants","parents","clear4","clear","isDescendant","id","ancestorId","ancestorDescendants","get","trace","includes","edgeInCluster","clusterId","clusterDescendants","info","debug","copy","newGraph","rootId","warn","children","push","forEach","length","data","data2","error","removeNode","extractDescendants","res","child","set","findCommonEdges","id1","id2","edges1","filter","edges2","edges1Prim","map","edges2Prim","result","edgeIn1","some","findNonClusterChild","reserve","_id","commonEdges","getAnchorId","has","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","keys","nonClusterChild","JSON","stringify","removeEdge","fromCluster","toCluster","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","graphlib","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","label","sorter","Object","assign","sorted","sortNodesByHierarchy","recursiveRender","async","_elem","diagramType","parentCluster","siteConfig","elem","insert","attr","clusters","edgePaths","edgeLabels","Promise","all","parse","height","width","o","newEl","diff","config","processEdges","edgePromises","dagre","subGraphTitleTotalMargin","x","y","parentId","halfPadding","padding","labelHeight","labelBBox","offsetY","points","point","startNode","endNode","paths","n","type","isGroup","render","data4Layout","svg","direction","nodeSpacing","flowchart","rankSpacing","element","select","markers","diagramId","start","end","nodeId","specialId1","specialId2","domId","labelStyle","shape","style","edge1","structuredClone","edgeMid","edge2","arrowTypeEnd","arrowTypeStart"],"sourceRoot":""}