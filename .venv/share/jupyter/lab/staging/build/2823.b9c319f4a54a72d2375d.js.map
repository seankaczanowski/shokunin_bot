{"version":3,"file":"2823.b9c319f4a54a72d2375d.js?v=b9c319f4a54a72d2375d","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/coffeescript.js"],"sourcesContent":["var ERRORCLASS = \"error\";\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\nvar delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\nvar identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\nvar atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                \"is\", \"isnt\", \"in\",\n                                \"instanceof\", \"typeof\"]);\nvar indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                      \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\nvar commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                      \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                      \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\nvar keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\nindentKeywords = wordRegexp(indentKeywords);\n\n\nvar stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\nvar regexPrefixes = /^(\\/{3}|\\/)/;\nvar commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\nvar constants = wordRegexp(commonConstants);\n\n// Tokenizers\nfunction tokenBase(stream, state) {\n  // Handle scope changes\n  if (stream.sol()) {\n    if (state.scope.align === null) state.scope.align = false;\n    var scopeOffset = state.scope.offset;\n    if (stream.eatSpace()) {\n      var lineOffset = stream.indentation();\n      if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n        return \"indent\";\n      } else if (lineOffset < scopeOffset) {\n        return \"dedent\";\n      }\n      return null;\n    } else {\n      if (scopeOffset > 0) {\n        dedent(stream, state);\n      }\n    }\n  }\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle docco title comment (single line)\n  if (stream.match(\"####\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle multi line comments\n  if (stream.match(\"###\")) {\n    state.tokenize = longComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Single line comment\n  if (ch === \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle number literals\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n      floatLiteral = true;\n    }\n    if (stream.match(/^-?\\d+\\.\\d*/)) {\n      floatLiteral = true;\n    }\n    if (stream.match(/^-?\\.\\d+/)) {\n      floatLiteral = true;\n    }\n\n    if (floatLiteral) {\n      // prevent from getting extra . on 1..\n      if (stream.peek() == \".\"){\n        stream.backUp(1);\n      }\n      return \"number\";\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^-?0x[0-9a-f]+/i)) {\n      intLiteral = true;\n    }\n    // Decimal\n    if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    if (stream.match(/^-?0(?![\\dx])/i)) {\n      intLiteral = true;\n    }\n    if (intLiteral) {\n      return \"number\";\n    }\n  }\n\n  // Handle strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenFactory(stream.current(), false, \"string\");\n    return state.tokenize(stream, state);\n  }\n  // Handle regex literals\n  if (stream.match(regexPrefixes)) {\n    if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n      state.tokenize = tokenFactory(stream.current(), true, \"string.special\");\n      return state.tokenize(stream, state);\n    } else {\n      stream.backUp(1);\n    }\n  }\n\n\n\n  // Handle operators and delimiters\n  if (stream.match(operators) || stream.match(wordOperators)) {\n    return \"operator\";\n  }\n  if (stream.match(delimiters)) {\n    return \"punctuation\";\n  }\n\n  if (stream.match(constants)) {\n    return \"atom\";\n  }\n\n  if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n    return \"property\";\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(identifiers)) {\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenFactory(delimiter, singleline, outclass) {\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"\\/\\\\]/);\n      if (stream.eat(\"\\\\\")) {\n        stream.next();\n        if (singleline && stream.eol()) {\n          return outclass;\n        }\n      } else if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return outclass;\n      } else {\n        stream.eat(/['\"\\/]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return outclass;\n  };\n}\n\nfunction longComment(stream, state) {\n  while (!stream.eol()) {\n    stream.eatWhile(/[^#]/);\n    if (stream.match(\"###\")) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    stream.eatWhile(\"#\");\n  }\n  return \"comment\";\n}\n\nfunction indent(stream, state, type = \"coffee\") {\n  var offset = 0, align = false, alignOffset = null;\n  for (var scope = state.scope; scope; scope = scope.prev) {\n    if (scope.type === \"coffee\" || scope.type == \"}\") {\n      offset = scope.offset + stream.indentUnit;\n      break;\n    }\n  }\n  if (type !== \"coffee\") {\n    align = null;\n    alignOffset = stream.column() + stream.current().length;\n  } else if (state.scope.align) {\n    state.scope.align = false;\n  }\n  state.scope = {\n    offset: offset,\n    type: type,\n    prev: state.scope,\n    align: align,\n    alignOffset: alignOffset\n  };\n}\n\nfunction dedent(stream, state) {\n  if (!state.scope.prev) return;\n  if (state.scope.type === \"coffee\") {\n    var _indent = stream.indentation();\n    var matched = false;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (_indent === scope.offset) {\n        matched = true;\n        break;\n      }\n    }\n    if (!matched) {\n      return true;\n    }\n    while (state.scope.prev && state.scope.offset !== _indent) {\n      state.scope = state.scope.prev;\n    }\n    return false;\n  } else {\n    state.scope = state.scope.prev;\n    return false;\n  }\n}\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle scope changes.\n  if (current === \"return\") {\n    state.dedent = true;\n  }\n  if (((current === \"->\" || current === \"=>\") && stream.eol())\n      || style === \"indent\") {\n    indent(stream, state);\n  }\n  var delimiter_index = \"[({\".indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n  }\n  if (indentKeywords.exec(current)){\n    indent(stream, state);\n  }\n  if (current == \"then\"){\n    dedent(stream, state);\n  }\n\n\n  if (style === \"dedent\") {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = \"])}\".indexOf(current);\n  if (delimiter_index !== -1) {\n    while (state.scope.type == \"coffee\" && state.scope.prev)\n      state.scope = state.scope.prev;\n    if (state.scope.type == current)\n      state.scope = state.scope.prev;\n  }\n  if (state.dedent && stream.eol()) {\n    if (state.scope.type == \"coffee\" && state.scope.prev)\n      state.scope = state.scope.prev;\n    state.dedent = false;\n  }\n\n  return style == \"indent\" || style == \"dedent\" ? null : style;\n}\n\nexport const coffeeScript = {\n  name: \"coffeescript\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scope: {offset: 0, type:\"coffee\", prev: null, align: false},\n      prop: false,\n      dedent: 0\n    };\n  },\n\n  token: function(stream, state) {\n    var fillAlign = state.scope.align === null && state.scope;\n    if (fillAlign && stream.sol()) fillAlign.align = false;\n\n    var style = tokenLexer(stream, state);\n    if (style && style != \"comment\") {\n      if (fillAlign) fillAlign.align = true;\n      state.prop = style == \"punctuation\" && stream.current() == \".\"\n    }\n\n    return style;\n  },\n\n  indent: function(state, text) {\n    if (state.tokenize != tokenBase) return 0;\n    var scope = state.scope;\n    var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n    if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n    var closes = closer && scope.type === text.charAt(0);\n    if (scope.align)\n      return scope.alignOffset - (closes ? 1 : 0);\n    else\n      return (closes ? scope.prev : scope).offset;\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["ERRORCLASS","wordRegexp","words","RegExp","join","operators","delimiters","identifiers","atProp","wordOperators","indentKeywords","commonKeywords","keywords","concat","stringPrefixes","regexPrefixes","commonConstants","constants","tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","dedent","ch","peek","match","skipToEnd","tokenize","longComment","floatLiteral","backUp","intLiteral","tokenFactory","current","prop","next","delimiter","singleline","outclass","eol","eatWhile","eat","indent","alignOffset","prev","indentUnit","column","length","_indent","matched","tokenLexer","style","delimiter_index","indexOf","slice","exec","coffeeScript","name","startState","token","fillAlign","text","closer","charAt","closes","languageData","commentTokens","line"],"sourceRoot":""}