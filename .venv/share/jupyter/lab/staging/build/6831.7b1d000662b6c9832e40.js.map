{"version":3,"file":"6831.7b1d000662b6c9832e40.js?v=7b1d000662b6c9832e40","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/fcl.js"],"sourcesContent":["var keywords = {\n  \"term\": true,\n  \"method\": true, \"accu\": true,\n  \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n  \"if\": true, \"default\": true\n};\n\nvar start_blocks = {\n  \"var_input\": true,\n  \"var_output\": true,\n  \"fuzzify\": true,\n  \"defuzzify\": true,\n  \"function_block\": true,\n  \"ruleblock\": true\n};\n\nvar end_blocks = {\n  \"end_ruleblock\": true,\n  \"end_defuzzify\": true,\n  \"end_function_block\": true,\n  \"end_fuzzify\": true,\n  \"end_var\": true\n};\n\nvar atoms = {\n  \"true\": true, \"false\": true, \"nan\": true,\n  \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n};\n\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n\n  if (ch == \"/\" || ch == \"(\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n  var cur = stream.current().toLowerCase();\n  if (keywords.propertyIsEnumerable(cur) ||\n      start_blocks.propertyIsEnumerable(cur) ||\n      end_blocks.propertyIsEnumerable(cur)) {\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \"end_block\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const fcl = {\n  name: \"fcl\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    var cur = stream.current().toLowerCase();\n\n    if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n    else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var ctx = state.context;\n\n    var closing = end_blocks.propertyIsEnumerable(textAfter);\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"//\", block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n\n"],"names":["keywords","start_blocks","end_blocks","atoms","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","fcl","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","closing","unit","languageData","commentTokens","line","block","open","close"],"sourceRoot":""}