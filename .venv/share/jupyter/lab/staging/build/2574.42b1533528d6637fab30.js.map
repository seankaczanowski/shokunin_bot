{"version":3,"file":"2574.42b1533528d6637fab30.js?v=42b1533528d6637fab30","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/dockerfile.js","webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    mergeTokens: meta.mergeTokens,\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.dontIndentStates.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n"],"names":["from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","others","instructions","concat","instructionRegex","instructionOnlyLine","instructionWithArguments","dockerFile","start","regex","sol","token","next","single","pop","double","array","arguments","push","languageData","commentTokens","line","simpleMode","states","ensureState","states_","meta","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","Rule","indent","dedent","name","startState","pending","copyState","s","slice","stack","tokenFunction","indentFunction","mergeTokens","Error","toRegex","val","caret","flags","ignoreCase","source","String","asToken","apply","replace","result","this","stream","pend","shift","pos","text","curState","rule","matches","match","indentation","indentUnit","j","backUp","textAfter","dontIndentStates","indexOf","rules","scan","dedentIfLineStart","m","exec"],"sourceRoot":""}