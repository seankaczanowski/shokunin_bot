{"version":3,"file":"4068.481f52594e2f2aad1e4d.js?v=481f52594e2f2aad1e4d","mappings":"4KAAA,IAAIA,EAAU,CACZ,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,YAEjE,IAAIC,EAAiB,CACnB,OAAQ,UAAW,WAAY,WAAY,eAG7C,IAAIC,EAAa,SACjB,IAAIC,EAAY,SAChB,IAAIC,EAAgB,IAAIC,OAAO,KAAOL,EAAQM,KAAK,KAAO,OAC1D,IAAIC,EAAuB,IAAIF,OAAO,KAAOJ,EAAeK,KAAK,KAAO,OACxE,IAAIE,EAAS,UACb,IAAIC,EAAQ,eACZ,IAAIC,EAAa,uBACjB,IAAIC,EAAiB,SACrB,IAAIC,EAAsB,eAE1B,SAASC,EAAeL,GACtB,GAAIA,IAAW,UAAW,MAAO,SACjC,MAAO,QACT,CAEA,SAASM,EAAUC,EAAQC,GACzB,GAAID,EAAOE,MAAO,CAEhBD,EAAME,YAAc,MACpB,GAAIF,EAAMG,UAAYJ,EAAOK,MAAMlB,GAAa,CAE9C,OAAO,IACT,KAAO,CACLc,EAAMG,SAAW,MACjBH,EAAMR,OAAS,IACjB,CAEA,GAAIO,EAAOK,MAAMjB,GAAY,CAC3Ba,EAAMK,UAAY,KAClBL,EAAME,YAAc,KACpB,MAAO,MACT,CAEA,IAAIE,EACJ,IAAIE,EAAiB,MACrB,IAAKF,EAAQL,EAAOK,MAAMb,MACrBe,EAAiB,QAAUF,EAAQL,EAAOK,MAAMhB,IAAiB,CACpEY,EAAMK,UAAY,KAClBL,EAAMG,SAAW,KACjBH,EAAMM,eAAiBA,EACvBN,EAAMR,OAASY,EAAM,GACrB,MAAO,MACT,CAIA,GAAIJ,EAAMK,YAAcD,EAAQL,EAAOK,MAAMZ,IAAU,CACrDQ,EAAMG,SAAW,KACjBH,EAAMM,eAAiB,KACvBN,EAAMR,OAASY,EAAM,GACrB,MAAO,MACT,CAEAJ,EAAMK,UAAY,MAClBN,EAAOQ,YACP,OAAO,IACT,CAEA,GAAIP,EAAME,YAAa,CACrB,GAAIH,EAAOK,MAAMX,GAAQ,MAAO,OAChC,GAAIM,EAAOK,MAAMV,GAAa,MAAO,OACrCK,EAAOQ,YACP,MAAO,MACT,CAEA,GAAIP,EAAMG,SAAU,CAClB,IAAIK,EAAQX,EAAeG,EAAMR,QAEjC,GAAIQ,EAAMM,eAAgB,CACxB,GAAIP,EAAOK,MAAMT,GAAiB,OAAOa,EAAQ,QACjD,GAAIT,EAAOK,MAAMR,GAAsB,OAAOY,CAChD,CACAT,EAAOQ,YACP,OAAOC,CACT,CAEAT,EAAOQ,YACP,OAAO,IACT,CAEO,MAAME,EAAO,CAClBC,KAAM,OACNC,WAAY,WACV,MAAO,CAELT,YAAa,MAEbC,SAAU,MAEVG,eAAgB,MAEhBd,OAAQ,KAERa,UAAW,MAEf,EACAO,MAAOd,EACPe,UAAW,SAASb,GAClBA,EAAMK,UAAYL,EAAME,YAAcF,EAAMG,SAAW,KACzD,EACAW,aAAc,CACZC,aAAc/B,EAAQgC,OAAO/B,I","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/mbox.js"],"sourcesContent":["var rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nexport const mbox = {\n  name: \"mbox\",\n  startState: function() {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function(state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n}\n\n"],"names":["rfc2822","rfc2822NoEmail","whitespace","separator","rfc2822Header","RegExp","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","styleForHeader","readToken","stream","state","sol","inSeparator","inHeader","match","inHeaders","emailPermitted","skipToEnd","style","mbox","name","startState","token","blankLine","languageData","autocomplete","concat"],"sourceRoot":""}