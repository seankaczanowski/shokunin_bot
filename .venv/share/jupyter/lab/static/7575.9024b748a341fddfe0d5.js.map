{"version":3,"file":"7575.9024b748a341fddfe0d5.js?v=9024b748a341fddfe0d5","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/julia.js"],"sourcesContent":["function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n  if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\nvar asciiOperatorsList = [\n  \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\n];\nvar operators = wordRegexp([\n  \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n  \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n  \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n  \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n  \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n                   \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n                   \"finally\", \"catch\", \"do\"];\n\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n                    \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n                    \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n                    \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n                    \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n                    \"bitstype\"];\n\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\n\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\nfunction inArray(state) {\n  return (state.nestedArrays > 0);\n}\n\nfunction inGenerator(state) {\n  return (state.nestedGenerators > 0);\n}\n\nfunction currentScope(state, n) {\n  if (typeof(n) === \"undefined\") { n = 0; }\n  if (state.scopes.length <= n) {\n    return null;\n  }\n  return state.scopes[state.scopes.length - (n + 1)];\n}\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle scope changes\n  var leavingExpr = state.leavingExpr;\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle single line comments\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  }\n\n  // Handle type annotations\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle symbols\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  }\n\n  // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n\n  // Handle operators and Delimiters\n  if (stream.match(operators)) {\n    return \"operator\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n    // Integers\n    if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n    if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n    if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n    // Floats\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  }\n\n  // Handle Chars\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n      state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n      state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n      state.isDefinition = false;\n      return \"def\";\n    }\n    state.leavingExpr = true;\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0)\n      state.tokenize = tokenBase;\n  }\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false, match;\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 1114111) { // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n  if (stream.match(\"'\")) { state.tokenize = tokenBase; }\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n  return tokenString;\n}\n\nexport const julia = {\n  name: \"julia\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var delta = 0;\n    if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n         /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n         /^finally/.test(textAfter) ) {\n      delta = -1;\n    }\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {line: \"#\", block: {open: \"#=\", close: \"=#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};\n"],"names":["wordRegexp","words","end","pre","RegExp","join","octChar","hexChar","sChar","uChar","asciiOperatorsList","operators","delimiters","identifiers","chars","openersList","closersList","keywordsList","builtinsList","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","macroOperators","symbolOperators","inArray","state","nestedArrays","inGenerator","nestedGenerators","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","pop","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","tokenStringFactory","current","isDefinition","next","nestedParameters","nestedComments","isChar","value","parseInt","delimiter","substr","tokenString","eat","eatWhile","julia","name","startState","firstParenPos","token","style","indent","textAfter","cx","delta","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets","autocomplete","concat"],"sourceRoot":""}