{"version":3,"file":"5317.7baff37204697815481b.js?v=7baff37204697815481b","mappings":"6KAAA,IAAIA,EAAiB,wBAErB,SAASC,EAAYC,EAAQC,GAC3B,IAAIC,EAASC,EAAMC,EAAY,MAC/B,OAAQJ,EAAOK,QAAUH,EAAUF,EAAOM,SAAWL,EAAMM,QAAS,CAClE,GAAIL,IAAY,KAAOC,GAAQ,MAAQF,EAAMM,SAAW,IAAK,CAC3DH,EAAY,KACZ,KACF,CACAD,EAAOD,CACT,CACA,GAAIE,EAAW,CACbJ,EAAOQ,OAAO,EAChB,CACA,GAAIN,GAAWD,EAAMM,QAAS,CAC5BN,EAAMQ,eAAiB,KACzB,KAAO,CACLR,EAAMQ,eAAiB,IACzB,CACA,MAAO,QACT,CAEA,SAASC,EAASV,EAAQC,GACxB,IAAIU,EAAKX,EAAOM,OAGhB,GAAIK,IAAO,IAAK,CACd,GAAIX,EAAOY,MAAMd,GAAiB,CAChC,MAAO,sBACT,CACA,MAAO,UACT,CAEA,GAAIG,EAAMQ,eAAgB,CAExBT,EAAOQ,OAAO,GACd,OAAOT,EAAYC,EAAQC,EAC7B,CAGA,GAAID,EAAOY,MAAM,gBAAkBZ,EAAOY,MAAM,iBAAkB,CAChEZ,EAAOQ,OAAO,GACd,MAAO,KACT,CACA,GAAIG,GAAM,IAAK,CACbX,EAAOa,YACP,MAAO,SACT,CAEA,GAAIF,GAAM,KAAOA,GAAM,IAAK,CAE1BV,EAAMM,QAAUI,EAEhB,OAAOZ,EAAYC,EAAQC,EAC7B,CACA,GAAIU,GAAM,KAAOA,GAAM,IAAK,CAC1B,MAAO,SACT,CACA,GAAIA,EAAGC,MAAM,SAAU,CACrB,MAAO,QACT,CACAZ,EAAOc,SAAS,SAChB,OAAO,IACT,CACO,MAAMC,EAAQ,CACnBC,KAAM,QACNC,WAAY,WACV,IAAIhB,EAAQ,CAAC,EACbA,EAAMiB,aAAe,MACrBjB,EAAMkB,UAAY,MAClBlB,EAAMQ,eAAiB,MACvBR,EAAMM,QAAU,MAChB,OAAON,CACT,EACAmB,MAAO,SAAUpB,EAAQC,GACvB,GAAID,EAAOqB,WAAY,OAAO,KAC9B,OAAOX,EAASV,EAAQC,EAC1B,E","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/cmake.js"],"sourcesContent":["var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\nfunction tokenize(stream, state) {\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n    return 'variable';\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\nexport const cmake = {\n  name: \"cmake\",\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};\n\n"],"names":["variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","ch","match","skipToEnd","eatWhile","cmake","name","startState","inDefinition","inInclude","token","eatSpace"],"sourceRoot":""}