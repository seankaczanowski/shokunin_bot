{"version":3,"file":"8830.ee5c7cd4b70d96f93dc4.js?v=ee5c7cd4b70d96f93dc4","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/python.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                      \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                      \"for\", \"from\", \"global\", \"if\", \"import\",\n                      \"lambda\", \"pass\", \"raise\", \"return\",\n                      \"try\", \"while\", \"with\", \"yield\", \"in\", \"False\", \"True\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                      \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                      \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                      \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                      \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                      \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                      \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                      \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                      \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                      \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                      \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                   parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n  var hangingIndent = parserConf.hangingIndent;\n\n  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined)\n    myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n  if (parserConf.extra_builtins != undefined)\n    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"None\", \"aiter\", \"anext\", \"async\", \"await\", \"breakpoint\", \"match\", \"case\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                    \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                    \"unichr\", \"unicode\", \"xrange\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\"\n    if (sol) state.indent = stream.indentation()\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset)\n          pushPyScope(stream, state);\n        else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n          state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state))\n          style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++)\n      if (stream.match(operators[i])) return \"operator\"\n\n    if (stream.match(delimiters)) return \"punctuation\";\n\n    if (state.lastToken == \".\" && stream.match(identifiers))\n      return \"property\";\n\n    if (stream.match(keywords) || stream.match(wordOperators))\n      return \"keyword\";\n\n    if (stream.match(builtins))\n      return \"builtin\";\n\n    if (stream.match(/^(self|cls)\\b/))\n      return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\")\n        return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null :ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function(stream, state) {\n        var inner = tokenBaseInner(stream, state, true)\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1)\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n            else state.tokenize = tokenString\n          }\n        }\n        return inner\n      }\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0)\n          if (stream.current()) return OUTCLASS;\n          else return state.tokenize(stream, state)\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop()\n    state.scopes.push({offset: top(state).offset + stream.indentUnit,\n                       type: \"py\",\n                       align: null})\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n    state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),\n                       type: type,\n                       align: align})\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\")\n      return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n\n    if ((style == \"variable\" || style == \"builtin\")\n        && state.lastToken == \"meta\")\n      style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\")\n      state.dedent = true;\n\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n      pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit)\n        else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n      state.scopes.pop();\n\n    return style;\n  }\n\n  return {\n    name: \"python\",\n\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{offset: 0, type: \"py\", align: null}],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n\n      if (style && style != \"comment\")\n        state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n\n      if (stream.eol() && state.lambda)\n        state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase)\n        return state.tokenize.isString ? null : 0;\n\n      var scope = top(state)\n      var closing = scope.type == textAfter.charAt(0) ||\n          scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n      if (scope.align != null)\n        return scope.align - (closing ? 1 : 0)\n      else\n        return scope.offset - (closing ? hangingIndent || cx.unit : 0)\n    },\n\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {line: \"#\"},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n    }\n  };\n};\n\nvar words = function(str) { return str.split(\" \"); };\n\nexport const python = mkPython({})\n\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                        \"extern gil include nogil property public \"+\n                        \"readonly struct union DEF IF ELIF ELSE\")\n})\n"],"names":["wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","mkPython","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","myKeywords","myBuiltins","extra_keywords","undefined","concat","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","isFmtString","current","toLowerCase","indexOf","tokenize","tokenStringFactory","formatStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","indentUnit","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","name","startState","token","addErr","textAfter","cx","scope","closing","unit","languageData","autocomplete","indentOnInput","commentTokens","line","closeBrackets","brackets","str","split","python","cython"],"sourceRoot":""}