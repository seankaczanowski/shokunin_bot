{"version":3,"file":"8368.e09cbb9a24730e4919a4.js?v=e09cbb9a24730e4919a4","mappings":"2NAAA,SAASA,EAAaC,GACpB,IAAIC,EAAkBD,EAAaC,gBACnC,IAAIC,EAAaF,EAAaG,OAC9B,IAAIC,EAAWJ,EAAaK,MAAQH,EACpC,IAAII,EAAON,EAAaO,WACxB,IAAIC,EAASR,EAAaS,gBAAkB,mBAI5C,IAAIC,EAAW,WACb,SAASC,EAAGC,GAAO,MAAO,CAACA,KAAMA,EAAMC,MAAO,UAAW,CACzD,IAAIC,EAAIH,EAAG,aAAcI,EAAIJ,EAAG,aAAcK,EAAIL,EAAG,aAAcM,EAAIN,EAAG,aAC1E,IAAIO,EAAWP,EAAG,YAAaQ,EAAO,CAACP,KAAM,OAAQC,MAAO,QAE5D,MAAO,CACL,GAAMF,EAAG,MAAO,MAASG,EAAG,KAAQA,EAAG,KAAQC,EAAG,GAAMA,EAAG,IAAOA,EAAG,QAAWA,EAChF,OAAUE,EAAG,MAASA,EAAG,SAAYA,EAAG,IAAON,EAAG,OAAQ,OAAUK,EAAG,KAAQA,EAAG,MAASA,EAC3F,SAAYL,EAAG,YAAa,IAAOA,EAAG,OAAQ,MAASA,EAAG,OAAQ,IAAOA,EAAG,OAC5E,SAAYA,EAAG,YAAa,MAASA,EAAG,SACxC,IAAOA,EAAG,OAAQ,OAAUA,EAAG,UAAW,KAAQA,EAAG,QAAS,QAAWA,EAAG,WAC5E,GAAMO,EAAU,OAAUA,EAAU,WAAcA,EAClD,KAAQC,EAAM,MAASA,EAAM,KAAQA,EAAM,UAAaA,EAAM,IAAOA,EAAM,SAAYA,EACvF,KAAQR,EAAG,QAAS,MAASA,EAAG,SAAU,MAASA,EAAG,QACtD,MAASK,EAAG,OAAUL,EAAG,UAAW,OAAUA,EAAG,UAAW,QAAWK,EACvE,MAASA,EAEb,CAjBe,GAmBf,IAAII,EAAiB,oBACrB,IAAIC,EAAkB,wFAEtB,SAASC,EAAWC,GAClB,IAAIC,EAAU,MAAOC,EAAMC,EAAQ,MACnC,OAAQD,EAAOF,EAAOE,SAAW,KAAM,CACrC,IAAKD,EAAS,CACZ,GAAIC,GAAQ,MAAQC,EAAO,OAC3B,GAAID,GAAQ,IAAKC,EAAQ,UACpB,GAAIA,GAASD,GAAQ,IAAKC,EAAQ,KACzC,CACAF,GAAWA,GAAWC,GAAQ,IAChC,CACF,CAIA,IAAIb,EAAMe,EACV,SAASC,EAAIC,EAAIhB,EAAOiB,GACtBlB,EAAOiB,EAAIF,EAAUG,EACrB,OAAOjB,CACT,CACA,SAASkB,EAAUR,EAAQS,GACzB,IAAIC,EAAKV,EAAOE,OAChB,GAAIQ,GAAM,KAAOA,GAAM,IAAK,CAC1BD,EAAME,SAAWC,EAAYF,GAC7B,OAAOD,EAAME,SAASX,EAAQS,EAChC,MAAO,GAAIC,GAAM,KAAOV,EAAOa,MAAM,kCAAmC,CACtE,OAAOR,EAAI,SAAU,SACvB,MAAO,GAAIK,GAAM,KAAOV,EAAOa,MAAM,MAAO,CAC1C,OAAOR,EAAI,SAAU,OACvB,MAAO,GAAI,qBAAqBS,KAAKJ,GAAK,CACxC,OAAOL,EAAIK,EACb,MAAO,GAAIA,GAAM,KAAOV,EAAOe,IAAI,KAAM,CACvC,OAAOV,EAAI,KAAM,WACnB,MAAO,GAAIK,GAAM,KAAOV,EAAOa,MAAM,yCAA0C,CAC7E,OAAOR,EAAI,SAAU,SACvB,MAAO,GAAI,KAAKS,KAAKJ,GAAK,CACxBV,EAAOa,MAAM,oDACb,OAAOR,EAAI,SAAU,SACvB,MAAO,GAAIK,GAAM,IAAK,CACpB,GAAIV,EAAOe,IAAI,KAAM,CACnBN,EAAME,SAAWK,EACjB,OAAOA,EAAahB,EAAQS,EAC9B,MAAO,GAAIT,EAAOe,IAAI,KAAM,CAC1Bf,EAAOiB,YACP,OAAOZ,EAAI,UAAW,UACxB,MAAO,GAAIa,GAAkBlB,EAAQS,EAAO,GAAI,CAC9CV,EAAWC,GACXA,EAAOa,MAAM,qCACb,OAAOR,EAAI,SAAU,iBACvB,KAAO,CACLL,EAAOe,IAAI,KACX,OAAOV,EAAI,WAAY,WAAYL,EAAOmB,UAC5C,CACF,MAAO,GAAIT,GAAM,IAAK,CACpBD,EAAME,SAAWS,EACjB,OAAOA,EAAWpB,EAAQS,EAC5B,MAAO,GAAIC,GAAM,KAAOV,EAAOqB,QAAU,IAAK,CAC5CrB,EAAOiB,YACP,OAAOZ,EAAI,OAAQ,OACrB,MAAO,GAAIK,GAAM,KAAOV,EAAOsB,SAASrC,GAAS,CAC/C,OAAOoB,EAAI,WAAY,WACzB,MAAO,GAAIK,GAAM,KAAOV,EAAOa,MAAM,QACzBH,GAAM,KAAOV,EAAOa,MAAM,QAAU,KAAKC,KAAKd,EAAOuB,OAAOC,MAAM,EAAGxB,EAAOyB,QAAU,CAChGzB,EAAOiB,YACP,OAAOZ,EAAI,UAAW,UACxB,MAAO,GAAIR,EAAeiB,KAAKJ,GAAK,CAClC,GAAIA,GAAM,MAAQD,EAAMiB,SAAWjB,EAAMiB,QAAQrC,MAAQ,IAAK,CAC5D,GAAIW,EAAOe,IAAI,KAAM,CACnB,GAAIL,GAAM,KAAOA,GAAM,IAAKV,EAAOe,IAAI,IACzC,MAAO,GAAI,cAAcD,KAAKJ,GAAK,CACjCV,EAAOe,IAAIL,GACX,GAAIA,GAAM,IAAKV,EAAOe,IAAIL,EAC5B,CACF,CACA,GAAIA,GAAM,KAAOV,EAAOe,IAAI,KAAM,OAAOV,EAAI,KAC7C,OAAOA,EAAI,WAAY,WAAYL,EAAOmB,UAC5C,MAAO,GAAIlC,EAAO6B,KAAKJ,GAAK,CAC1BV,EAAOsB,SAASrC,GAChB,IAAI0C,EAAO3B,EAAOmB,UAClB,GAAIV,EAAMmB,UAAY,IAAK,CACzB,GAAIzC,EAAS0C,qBAAqBF,GAAO,CACvC,IAAIvC,EAAKD,EAASwC,GAClB,OAAOtB,EAAIjB,EAAGC,KAAMD,EAAGE,MAAOqC,EAChC,CACA,GAAIA,GAAQ,SAAW3B,EAAOa,MAAM,2CAA4C,OAC9E,OAAOR,EAAI,QAAS,UAAWsB,EACnC,CACA,OAAOtB,EAAI,WAAY,WAAYsB,EACrC,CACF,CAEA,SAASf,EAAYkB,GACnB,OAAO,SAAS9B,EAAQS,GACtB,IAAIR,EAAU,MAAOC,EACrB,GAAIvB,GAAcqB,EAAOqB,QAAU,KAAOrB,EAAOa,MAAMf,GAAiB,CACtEW,EAAME,SAAWH,EACjB,OAAOH,EAAI,iBAAkB,OAC/B,CACA,OAAQH,EAAOF,EAAOE,SAAW,KAAM,CACrC,GAAIA,GAAQ4B,IAAU7B,EAAS,MAC/BA,GAAWA,GAAWC,GAAQ,IAChC,CACA,IAAKD,EAASQ,EAAME,SAAWH,EAC/B,OAAOH,EAAI,SAAU,SACvB,CACF,CAEA,SAASW,EAAahB,EAAQS,GAC5B,IAAIsB,EAAW,MAAOrB,EACtB,MAAOA,EAAKV,EAAOE,OAAQ,CACzB,GAAIQ,GAAM,KAAOqB,EAAU,CACzBtB,EAAME,SAAWH,EACjB,KACF,CACAuB,EAAYrB,GAAM,GACpB,CACA,OAAOL,EAAI,UAAW,UACxB,CAEA,SAASe,EAAWpB,EAAQS,GAC1B,IAAIR,EAAU,MAAOC,EACrB,OAAQA,EAAOF,EAAOE,SAAW,KAAM,CACrC,IAAKD,IAAYC,GAAQ,KAAOA,GAAQ,KAAOF,EAAOe,IAAI,MAAO,CAC/DN,EAAME,SAAWH,EACjB,KACF,CACAP,GAAWA,GAAWC,GAAQ,IAChC,CACA,OAAOG,EAAI,QAAS,iBAAkBL,EAAOmB,UAC/C,CAEA,IAAIa,EAAW,SAQf,SAASC,EAAajC,EAAQS,GAC5B,GAAIA,EAAMyB,WAAYzB,EAAMyB,WAAa,KACzC,IAAIC,EAAQnC,EAAOuB,OAAOa,QAAQ,KAAMpC,EAAOyB,OAC/C,GAAIU,EAAQ,EAAG,OAEf,GAAIpD,EAAM,CACR,IAAIsD,EAAI,6CAA6CC,KAAKtC,EAAOuB,OAAOC,MAAMxB,EAAOyB,MAAOU,IAC5F,GAAIE,EAAGF,EAAQE,EAAEE,KACnB,CAEA,IAAIC,EAAQ,EAAGC,EAAe,MAC9B,IAAK,IAAIC,EAAMP,EAAQ,EAAGO,GAAO,IAAKA,EAAK,CACzC,IAAIhC,EAAKV,EAAOuB,OAAOoB,OAAOD,GAC9B,IAAIE,EAAUZ,EAASI,QAAQ1B,GAC/B,GAAIkC,GAAW,GAAKA,EAAU,EAAG,CAC/B,IAAKJ,EAAO,GAAIE,EAAK,KAAO,CAC5B,KAAMF,GAAS,EAAG,CAAE,GAAI9B,GAAM,IAAK+B,EAAe,KAAM,KAAO,CACjE,MAAO,GAAIG,GAAW,GAAKA,EAAU,EAAG,GACpCJ,CACJ,MAAO,GAAIvD,EAAO6B,KAAKJ,GAAK,CAC1B+B,EAAe,IACjB,MAAO,GAAI,UAAU3B,KAAKJ,GAAK,CAC7B,QAAUgC,EAAK,CACb,GAAIA,GAAO,EAAG,OACd,IAAIxC,EAAOF,EAAOuB,OAAOoB,OAAOD,EAAM,GACtC,GAAIxC,GAAQQ,GAAMV,EAAOuB,OAAOoB,OAAOD,EAAM,IAAM,KAAM,CAAEA,IAAO,KAAM,CAC1E,CACF,MAAO,GAAID,IAAiBD,EAAO,GAC/BE,EACF,KACF,CACF,CACA,GAAID,IAAiBD,EAAO/B,EAAMyB,WAAaQ,CACjD,CAIA,IAAIG,EAAc,CAAC,KAAQ,KAAM,OAAU,KAAM,SAAY,KAAM,OAAU,KAC1D,OAAU,KAAM,KAAQ,KAAM,OAAU,KAAM,iBAAkB,MAEnF,SAASC,EAAUC,EAAUC,EAAQ3D,EAAM4D,EAAOC,EAAMC,GACtDC,KAAKL,SAAWA,EAChBK,KAAKJ,OAASA,EACdI,KAAK/D,KAAOA,EACZ+D,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,EACZ,GAAIF,GAAS,KAAMG,KAAKH,MAAQA,CAClC,CAEA,SAASI,EAAQ5C,EAAO6C,GACtB,IAAK,IAAIC,EAAI9C,EAAM+C,UAAWD,EAAGA,EAAIA,EAAErD,KACrC,GAAIqD,EAAEE,MAAQH,EAAS,OAAO,KAChC,IAAK,IAAII,EAAKjD,EAAMkD,QAASD,EAAIA,EAAKA,EAAGR,KAAM,CAC7C,IAAK,IAAIK,EAAIG,EAAGE,KAAML,EAAGA,EAAIA,EAAErD,KAC7B,GAAIqD,EAAEE,MAAQH,EAAS,OAAO,IAClC,CACF,CAEA,SAASO,EAAQpD,EAAOnB,EAAOD,EAAMe,EAASJ,GAC5C,IAAI8D,EAAKrD,EAAMqD,GAGfJ,EAAGjD,MAAQA,EAAOiD,EAAG1D,OAASA,EAAQ0D,EAAGK,OAAS,KAAML,EAAGI,GAAKA,EAAIJ,EAAGpE,MAAQA,EAE/E,IAAKmB,EAAMiB,QAAQsC,eAAe,SAChCvD,EAAMiB,QAAQuB,MAAQ,KAExB,MAAM,KAAM,CACV,IAAIgB,EAAaH,EAAGI,OAASJ,EAAGK,MAAQtF,EAAWuF,EAAaC,EAChE,GAAIJ,EAAW5E,EAAMe,GAAU,CAC7B,MAAM0D,EAAGI,QAAUJ,EAAGA,EAAGI,OAAS,GAAGI,IACnCR,EAAGK,KAAHL,GACF,GAAIJ,EAAGK,OAAQ,OAAOL,EAAGK,OACzB,GAAI1E,GAAQ,YAAcgE,EAAQ5C,EAAOL,GAAU,MAAO,qBAC1D,OAAOd,CACT,CACF,CACF,CAIA,IAAIoE,EAAK,CAACjD,MAAO,KAAMuC,OAAQ,KAAMe,OAAQ,KAAMD,GAAI,MACvD,SAASS,IACP,IAAK,IAAIC,EAAIC,UAAUP,OAAS,EAAGM,GAAK,EAAGA,IAAKd,EAAGI,GAAGY,KAAKD,UAAUD,GACvE,CACA,SAASjE,IACPgE,EAAKI,MAAM,KAAMF,WACjB,OAAO,IACT,CACA,SAASG,EAAOnB,EAAMoB,GACpB,IAAK,IAAItB,EAAIsB,EAAMtB,EAAGA,EAAIA,EAAErD,KAAM,GAAIqD,EAAEE,MAAQA,EAAM,OAAO,KAC7D,OAAO,KACT,CACA,SAASqB,EAASxB,GAChB,IAAI7C,EAAQiD,EAAGjD,MACfiD,EAAGK,OAAS,MACZ,GAAItD,EAAMkD,QAAS,CACjB,GAAIlD,EAAMiB,QAAQyB,MAAQ,OAAS1C,EAAMkD,SAAWlD,EAAMkD,QAAQoB,MAAO,CAEvE,IAAIC,EAAaC,EAAkB3B,EAAS7C,EAAMkD,SAClD,GAAIqB,GAAc,KAAM,CACtBvE,EAAMkD,QAAUqB,EAChB,MACF,CACF,MAAO,IAAKJ,EAAOtB,EAAS7C,EAAM+C,WAAY,CAC5C/C,EAAM+C,UAAY,IAAI0B,EAAI5B,EAAS7C,EAAM+C,WACzC,MACF,CACF,CAEA,GAAI/E,EAAa0G,aAAeP,EAAOtB,EAAS7C,EAAM0E,YACpD1E,EAAM0E,WAAa,IAAID,EAAI5B,EAAS7C,EAAM0E,WAC9C,CACA,SAASF,EAAkB3B,EAASK,GAClC,IAAKA,EAAS,CACZ,OAAO,IACT,MAAO,GAAIA,EAAQoB,MAAO,CACxB,IAAIK,EAAQH,EAAkB3B,EAASK,EAAQT,MAC/C,IAAKkC,EAAO,OAAO,KACnB,GAAIA,GAASzB,EAAQT,KAAM,OAAOS,EAClC,OAAO,IAAI0B,EAAQD,EAAOzB,EAAQC,KAAM,KAC1C,MAAO,GAAIgB,EAAOtB,EAASK,EAAQC,MAAO,CACxC,OAAOD,CACT,KAAO,CACL,OAAO,IAAI0B,EAAQ1B,EAAQT,KAAM,IAAIgC,EAAI5B,EAASK,EAAQC,MAAO,MACnE,CACF,CAEA,SAAS0B,EAAW7B,GAClB,OAAOA,GAAQ,UAAYA,GAAQ,WAAaA,GAAQ,aAAeA,GAAQ,YAAcA,GAAQ,UACvG,CAIA,SAAS4B,EAAQnC,EAAMU,EAAMmB,GAAS3B,KAAKF,KAAOA,EAAME,KAAKQ,KAAOA,EAAMR,KAAK2B,MAAQA,CAAM,CAC7F,SAASG,EAAIzB,EAAMvD,GAAQkD,KAAKK,KAAOA,EAAML,KAAKlD,KAAOA,CAAK,CAE9D,IAAIqF,EAAc,IAAIL,EAAI,OAAQ,IAAIA,EAAI,YAAa,OACvD,SAASM,IACP9B,EAAGjD,MAAMkD,QAAU,IAAI0B,EAAQ3B,EAAGjD,MAAMkD,QAASD,EAAGjD,MAAM+C,UAAW,OACrEE,EAAGjD,MAAM+C,UAAY+B,CACvB,CACA,SAASE,IACP/B,EAAGjD,MAAMkD,QAAU,IAAI0B,EAAQ3B,EAAGjD,MAAMkD,QAASD,EAAGjD,MAAM+C,UAAW,MACrEE,EAAGjD,MAAM+C,UAAY,IACvB,CACAgC,EAAYlB,IAAMmB,EAAiBnB,IAAM,KACzC,SAASoB,IACPhC,EAAGjD,MAAM+C,UAAYE,EAAGjD,MAAMkD,QAAQC,KACtCF,EAAGjD,MAAMkD,QAAUD,EAAGjD,MAAMkD,QAAQT,IACtC,CACAwC,EAAWpB,IAAM,KACjB,SAASqB,EAAQtG,EAAM8D,GACrB,IAAIyC,EAAS,WACX,IAAInF,EAAQiD,EAAGjD,MAAOoF,EAASpF,EAAMsC,SACrC,GAAItC,EAAMiB,QAAQrC,MAAQ,OAAQwG,EAASpF,EAAMiB,QAAQqB,cACpD,IAAK,IAAI+C,EAAQrF,EAAMiB,QAASoE,GAASA,EAAMzG,MAAQ,KAAOyG,EAAM7C,MAAO6C,EAAQA,EAAM5C,KAC5F2C,EAASC,EAAM/C,SACjBtC,EAAMiB,QAAU,IAAIoB,EAAU+C,EAAQnC,EAAG1D,OAAOgD,SAAU3D,EAAM,KAAMoB,EAAMiB,QAASyB,EACvF,EACAyC,EAAOtB,IAAM,KACb,OAAOsB,CACT,CACA,SAASG,IACP,IAAItF,EAAQiD,EAAGjD,MACf,GAAIA,EAAMiB,QAAQwB,KAAM,CACtB,GAAIzC,EAAMiB,QAAQrC,MAAQ,IACxBoB,EAAMsC,SAAWtC,EAAMiB,QAAQqB,SACjCtC,EAAMiB,QAAUjB,EAAMiB,QAAQwB,IAChC,CACF,CACA6C,EAAOzB,IAAM,KAEb,SAAS0B,EAAOC,GACd,SAASC,EAAI7G,GACX,GAAIA,GAAQ4G,EAAQ,OAAO1F,SACtB,GAAI0F,GAAU,KAAO5G,GAAQ,KAAOA,GAAQ,KAAOA,GAAQ,IAAK,OAAOkF,SACvE,OAAOhE,EAAK2F,EACnB,CACA,OAAOA,CACT,CAEA,SAAS7B,EAAUhF,EAAM8G,GACvB,GAAI9G,GAAQ,MAAO,OAAOkB,EAAKoF,EAAQ,SAAUQ,GAAQC,GAAQJ,EAAO,KAAMD,GAC9E,GAAI1G,GAAQ,YAAa,OAAOkB,EAAKoF,EAAQ,QAASU,EAAWhC,EAAW0B,GAC5E,GAAI1G,GAAQ,YAAa,OAAOkB,EAAKoF,EAAQ,QAAStB,EAAW0B,GACjE,GAAI1G,GAAQ,YAAa,OAAOqE,EAAG1D,OAAOa,MAAM,QAAS,OAASN,IAASA,EAAKoF,EAAQ,QAASW,EAAiBN,EAAO,KAAMD,GAC/H,GAAI1G,GAAQ,WAAY,OAAOkB,EAAKyF,EAAO,MAC3C,GAAI3G,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAMF,EAAkBV,GAAOgB,EAAQL,GAC5E,GAAIrG,GAAQ,IAAK,OAAOkB,IACxB,GAAIlB,GAAQ,KAAM,CAChB,GAAIqE,EAAGjD,MAAMiB,QAAQyB,MAAQ,QAAUO,EAAGjD,MAAMqD,GAAGJ,EAAGjD,MAAMqD,GAAGI,OAAS,IAAM6B,EAC5ErC,EAAGjD,MAAMqD,GAAGK,KAAZT,GACF,OAAOnD,EAAKoF,EAAQ,QAASU,EAAWhC,EAAW0B,EAAQQ,GAC7D,CACA,GAAIlH,GAAQ,WAAY,OAAOkB,EAAKiG,IACpC,GAAInH,GAAQ,MAAO,OAAOkB,EAAKoF,EAAQ,QAASF,EAAkBgB,GAASpC,EAAWqB,EAAYK,GAClG,GAAI1G,GAAQ,SAAYN,GAAQoH,GAAS,YAAc,CACrDzC,EAAGK,OAAS,UACZ,OAAOxD,EAAKoF,EAAQ,OAAQtG,GAAQ,QAAUA,EAAO8G,GAAQO,GAAWX,EAC1E,CACA,GAAI1G,GAAQ,WAAY,CACtB,GAAIN,GAAQoH,GAAS,UAAW,CAC9BzC,EAAGK,OAAS,UACZ,OAAOxD,EAAK8D,EACd,MAAO,GAAItF,IAASoH,GAAS,UAAYA,GAAS,QAAUA,GAAS,SAAWzC,EAAG1D,OAAOa,MAAM,SAAU,OAAQ,CAChH6C,EAAGK,OAAS,UACZ,GAAIoC,GAAS,OAAQ,OAAO5F,EAAKoG,SAC5B,GAAIR,GAAS,OAAQ,OAAO5F,EAAKqG,GAAUZ,EAAO,YAAaa,GAAUb,EAAO,WAChF,OAAOzF,EAAKoF,EAAQ,QAASmB,GAASd,EAAO,KAAML,EAAQ,KAAMZ,GAAOgB,EAAQA,EACvF,MAAO,GAAIhH,GAAQoH,GAAS,YAAa,CACvCzC,EAAGK,OAAS,UACZ,OAAOxD,EAAKoF,EAAQ,QAASvB,EAAYC,EAAW0B,EACtD,MAAO,GAAIhH,GAAQoH,GAAS,WAAY,CACtCzC,EAAGK,OAAS,UACZ,OAAOxD,EAAK8D,EACd,KAAO,CACL,OAAO9D,EAAKoF,EAAQ,QAASoB,GAC/B,CACF,CACA,GAAI1H,GAAQ,SAAU,OAAOkB,EAAKoF,EAAQ,QAASU,EAAWL,EAAO,KAAML,EAAQ,IAAK,UAAWF,EACjEV,GAAOgB,EAAQA,EAAQL,GACzD,GAAIrG,GAAQ,OAAQ,OAAOkB,EAAK6D,EAAY4B,EAAO,MACnD,GAAI3G,GAAQ,UAAW,OAAOkB,EAAKyF,EAAO,MAC1C,GAAI3G,GAAQ,QAAS,OAAOkB,EAAKoF,EAAQ,QAASH,EAAawB,EAAmB3C,EAAW0B,EAAQL,GACrG,GAAIrG,GAAQ,SAAU,OAAOkB,EAAKoF,EAAQ,QAASsB,GAAalB,GAChE,GAAI1G,GAAQ,SAAU,OAAOkB,EAAKoF,EAAQ,QAASuB,GAAanB,GAChE,GAAI1G,GAAQ,QAAS,OAAOkB,EAAK8D,GACjC,GAAI8B,GAAS,IAAK,OAAO5F,EAAK6D,EAAYC,GAC1C,OAAOE,EAAKoB,EAAQ,QAASvB,EAAY4B,EAAO,KAAMD,EACxD,CACA,SAASiB,EAAkB3H,GACzB,GAAIA,GAAQ,IAAK,OAAOkB,EAAK4G,GAAQnB,EAAO,KAC9C,CACA,SAAS5B,EAAW/E,EAAM8G,GACxB,OAAOiB,EAAgB/H,EAAM8G,EAAO,MACtC,CACA,SAASkB,EAAkBhI,EAAM8G,GAC/B,OAAOiB,EAAgB/H,EAAM8G,EAAO,KACtC,CACA,SAASE,EAAUhH,GACjB,GAAIA,GAAQ,IAAK,OAAOkF,IACxB,OAAOhE,EAAKoF,EAAQ,KAAMW,EAAiBN,EAAO,KAAMD,EAC1D,CACA,SAASqB,EAAgB/H,EAAM8G,EAAOmB,GACpC,GAAI5D,EAAGjD,MAAMyB,YAAcwB,EAAG1D,OAAOyB,MAAO,CAC1C,IAAI8F,EAAOD,EAAUE,EAAmBC,EACxC,GAAIpI,GAAQ,IAAK,OAAOkB,EAAKiF,EAAaG,EAAQ,KAAM+B,GAASP,GAAQ,KAAMpB,EAAQC,EAAO,MAAOuB,EAAM7B,QACtG,GAAIrG,GAAQ,WAAY,OAAOkF,EAAKiB,EAAasB,GAASd,EAAO,MAAOuB,EAAM7B,EACrF,CAEA,IAAIiC,EAAUL,EAAUM,EAAuBC,EAC/C,GAAIhF,EAAYmB,eAAe3E,GAAO,OAAOkB,EAAKoH,GAClD,GAAItI,GAAQ,WAAY,OAAOkB,EAAKiG,GAAamB,GACjD,GAAItI,GAAQ,SAAYN,GAAQoH,GAAS,YAAc,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKoF,EAAQ,QAASmC,GAAiB/B,EAAS,CACvI,GAAI1G,GAAQ,aAAeA,GAAQ,QAAS,OAAOkB,EAAK+G,EAAUD,EAAoBjD,GACtF,GAAI/E,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAMW,EAAiBN,EAAO,KAAMD,EAAQ4B,GACjF,GAAItI,GAAQ,YAAcA,GAAQ,SAAU,OAAOkB,EAAK+G,EAAUD,EAAoBjD,GACtF,GAAI/E,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAMoC,GAAchC,EAAQ4B,GACjE,GAAItI,GAAQ,IAAK,OAAO2I,GAAaC,GAAS,IAAK,KAAMN,GACzD,GAAItI,GAAQ,QAAS,OAAOkF,EAAK2D,EAAOP,GACxC,GAAItI,GAAQ,MAAO,OAAOkB,EAAK4H,EAAYb,IAC3C,OAAO/G,GACT,CACA,SAAS+F,EAAgBjH,GACvB,GAAIA,EAAKwB,MAAM,cAAe,OAAO0D,IACrC,OAAOA,EAAKH,EACd,CAEA,SAASyD,EAAmBxI,EAAM8G,GAChC,GAAI9G,GAAQ,IAAK,OAAOkB,EAAK+F,GAC7B,OAAOsB,EAAqBvI,EAAM8G,EAAO,MAC3C,CACA,SAASyB,EAAqBvI,EAAM8G,EAAOmB,GACzC,IAAIc,EAAKd,GAAW,MAAQO,EAAqBD,EACjD,IAAIS,EAAOf,GAAW,MAAQlD,EAAaiD,EAC3C,GAAIhI,GAAQ,KAAM,OAAOkB,EAAKiF,EAAa8B,EAAUE,EAAmBC,EAAW/B,GACnF,GAAIrG,GAAQ,WAAY,CACtB,GAAI,UAAUyB,KAAKqF,IAAUpH,GAAQoH,GAAS,IAAK,OAAO5F,EAAK6H,GAC/D,GAAIrJ,GAAQoH,GAAS,KAAOzC,EAAG1D,OAAOa,MAAM,2BAA4B,OACtE,OAAON,EAAKoF,EAAQ,KAAM+B,GAASb,GAAU,KAAMd,EAAQqC,GAC7D,GAAIjC,GAAS,IAAK,OAAO5F,EAAK6D,EAAY4B,EAAO,KAAMqC,GACvD,OAAO9H,EAAK8H,EACd,CACA,GAAIhJ,GAAQ,QAAS,CAAE,OAAOkF,EAAK2D,EAAOE,EAAK,CAC/C,GAAI/I,GAAQ,IAAK,OACjB,GAAIA,GAAQ,IAAK,OAAO2I,GAAaX,EAAmB,IAAK,OAAQe,GACrE,GAAI/I,GAAQ,IAAK,OAAOkB,EAAK+H,GAAUF,GACvC,GAAI/I,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAMW,EAAiBN,EAAO,KAAMD,EAAQqC,GACjF,GAAIrJ,GAAQoH,GAAS,KAAM,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKsG,GAAUuB,EAAI,CAC9E,GAAI/I,GAAQ,SAAU,CACpBqE,EAAGjD,MAAMmB,SAAW8B,EAAGK,OAAS,WAChCL,EAAG1D,OAAOuI,OAAO7E,EAAG1D,OAAO0C,IAAMgB,EAAG1D,OAAOyB,MAAQ,GACnD,OAAOlB,EAAK8H,EACd,CACF,CACA,SAASH,EAAM7I,EAAM8G,GACnB,GAAI9G,GAAQ,QAAS,OAAOkF,IAC5B,GAAI4B,EAAM3E,MAAM2E,EAAMjC,OAAS,IAAM,KAAM,OAAO3D,EAAK2H,GACvD,OAAO3H,EAAK+F,EAAiBkC,EAC/B,CACA,SAASA,EAAcnJ,GACrB,GAAIA,GAAQ,IAAK,CACfqE,EAAGK,OAAS,iBACZL,EAAGjD,MAAME,SAAWS,EACpB,OAAOb,EAAK2H,EACd,CACF,CACA,SAAST,EAAUpI,GACjB4C,EAAayB,EAAG1D,OAAQ0D,EAAGjD,OAC3B,OAAO8D,EAAKlF,GAAQ,IAAMgF,EAAYD,EACxC,CACA,SAASoD,EAAiBnI,GACxB4C,EAAayB,EAAG1D,OAAQ0D,EAAGjD,OAC3B,OAAO8D,EAAKlF,GAAQ,IAAMgF,EAAYgD,EACxC,CACA,SAASc,EAAYb,GACnB,OAAO,SAASjI,GACd,GAAIA,GAAQ,IAAK,OAAOkB,EAAK+G,EAAUmB,GAAgBC,QAClD,GAAIrJ,GAAQ,YAAcN,EAAM,OAAOwB,EAAKoI,GAAerB,EAAUM,EAAuBC,QAC5F,OAAOtD,EAAK+C,EAAUD,EAAoBjD,EACjD,CACF,CACA,SAASsE,EAAOE,EAAGzC,GACjB,GAAIA,GAAS,SAAU,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKsH,EAAqB,CACnF,CACA,SAASY,GAAcG,EAAGzC,GACxB,GAAIA,GAAS,SAAU,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKqH,EAAuB,CACrF,CACA,SAASb,GAAW1H,GAClB,GAAIA,GAAQ,IAAK,OAAOkB,EAAKwF,EAAQ1B,GACrC,OAAOE,EAAKsD,EAAoB7B,EAAO,KAAMD,EAC/C,CACA,SAASuC,GAASjJ,GAChB,GAAIA,GAAQ,WAAY,CAACqE,EAAGK,OAAS,WAAY,OAAOxD,GAAO,CACjE,CACA,SAAS0H,GAAQ5I,EAAM8G,GACrB,GAAI9G,GAAQ,QAAS,CACnBqE,EAAGK,OAAS,WACZ,OAAOxD,EAAK0H,GACd,MAAO,GAAI5I,GAAQ,YAAcqE,EAAGpE,OAAS,UAAW,CACtDoE,EAAGK,OAAS,WACZ,GAAIoC,GAAS,OAASA,GAAS,MAAO,OAAO5F,EAAKsI,IAClD,IAAIxG,EACJ,GAAItD,GAAQ2E,EAAGjD,MAAMyB,YAAcwB,EAAG1D,OAAOyB,QAAUY,EAAIqB,EAAG1D,OAAOa,MAAM,WAAY,QACrF6C,EAAGjD,MAAMyB,WAAawB,EAAG1D,OAAO0C,IAAML,EAAE,GAAG6B,OAC7C,OAAO3D,EAAKuI,GACd,MAAO,GAAIzJ,GAAQ,UAAYA,GAAQ,SAAU,CAC/CqE,EAAGK,OAASpF,EAAa,WAAc+E,EAAGpE,MAAQ,YAClD,OAAOiB,EAAKuI,GACd,MAAO,GAAIzJ,GAAQ,iBAAkB,CACnC,OAAOkB,EAAKuI,GACd,MAAO,GAAI/J,GAAQuG,EAAWa,GAAQ,CACpCzC,EAAGK,OAAS,UACZ,OAAOxD,EAAK0H,GACd,MAAO,GAAI5I,GAAQ,IAAK,CACtB,OAAOkB,EAAK6D,EAAY2E,GAAW/C,EAAO,KAAM8C,GAClD,MAAO,GAAIzJ,GAAQ,SAAU,CAC3B,OAAOkB,EAAK8G,EAAmByB,GACjC,MAAO,GAAI3C,GAAS,IAAK,CACvBzC,EAAGK,OAAS,UACZ,OAAOxD,EAAK0H,GACd,MAAO,GAAI5I,GAAQ,IAAK,CACtB,OAAOkF,EAAKuE,GACd,CACF,CACA,SAASD,GAAaxJ,GACpB,GAAIA,GAAQ,WAAY,OAAOkF,EAAKuE,IACpCpF,EAAGK,OAAS,WACZ,OAAOxD,EAAKiG,GACd,CACA,SAASsC,GAAUzJ,GACjB,GAAIA,GAAQ,IAAK,OAAOkB,EAAK8G,GAC7B,GAAIhI,GAAQ,IAAK,OAAOkF,EAAKiC,GAC/B,CACA,SAASkB,GAASsB,EAAMC,EAAKC,GAC3B,SAASC,EAAQ9J,EAAM8G,GACrB,GAAI+C,EAAMA,EAAI9G,QAAQ/C,IAAS,EAAIA,GAAQ,IAAK,CAC9C,IAAIiF,EAAMZ,EAAGjD,MAAMiB,QACnB,GAAI4C,EAAInB,MAAQ,OAAQmB,EAAI5B,KAAO4B,EAAI5B,KAAO,GAAK,EACnD,OAAOnC,GAAK,SAASlB,EAAM8G,GACzB,GAAI9G,GAAQ4J,GAAO9C,GAAS8C,EAAK,OAAO1E,IACxC,OAAOA,EAAKyE,EACd,GAAGG,EACL,CACA,GAAI9J,GAAQ4J,GAAO9C,GAAS8C,EAAK,OAAO1I,IACxC,GAAI2I,GAAOA,EAAI9G,QAAQ,MAAQ,EAAG,OAAOmC,EAAKyE,GAC9C,OAAOzI,EAAKyF,EAAOiD,GACrB,CACA,OAAO,SAAS5J,EAAM8G,GACpB,GAAI9G,GAAQ4J,GAAO9C,GAAS8C,EAAK,OAAO1I,IACxC,OAAOgE,EAAKyE,EAAMG,EACpB,CACF,CACA,SAASnB,GAAagB,EAAMC,EAAK9F,GAC/B,IAAK,IAAIqB,EAAI,EAAGA,EAAIC,UAAUP,OAAQM,IACpCd,EAAGI,GAAGY,KAAKD,UAAUD,IACvB,OAAOjE,EAAKoF,EAAQsD,EAAK9F,GAAOuE,GAASsB,EAAMC,GAAMlD,EACvD,CACA,SAAShB,GAAM1F,GACb,GAAIA,GAAQ,IAAK,OAAOkB,IACxB,OAAOgE,EAAKF,EAAWU,GACzB,CACA,SAASgE,GAAU1J,EAAM8G,GACvB,GAAIpH,EAAM,CACR,GAAIM,GAAQ,IAAK,OAAOkB,EAAKsG,IAC7B,GAAIV,GAAS,IAAK,OAAO5F,EAAKwI,GAChC,CACF,CACA,SAASK,GAAc/J,EAAM8G,GAC3B,GAAIpH,IAASM,GAAQ,KAAO8G,GAAS,MAAO,OAAO5F,EAAKsG,GAC1D,CACA,SAASwC,GAAahK,GACpB,GAAIN,GAAQM,GAAQ,IAAK,CACvB,GAAIqE,EAAG1D,OAAOa,MAAM,iBAAkB,OAAQ,OAAON,EAAK6D,EAAYkF,GAAMzC,SACvE,OAAOtG,EAAKsG,GACnB,CACF,CACA,SAASyC,GAAKV,EAAGzC,GACf,GAAIA,GAAS,KAAM,CACjBzC,EAAGK,OAAS,UACZ,OAAOxD,GACT,CACF,CACA,SAASsG,GAASxH,EAAM8G,GACtB,GAAIA,GAAS,SAAWA,GAAS,UAAYA,GAAS,SAAWA,GAAS,WAAY,CACpFzC,EAAGK,OAAS,UACZ,OAAOxD,EAAK4F,GAAS,SAAWkB,EAAoBR,GACtD,CACA,GAAIxH,GAAQ,YAAc8G,GAAS,OAAQ,CACzCzC,EAAGK,OAAS,OACZ,OAAOxD,EAAKgJ,GACd,CACA,GAAIpD,GAAS,KAAOA,GAAS,IAAK,OAAO5F,EAAKsG,IAC9C,GAAIxH,GAAQ,UAAYA,GAAQ,UAAYA,GAAQ,OAAQ,OAAOkB,EAAKgJ,IACxE,GAAIlK,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAM+B,GAASb,GAAU,IAAK,KAAMd,EAAQwD,IACjF,GAAIlK,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAM6D,GAAWzD,EAAQwD,IAC9D,GAAIlK,GAAQ,IAAK,OAAOkB,EAAKmH,GAAS+B,GAAS,KAAMC,GAAiBH,IACtE,GAAIlK,GAAQ,IAAK,OAAOkB,EAAKmH,GAASb,GAAU,KAAMA,IACtD,GAAIxH,GAAQ,QAAS,OAAOkF,EAAKoF,GAAWJ,GAC9C,CACA,SAASG,GAAgBrK,GACvB,GAAIA,GAAQ,KAAM,OAAOkB,EAAKsG,GAChC,CACA,SAAS2C,GAAUnK,GACjB,GAAIA,EAAKwB,MAAM,YAAa,OAAON,IACnC,GAAIlB,GAAQ,KAAOA,GAAQ,IAAK,OAAOkB,EAAKiJ,IAC5C,OAAOjF,EAAKqF,GAAUJ,GACxB,CACA,SAASI,GAASvK,EAAM8G,GACtB,GAAI9G,GAAQ,YAAcqE,EAAGpE,OAAS,UAAW,CAC/CoE,EAAGK,OAAS,WACZ,OAAOxD,EAAKqJ,GACd,MAAO,GAAIzD,GAAS,KAAO9G,GAAQ,UAAYA,GAAQ,SAAU,CAC/D,OAAOkB,EAAKqJ,GACd,MAAO,GAAIvK,GAAQ,IAAK,CACtB,OAAOkB,EAAKsG,GACd,MAAO,GAAIxH,GAAQ,IAAK,CACtB,OAAOkB,EAAKyF,EAAO,YAAaoD,GAAepD,EAAO,KAAM4D,GAC9D,MAAO,GAAIvK,GAAQ,IAAK,CACtB,OAAOkF,EAAKsF,GAAcD,GAC5B,MAAO,IAAKvK,EAAKwB,MAAM,cAAe,CACpC,OAAON,GACT,CACF,CACA,SAASoJ,GAAUtK,EAAM8G,GACvB,GAAI9G,GAAQ,QAAS,OAAOkF,IAC5B,GAAI4B,EAAM3E,MAAM2E,EAAMjC,OAAS,IAAM,KAAM,OAAO3D,EAAKoJ,IACvD,OAAOpJ,EAAKsG,GAAUiD,GACxB,CACA,SAASA,GAAkBzK,GAC1B,GAAIA,GAAQ,IAAK,CACdqE,EAAGK,OAAS,iBACZL,EAAGjD,MAAME,SAAWS,EACpB,OAAOb,EAAKoJ,GACd,CACF,CACA,SAASF,GAAQpK,EAAM8G,GACrB,GAAI9G,GAAQ,YAAcqE,EAAG1D,OAAOa,MAAM,WAAY,QAAUsF,GAAS,IAAK,OAAO5F,EAAKkJ,IAC1F,GAAIpK,GAAQ,IAAK,OAAOkB,EAAKsG,IAC7B,GAAIxH,GAAQ,SAAU,OAAOkB,EAAKkJ,IAClC,OAAOlF,EAAKsC,GACd,CACA,SAAS0C,GAAUlK,EAAM8G,GACvB,GAAIA,GAAS,IAAK,OAAO5F,EAAKoF,EAAQ,KAAM+B,GAASb,GAAU,KAAMd,EAAQwD,IAC7E,GAAIpD,GAAS,KAAO9G,GAAQ,KAAO8G,GAAS,IAAK,OAAO5F,EAAKsG,IAC7D,GAAIxH,GAAQ,IAAK,OAAOkB,EAAKsG,GAAUb,EAAO,KAAMuD,IACpD,GAAIpD,GAAS,WAAaA,GAAS,aAAc,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKsG,GAAU,CAChG,GAAIV,GAAS,IAAK,OAAO5F,EAAKsG,GAAUb,EAAO,KAAMa,GACvD,CACA,SAAS8B,GAAcC,EAAGzC,GACxB,GAAIA,GAAS,IAAK,OAAO5F,EAAKoF,EAAQ,KAAM+B,GAASb,GAAU,KAAMd,EAAQwD,GAC/E,CACA,SAASQ,KACP,OAAOxF,EAAKsC,GAAUmD,GACxB,CACA,SAASA,GAAiBpB,EAAGzC,GAC3B,GAAIA,GAAS,IAAK,OAAO5F,EAAKsG,GAChC,CACA,SAAST,GAAOwC,EAAGzC,GACjB,GAAIA,GAAS,OAAQ,CAACzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKoG,GAAQ,CACjE,OAAOpC,EAAKuC,GAASiC,GAAWkB,GAAaC,GAC/C,CACA,SAASpD,GAAQzH,EAAM8G,GACrB,GAAIpH,GAAQuG,EAAWa,GAAQ,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKuG,GAAS,CAC7E,GAAIzH,GAAQ,WAAY,CAAEyF,EAASqB,GAAQ,OAAO5F,GAAQ,CAC1D,GAAIlB,GAAQ,SAAU,OAAOkB,EAAKuG,IAClC,GAAIzH,GAAQ,IAAK,OAAO2I,GAAamC,GAAY,KACjD,GAAI9K,GAAQ,IAAK,OAAO2I,GAAaoC,GAAa,IACpD,CACA,SAASA,GAAY/K,EAAM8G,GACzB,GAAI9G,GAAQ,aAAeqE,EAAG1D,OAAOa,MAAM,QAAS,OAAQ,CAC1DiE,EAASqB,GACT,OAAO5F,EAAK0J,GACd,CACA,GAAI5K,GAAQ,WAAYqE,EAAGK,OAAS,WACpC,GAAI1E,GAAQ,SAAU,OAAOkB,EAAKuG,IAClC,GAAIzH,GAAQ,IAAK,OAAOkF,IACxB,GAAIlF,GAAQ,IAAK,OAAOkB,EAAK6D,EAAY4B,EAAO,KAAMA,EAAO,KAAMoE,IACnE,OAAO7J,EAAKyF,EAAO,KAAMc,GAASmD,GACpC,CACA,SAASE,KACP,OAAO5F,EAAKuC,GAASmD,GACvB,CACA,SAASA,GAAYI,EAAOlE,GAC1B,GAAIA,GAAS,IAAK,OAAO5F,EAAK8G,EAChC,CACA,SAAS6C,GAAW7K,GAClB,GAAIA,GAAQ,IAAK,OAAOkB,EAAK6F,GAC/B,CACA,SAASG,GAAUlH,EAAM8G,GACvB,GAAI9G,GAAQ,aAAe8G,GAAS,OAAQ,OAAO5F,EAAKoF,EAAQ,OAAQ,QAAStB,EAAW0B,EAC9F,CACA,SAASU,GAAQpH,EAAM8G,GACrB,GAAIA,GAAS,QAAS,OAAO5F,EAAKkG,IAClC,GAAIpH,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAM2E,GAAUvE,EACvD,CACA,SAASuE,GAASjL,GAChB,GAAIA,GAAQ,MAAO,OAAOkB,EAAK6F,GAAQmE,IACvC,GAAIlL,GAAQ,WAAY,OAAOkB,EAAKgK,IACpC,OAAOhG,EAAKgG,GACd,CACA,SAASA,GAASlL,EAAM8G,GACtB,GAAI9G,GAAQ,IAAK,OAAOkB,IACxB,GAAIlB,GAAQ,IAAK,OAAOkB,EAAKgK,IAC7B,GAAIpE,GAAS,MAAQA,GAAS,KAAM,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAK6D,EAAYmG,GAAU,CAC/F,OAAOhG,EAAKH,EAAYmG,GAC1B,CACA,SAAS/D,GAAYnH,EAAM8G,GACzB,GAAIA,GAAS,IAAK,CAACzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKiG,GAAa,CACnE,GAAInH,GAAQ,WAAY,CAACyF,EAASqB,GAAQ,OAAO5F,EAAKiG,GAAa,CACnE,GAAInH,GAAQ,IAAK,OAAOkB,EAAKiF,EAAaG,EAAQ,KAAM+B,GAASP,GAAQ,KAAMpB,EAAQsD,GAAchF,EAAWqB,GAChH,GAAI3G,GAAQoH,GAAS,IAAK,OAAO5F,EAAKoF,EAAQ,KAAM+B,GAASqC,GAAW,KAAMhE,EAAQS,GACxF,CACA,SAASqD,GAAaxK,EAAM8G,GAC1B,GAAIA,GAAS,IAAK,CAACzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKsJ,GAAc,CACpE,GAAIxK,GAAQ,WAAY,CAACyF,EAASqB,GAAQ,OAAO5F,EAAKsJ,GAAc,CACpE,GAAIxK,GAAQ,IAAK,OAAOkB,EAAKiF,EAAaG,EAAQ,KAAM+B,GAASP,GAAQ,KAAMpB,EAAQsD,GAAc3D,GACrG,GAAI3G,GAAQoH,GAAS,IAAK,OAAO5F,EAAKoF,EAAQ,KAAM+B,GAASqC,GAAW,KAAMhE,EAAQ8D,GACxF,CACA,SAASjD,GAASvH,EAAM8G,GACtB,GAAI9G,GAAQ,WAAaA,GAAQ,WAAY,CAC3CqE,EAAGK,OAAS,OACZ,OAAOxD,EAAKqG,GACd,MAAO,GAAIT,GAAS,IAAK,CACvB,OAAO5F,EAAKoF,EAAQ,KAAM+B,GAASqC,GAAW,KAAMhE,EACtD,CACF,CACA,SAASoB,GAAO9H,EAAM8G,GACpB,GAAIA,GAAS,IAAK5F,EAAK6D,EAAY+C,IACnC,GAAI9H,GAAQ,SAAU,OAAOkB,EAAK4G,IAClC,GAAIpI,GAAQuG,EAAWa,GAAQ,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAK4G,GAAS,CAC7E,GAAIpI,GAAQM,GAAQ,OAAQ,OAAOkB,EAAKwI,GAAWkB,IACnD,OAAO1F,EAAKuC,GAASiC,GAAWkB,GAClC,CACA,SAASnC,GAAgBzI,EAAM8G,GAE7B,GAAI9G,GAAQ,WAAY,OAAOqH,GAAUrH,EAAM8G,GAC/C,OAAOqE,GAAenL,EAAM8G,EAC9B,CACA,SAASO,GAAUrH,EAAM8G,GACvB,GAAI9G,GAAQ,WAAY,CAACyF,EAASqB,GAAQ,OAAO5F,EAAKiK,GAAgB,CACxE,CACA,SAASA,GAAenL,EAAM8G,GAC5B,GAAIA,GAAS,IAAK,OAAO5F,EAAKoF,EAAQ,KAAM+B,GAASqC,GAAW,KAAMhE,EAAQyE,IAC9E,GAAIrE,GAAS,WAAaA,GAAS,cAAiBpH,GAAQM,GAAQ,IAAM,CACxE,GAAI8G,GAAS,aAAczC,EAAGK,OAAS,UACvC,OAAOxD,EAAKxB,EAAO8H,GAAWzC,EAAYoG,GAC5C,CACA,GAAInL,GAAQ,IAAK,OAAOkB,EAAKoF,EAAQ,KAAM8E,GAAW1E,EACxD,CACA,SAAS0E,GAAUpL,EAAM8G,GACvB,GAAI9G,GAAQ,SACPA,GAAQ,aACP8G,GAAS,UAAYA,GAAS,OAASA,GAAS,OAAUpH,GAAQuG,EAAWa,KAC9EzC,EAAG1D,OAAOa,MAAM,yBAA0B,OAAS,CACtD6C,EAAGK,OAAS,UACZ,OAAOxD,EAAKkK,GACd,CACA,GAAIpL,GAAQ,YAAcqE,EAAGpE,OAAS,UAAW,CAC/CoE,EAAGK,OAAS,WACZ,OAAOxD,EAAKmK,GAAYD,GAC1B,CACA,GAAIpL,GAAQ,UAAYA,GAAQ,SAAU,OAAOkB,EAAKmK,GAAYD,IAClE,GAAIpL,GAAQ,IACV,OAAOkB,EAAK6D,EAAY2E,GAAW/C,EAAO,KAAM0E,GAAYD,IAC9D,GAAItE,GAAS,IAAK,CAChBzC,EAAGK,OAAS,UACZ,OAAOxD,EAAKkK,GACd,CACA,GAAI1L,GAAQM,GAAQ,IAAK,OAAOkF,EAAKsF,GAAcY,IACnD,GAAIpL,GAAQ,KAAOA,GAAQ,IAAK,OAAOkB,EAAKkK,IAC5C,GAAIpL,GAAQ,IAAK,OAAOkB,IACxB,GAAI4F,GAAS,IAAK,OAAO5F,EAAK6D,EAAYqG,GAC5C,CACA,SAASC,GAAWrL,EAAM8G,GACxB,GAAIA,GAAS,KAAOA,GAAS,IAAK,OAAO5F,EAAKmK,IAC9C,GAAIrL,GAAQ,IAAK,OAAOkB,EAAKsG,GAAUoD,IACvC,GAAI9D,GAAS,IAAK,OAAO5F,EAAK8G,GAC9B,IAAI1D,EAAUD,EAAGjD,MAAMiB,QAAQwB,KAAMyH,EAAchH,GAAWA,EAAQR,MAAQ,YAC9E,OAAOoB,EAAKoG,EAAcd,GAAerD,GAC3C,CACA,SAASS,GAAY5H,EAAM8G,GACzB,GAAIA,GAAS,IAAK,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKqK,GAAW5E,EAAO,KAAO,CAChF,GAAIG,GAAS,UAAW,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAK6D,EAAY4B,EAAO,KAAO,CACvF,GAAI3G,GAAQ,IAAK,OAAOkB,EAAKmH,GAASmD,GAAa,KAAMD,GAAW5E,EAAO,MAC3E,OAAOzB,EAAKF,EACd,CACA,SAASwG,GAAYxL,EAAM8G,GACzB,GAAIA,GAAS,KAAM,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKyF,EAAO,YAAc,CAC7E,GAAI3G,GAAQ,WAAY,OAAOkF,EAAK8C,EAAmBwD,GACzD,CACA,SAAS3D,GAAY7H,GACnB,GAAIA,GAAQ,SAAU,OAAOkB,IAC7B,GAAIlB,GAAQ,IAAK,OAAOkF,EAAKH,GAC7B,GAAI/E,GAAQ,IAAK,OAAOkF,EAAKsD,GAC7B,OAAOtD,EAAKuG,GAAYC,GAAkBH,GAC5C,CACA,SAASE,GAAWzL,EAAM8G,GACxB,GAAI9G,GAAQ,IAAK,OAAO2I,GAAa8C,GAAY,KACjD,GAAIzL,GAAQ,WAAYyF,EAASqB,GACjC,GAAIA,GAAS,IAAKzC,EAAGK,OAAS,UAC9B,OAAOxD,EAAKyK,GACd,CACA,SAASD,GAAiB1L,GACxB,GAAIA,GAAQ,IAAK,OAAOkB,EAAKuK,GAAYC,GAC3C,CACA,SAASC,GAAQX,EAAOlE,GACtB,GAAIA,GAAS,KAAM,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAKuK,GAAa,CACvE,CACA,SAASF,GAAUP,EAAOlE,GACxB,GAAIA,GAAS,OAAQ,CAAEzC,EAAGK,OAAS,UAAW,OAAOxD,EAAK6D,EAAa,CACzE,CACA,SAAS2D,GAAa1I,GACpB,GAAIA,GAAQ,IAAK,OAAOkB,IACxB,OAAOgE,EAAKmD,GAASL,EAAmB,KAC1C,CACA,SAASV,KACP,OAAOpC,EAAKoB,EAAQ,QAASmB,GAASd,EAAO,KAAML,EAAQ,KAAM+B,GAASuD,GAAY,KAAMlF,EAAQA,EACtG,CACA,SAASkF,KACP,OAAO1G,EAAKuC,GAASmD,GACvB,CAEA,SAASiB,GAAqBzK,EAAO0K,GACnC,OAAO1K,EAAMmB,UAAY,YAAcnB,EAAMmB,UAAY,KACvD/B,EAAeiB,KAAKqK,EAAUxI,OAAO,KACrC,OAAO7B,KAAKqK,EAAUxI,OAAO,GACjC,CAEA,SAASzB,GAAkBlB,EAAQS,EAAO8H,GACxC,OAAO9H,EAAME,UAAYH,GACvB,iFAAiFM,KAAKL,EAAMmB,WAC3FnB,EAAMmB,UAAY,SAAW,SAASd,KAAKd,EAAOuB,OAAOC,MAAM,EAAGxB,EAAO0C,KAAO6F,GAAU,IAC/F,CAIA,MAAO,CACL9E,KAAMhF,EAAagF,KAEnB2H,WAAY,SAASC,GACnB,IAAI5K,EAAQ,CACVE,SAAUH,EACVoB,SAAU,MACVkC,GAAI,GACJpC,QAAS,IAAIoB,GAAWuI,EAAY,EAAG,QAAS,OAChD7H,UAAW/E,EAAa+E,UACxBG,QAASlF,EAAa+E,WAAa,IAAI6B,EAAQ,KAAM,KAAM,OAC3DtC,SAAU,GAEZ,GAAItE,EAAa0G,mBAAqB1G,EAAa0G,YAAc,SAC/D1E,EAAM0E,WAAa1G,EAAa0G,WAClC,OAAO1E,CACT,EAEA6K,MAAO,SAAStL,EAAQS,GACtB,GAAIT,EAAOuL,MAAO,CAChB,IAAK9K,EAAMiB,QAAQsC,eAAe,SAChCvD,EAAMiB,QAAQuB,MAAQ,MACxBxC,EAAMsC,SAAW/C,EAAOwL,cACxBvJ,EAAajC,EAAQS,EACvB,CACA,GAAIA,EAAME,UAAYK,GAAgBhB,EAAOyL,WAAY,OAAO,KAChE,IAAInM,EAAQmB,EAAME,SAASX,EAAQS,GACnC,GAAIpB,GAAQ,UAAW,OAAOC,EAC9BmB,EAAMmB,SAAWvC,GAAQ,aAAee,GAAW,MAAQA,GAAW,MAAQ,SAAWf,EACzF,OAAOwE,EAAQpD,EAAOnB,EAAOD,EAAMe,EAASJ,EAC9C,EAEA6F,OAAQ,SAASpF,EAAO0K,EAAWzH,GACjC,GAAIjD,EAAME,UAAYK,GAAgBP,EAAME,UAAYS,EAAY,OAAO,KAC3E,GAAIX,EAAME,UAAYH,EAAW,OAAO,EACxC,IAAIkL,EAAYP,GAAaA,EAAUxI,OAAO,GAAIjB,EAAUjB,EAAMiB,QAASiK,EAE3E,IAAK,aAAa7K,KAAKqK,GAAY,IAAK,IAAI3G,EAAI/D,EAAMqD,GAAGI,OAAS,EAAGM,GAAK,IAAKA,EAAG,CAChF,IAAIoH,EAAInL,EAAMqD,GAAGU,GACjB,GAAIoH,GAAK7F,EAAQrE,EAAUA,EAAQwB,UAC9B,GAAI0I,GAAKrF,IAAaqF,GAAKlG,EAAY,KAC9C,CACA,OAAQhE,EAAQrC,MAAQ,QAAUqC,EAAQrC,MAAQ,UAC1CqM,GAAa,MAASC,EAAMlL,EAAMqD,GAAGrD,EAAMqD,GAAGI,OAAS,MACjCyH,GAAO9D,GAAsB8D,GAAO/D,KACpC,mBAAmB9G,KAAKqK,IACpDzJ,EAAUA,EAAQwB,KACpB,GAAIxE,GAAmBgD,EAAQrC,MAAQ,KAAOqC,EAAQwB,KAAK7D,MAAQ,OACjEqC,EAAUA,EAAQwB,KACpB,IAAI7D,EAAOqC,EAAQrC,KAAMwM,EAAUH,GAAarM,EAEhD,GAAIA,GAAQ,SAAU,OAAOqC,EAAQqB,UAAYtC,EAAMmB,UAAY,YAAcnB,EAAMmB,UAAY,IAAMF,EAAQyB,KAAKe,OAAS,EAAI,QAC9H,GAAI7E,GAAQ,QAAUqM,GAAa,IAAK,OAAOhK,EAAQqB,cACvD,GAAI1D,GAAQ,OAAQ,OAAOqC,EAAQqB,SAAWW,EAAGoI,UACjD,GAAIzM,GAAQ,OACf,OAAOqC,EAAQqB,UAAYmI,GAAqBzK,EAAO0K,GAAazM,GAAmBgF,EAAGoI,KAAO,QAC9F,GAAIpK,EAAQyB,MAAQ,WAAa0I,GAAWpN,EAAasN,oBAAsB,MAClF,OAAOrK,EAAQqB,UAAY,sBAAsBjC,KAAKqK,GAAazH,EAAGoI,KAAO,EAAIpI,EAAGoI,WACjF,GAAIpK,EAAQuB,MAAO,OAAOvB,EAAQsB,QAAU6I,EAAU,EAAI,QAC1D,OAAOnK,EAAQqB,UAAY8I,EAAU,EAAInI,EAAGoI,KACnD,EAEAE,aAAc,CACZC,cAAe,oCACfC,cAAerN,EAAWsN,UAAY,CAACC,KAAM,KAAMrH,MAAO,CAACsH,KAAM,KAAMC,MAAO,OAC9EC,cAAe,CAACvK,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MACpDwK,UAAW,KAGjB,CAEO,MAAMC,EAAajO,EAAa,CAACiF,KAAM,eACvC,MAAM3E,EAAON,EAAa,CAACiF,KAAM,OAAQ3E,KAAM,OAC/C,MAAMF,EAASJ,EAAa,CAACiF,KAAM,OAAQ7E,OAAQ,OACnD,MAAMI,EAAaR,EAAa,CAACiF,KAAM,aAAczE,WAAY,M","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/javascript.js"],"sourcesContent":["function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") return pass(quasiType, afterType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n   if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + cx.unit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n      wordChars: \"$\"\n    }\n  };\n};\n\nexport const javascript = mkJavaScript({name: \"javascript\"})\nexport const json = mkJavaScript({name: \"json\", json: true})\nexport const jsonld = mkJavaScript({name: \"json\", jsonld: true})\nexport const typescript = mkJavaScript({name: \"typescript\", typescript: true})\n"],"names":["mkJavaScript","parserConfig","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","type","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","readRegexp","stream","escaped","next","inSet","content","ret","tp","cont","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","indentUnit","token","sol","indentation","eatSpace","firstChar","top","c","closing","unit","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","wordChars","javascript"],"sourceRoot":""}