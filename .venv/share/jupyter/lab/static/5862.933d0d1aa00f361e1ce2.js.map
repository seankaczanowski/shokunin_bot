{"version":3,"file":"5862.933d0d1aa00f361e1ce2.js?v=933d0d1aa00f361e1ce2","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/mathematica.js"],"sourcesContent":["// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase      = \"(?:\\\\d+)\";\nvar pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n// regular expressions\nvar reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // look for numbers\n  // Numbers in a baseform\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  }\n\n  // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  /* In[23] and Out[34] */\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  }\n\n  // usage\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  }\n\n  // message\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  }\n\n  // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // Named characters in Mathematica, like \\[Gamma].\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  }\n\n  // Match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  }\n\n  // Literals like variables, keywords, functions\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  }\n\n  // operators. Note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  stream.next(); // advance the stream.\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next, end = false, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n};\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while(state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n  return 'comment';\n}\n\nexport const mathematica = {\n  name: \"mathematica\",\n  startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n}\n\n"],"names":["Identifier","pBase","pFloat","pFloatBase","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","mathematica","name","startState","token","eatSpace","languageData","commentTokens","block","open","close"],"sourceRoot":""}