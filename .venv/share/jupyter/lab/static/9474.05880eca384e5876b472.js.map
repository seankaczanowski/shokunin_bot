{"version":3,"file":"9474.05880eca384e5876b472.js?v=05880eca384e5876b472","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/turtle.js"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  }\n  else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if(stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if(keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if(ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return null;\n    else if (keywords.test(word))\n      return \"meta\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const turtle = {\n  name: \"turtle\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","turtle","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sourceRoot":""}