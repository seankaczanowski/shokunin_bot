{"version":3,"file":"6874.a644324e522374753c3c.js?v=a644324e522374753c3c","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i)\n    obj[words[i]] = true;\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn-cfg\",\n  keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" +\n                  \" TimeStampFormat LogEventTypes SourceInfoFormat\" +\n                  \" LogEntityName LogSourceInfo DiskFullAction\" +\n                  \" LogFileNumber LogFileSize MatchingHints Detailed\" +\n                  \" Compact SubCategories Stack Single None Seconds\" +\n                  \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" +\n                  \" NumHCs UnixSocketsEnabled LocalAddress\"),\n  fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" +\n                              \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" +\n                              \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" +\n                              \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" +\n                              \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" +\n                              \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" +\n                              \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" +\n                              \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" +\n                              \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" +\n                              \" DEBUG_ENCDEC DEBUG_TESTPORT\" +\n                              \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" +\n                              \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" +\n                              \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" +\n                              \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" +\n                              \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" +\n                              \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" +\n                              \" FUNCTION_RND FUNCTION_UNQUALIFIED\" +\n                              \" MATCHING_DONE MATCHING_MCSUCCESS\" +\n                              \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" +\n                              \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" +\n                              \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" +\n                              \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" +\n                              \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" +\n                              \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" +\n                              \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" +\n                              \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" +\n                              \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" +\n                              \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" +\n                              \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" +\n                              \" PORTEVENT_PCOUT PORTEVENT_PMIN\" +\n                              \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" +\n                              \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" +\n                              \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" +\n                              \" TESTCASE_FINISH TESTCASE_START\" +\n                              \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" +\n                              \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" +\n                              \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" +\n                              \" USER_UNQUALIFIED VERDICTOP_FINAL\" +\n                              \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" +\n                              \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n  externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" +\n                          \" EndTestCase\"),\n  multiLineStrings: true\n}\n\nvar keywords = parserConfig.keywords,\n    fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,\n    externalCommands = parserConfig.externalCommands,\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[\\|]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[:=]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\"){\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  if (ch == \"[\"){\n    stream.eatWhile(/[\\w_\\]]/);\n    return \"number\";\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))\n    return \"atom\";\n  if (externalCommands.propertyIsEnumerable(cur)) return \"deleted\";\n\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped){\n        var afterNext = stream.peek();\n        //look if the character if the quote is like the B in '10100010'B\n        if (afterNext){\n          afterNext = afterNext.toLowerCase();\n          if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n            stream.next();\n        }\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport const ttcnCfg = {\n  name: \"ttcn\",\n  startState: function() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n        && ctx.type == \"statement\"){\n      popContext(state);\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                   && curPunc != ';') || (ctx.type == \"statement\"\n                                                          && curPunc == \"newstatement\")))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["words","str","obj","split","i","length","parserConfig","name","keywords","fileNCtrlMaskOptions","externalCommands","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","ttcnCfg","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"sourceRoot":""}