{"version":3,"file":"1189.b7050c724a3f5bc7080e.js?v=b7050c724a3f5bc7080e","mappings":"2KAAA,SAASA,EAAWC,GAClB,IAAIC,EAAM,CAAC,EAAGC,EAAQF,EAAIG,MAAM,KAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAGH,EAAIC,EAAME,IAAM,KACvD,OAAOH,CACT,CACA,IAAIK,EAAWP,EAAW,iEACA,iEACA,sEACA,yEACA,sEACA,yEACA,2EACA,yEACA,4EACA,yEACA,0EACA,uEACA,SAC1B,IAAIQ,EAAYR,EAAW,kEAC3B,IAAIS,EAAiB,qBACrB,SAASC,EAAMC,EAAQC,EAAOC,GAC5BD,EAAME,SAAWD,EACjB,OAAOA,EAAEF,EAAQC,EACnB,CACA,SAASG,EAAUJ,EAAQC,GACzB,IAAII,EAAeJ,EAAMI,aACzBJ,EAAMI,aAAe,MACrB,IAAIC,EAAKN,EAAOO,OAChB,IAAKD,GAAM,KAAOA,GAAM,MAAQL,EAAMO,SAAU,CAC9C,OAAOT,EAAMC,EAAQC,EAAOQ,EAAYH,GAC1C,MAAO,GAAI,mBAAmBI,KAAKJ,GAAK,CACtC,GAAIA,GAAM,KAAOD,EAAcJ,EAAMO,SAAW,UAC3C,GAAIF,GAAM,IAAKL,EAAMO,SAAW,MACrC,OAAO,IACT,MAAO,GAAI,KAAKE,KAAKJ,GAAK,CACxBN,EAAOW,SAAS,UAChB,MAAO,QACT,MAAO,GAAIL,GAAM,IAAK,CACpB,GAAIN,EAAOY,IAAI,KACb,OAAOb,EAAMC,EAAQC,EAAOY,GAC9B,GAAIP,GAAM,KAAON,EAAOc,MAAM,YAC5B,OAAOf,EAAMC,EAAQC,EAAOc,GAC9Bf,EAAOgB,YACP,MAAO,SACT,MAAO,GAAIV,GAAM,IAAK,CACpBN,EAAOiB,OAAO,KACd,MAAO,SACT,MAAO,GAAIX,GAAM,IAAK,CACpBN,EAAOW,SAAS,qBAChBX,EAAOW,SAAS,KAChBV,EAAMI,aAAe,KACrB,MAAO,SACT,MAAO,GAAIP,EAAeY,KAAKJ,GAAK,CAClCN,EAAOW,SAASb,GAChB,MAAO,SACT,KAAO,CACLE,EAAOW,SAAS,wBAChB,IAAIO,EAAOlB,EAAOmB,UAAUC,cAC5B,GAAIxB,GAAYA,EAASyB,qBAAqBH,GAC5C,MAAO,UACT,GAAIrB,GAAaA,EAAUwB,qBAAqBH,GAAO,CACrDjB,EAAMI,aAAe,KACrB,MAAO,SACT,CACA,OAAO,IACT,CACF,CACA,SAASI,EAAYa,GACnB,OAAO,SAAStB,EAAQC,GACtB,IAAIsB,EAAU,MAAOhB,EAAMiB,EAAM,MACjC,OAAQjB,EAAOP,EAAOO,SAAW,KAAM,CACrC,GAAIA,GAAQe,IAAUC,EAAS,CAC7BC,EAAM,KACN,KACF,CACAD,GAAWA,GAAWhB,GAAQ,IAChC,CACA,GAAIiB,EAAKvB,EAAME,SAAWC,EAC1B,MAAO,QACT,CACF,CACA,SAASS,EAAab,EAAQC,GAC5B,IAAIwB,EAAW,MAAOnB,EACtB,MAAOA,EAAKN,EAAOO,OAAQ,CACzB,GAAID,GAAM,KAAOmB,EAAU,CACzBxB,EAAME,SAAWC,EACjB,KACF,CACAqB,EAAYnB,GAAM,GACpB,CACA,MAAO,SACT,CACA,SAASS,EAAcf,EAAQC,GAC7B,IAAIwB,EAAW,EAAGnB,EAClB,MAAOA,EAAKN,EAAOO,OAAQ,CACzB,GAAID,GAAM,KAAOmB,GAAY,EAAG,CAC9BxB,EAAME,SAAWC,EACjB,KACF,CACA,GAAIE,GAAM,IACRmB,SACG,GAAInB,GAAM,IACbmB,EAAW,CACf,CACA,MAAO,MACT,CACO,MAAMC,EAAM,CACjBC,KAAM,MACNC,WAAY,WACV,MAAO,CACLzB,SAAUC,EACVC,aAAc,MACdG,SAAU,MAEd,EACAqB,MAAO,SAAS7B,EAAQC,GACtB,GAAID,EAAO8B,WAAY,OAAO,KAC9B,OAAO7B,EAAME,SAASH,EAAQC,EAChC,EACA8B,aAAc,CACZC,cAAe,CAACC,KAAM,M","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/tcl.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n                          \"filename flush for foreach format gets glob global history http if \" +\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n                          \"registry regsub rename resource return scan seek set socket source split \" +\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n                          \"vwait\");\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\n    return chain(stream, state, tokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;\n    else if (ch == \")\") state.inParams = false;\n    return null;\n  } else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } else if (ch == \"#\") {\n    if (stream.eat(\"*\"))\n      return chain(stream, state, tokenComment);\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n      return chain(stream, state, tokenUnparsed);\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == '\"') {\n    stream.skipTo(/\"/);\n    return \"comment\";\n  } else if (ch == \"$\") {\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n    stream.eatWhile(/}/);\n    state.beforeParams = true;\n    return \"builtin\";\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"comment\";\n  } else {\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n    var word = stream.current().toLowerCase();\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    if (functions && functions.propertyIsEnumerable(word)) {\n      state.beforeParams = true;\n      return \"keyword\";\n    }\n    return null;\n  }\n}\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\nexport const tcl = {\n  name: \"tcl\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","quote","escaped","end","maybeEnd","tcl","name","startState","token","eatSpace","languageData","commentTokens","line"],"sourceRoot":""}