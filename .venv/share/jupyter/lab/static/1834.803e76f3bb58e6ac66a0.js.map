{"version":3,"file":"1834.803e76f3bb58e6ac66a0.js?v=803e76f3bb58e6ac66a0","mappings":"kLAAA,SAASA,EAAgBC,GACvB,IAAIC,EAAQD,EAAOE,MAAM,UACzBF,EAAOG,YACP,OAAOF,EAAQ,QAAU,IAC3B,CAEO,MAAMG,EAAa,CACxBC,KAAM,aACNC,MAAO,SAASN,EAAQO,GACtB,IAAIC,EACJ,GAAID,EAAMA,OAAS,MAAO,CACxB,GAAIP,EAAOS,QAAUD,EAAIR,EAAOE,MAAM,+BAAgC,CACpEK,EAAMA,MAAQ,UACdA,EAAMG,KAAOF,EAAE,GACf,MAAO,KACT,CACA,OAAOT,EAAgBC,EACzB,MAAO,GAAIO,EAAMA,OAAS,UAAW,CACnC,GAAIP,EAAOS,OAAST,EAAOE,MAAM,SAAU,CACzCK,EAAMA,MAAQ,SACd,MAAO,MACT,KAAO,CACL,IAAII,EAASZ,EAAgBC,GAC7B,GAAIW,EAAQJ,EAAMA,MAAQ,OAC1B,OAAOI,CACT,CACF,MAAO,GAAIJ,EAAMA,OAAS,SAAU,CAClCP,EAAOG,YACPI,EAAMA,MAAQ,UACd,MAAO,QACT,MAAO,GAAIA,EAAMA,OAAS,OAAQ,CAChC,GAAIP,EAAOS,QAAUD,EAAIR,EAAOE,MAAM,6BAA8B,CAClE,GAAIM,EAAE,IAAMD,EAAMG,KAAM,MAAO,QAC/BH,EAAMA,MAAQ,MACd,MAAO,KACT,KAAO,CACL,GAAIP,EAAOY,SAAS,mBAAoB,CACtC,OAAO,IACT,KAAO,CACLZ,EAAOa,OACP,MAAO,OACT,CACF,CACF,MAAO,GAAIN,EAAMA,OAAS,MAAO,CAC/B,OAAOR,EAAgBC,EACzB,CACF,EACAc,UAAW,SAASP,GAClB,GAAIA,EAAMA,OAAS,UAAWA,EAAMA,MAAQ,MAC9C,EACAQ,WAAY,WACV,MAAO,CAACR,MAAO,MAAOG,KAAM,KAC9B,E","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"],"sourcesContent":["function errorIfNotEmpty(stream) {\n  var nonWS = stream.match(/^\\s*\\S/);\n  stream.skipToEnd();\n  return nonWS ? \"error\" : null;\n}\n\nexport const asciiArmor = {\n  name: \"asciiarmor\",\n  token: function(stream, state) {\n    var m;\n    if (state.state == \"top\") {\n      if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n        state.state = \"headers\";\n        state.type = m[1];\n        return \"tag\";\n      }\n      return errorIfNotEmpty(stream);\n    } else if (state.state == \"headers\") {\n      if (stream.sol() && stream.match(/^\\w+:/)) {\n        state.state = \"header\";\n        return \"atom\";\n      } else {\n        var result = errorIfNotEmpty(stream);\n        if (result) state.state = \"body\";\n        return result;\n      }\n    } else if (state.state == \"header\") {\n      stream.skipToEnd();\n      state.state = \"headers\";\n      return \"string\";\n    } else if (state.state == \"body\") {\n      if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n        if (m[1] != state.type) return \"error\";\n        state.state = \"end\";\n        return \"tag\";\n      } else {\n        if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n          return null;\n        } else {\n          stream.next();\n          return \"error\";\n        }\n      }\n    } else if (state.state == \"end\") {\n      return errorIfNotEmpty(stream);\n    }\n  },\n  blankLine: function(state) {\n    if (state.state == \"headers\") state.state = \"body\";\n  },\n  startState: function() {\n    return {state: \"top\", type: null};\n  }\n};\n"],"names":["errorIfNotEmpty","stream","nonWS","match","skipToEnd","asciiArmor","name","token","state","m","sol","type","result","eatWhile","next","blankLine","startState"],"sourceRoot":""}