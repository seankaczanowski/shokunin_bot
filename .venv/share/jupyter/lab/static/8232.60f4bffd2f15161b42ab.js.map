{"version":3,"file":"8232.60f4bffd2f15161b42ab.js?v=60f4bffd2f15161b42ab","mappings":"8KAAA,SAASA,EAAMC,GACb,IAAIC,EAAM,CAAC,EAAGF,EAAQC,EAAIE,MAAM,KAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,IAAM,KACvD,OAAOF,CACT,CACA,IAAII,EAAWN,EACb,yEACE,yEACA,6EACA,0EACA,4EACA,uEACA,uEACA,4EACA,6EACA,qEACA,0EACA,oEACA,yEACA,uEACJ,IAAIO,EAAQ,CAAC,KAAQ,MAErB,IAAIC,EAAiB,mBAErB,SAASC,EAAUC,EAAQC,GACzB,IAAIC,EAAKF,EAAOG,OAChB,GAAID,GAAM,KAAOD,EAAMG,YAAa,CAClCJ,EAAOK,YACP,MAAO,MACT,CACA,GAAIH,GAAM,KAAOA,GAAM,IAAK,CAC1BD,EAAMK,SAAWC,EAAYL,GAC7B,OAAOD,EAAMK,SAASN,EAAQC,EAChC,CACA,GAAIC,GAAM,KAAOF,EAAOQ,IAAI,KAAM,CAChCP,EAAMK,SAAWG,EACjB,OAAOA,EAAaT,EAAQC,EAC9B,CACA,GAAIC,GAAM,IAAK,CACbD,EAAMK,SAAWI,EACjB,OAAOA,EAAmBV,EAAQC,EACpC,CACA,GAAI,mBAAmBU,KAAKT,GAAK,CAC/B,OAAO,IACT,CACA,GAAI,KAAKS,KAAKT,GAAK,CACjBF,EAAOY,SAAS,UAChB,MAAO,QACT,CACA,GAAIV,GAAM,IAAK,CACb,GAAIF,EAAOQ,IAAI,KAAM,CACnBR,EAAOK,YACP,MAAO,SACT,CACF,CACA,GAAIP,EAAea,KAAKT,GAAK,CAC3BF,EAAOY,SAASd,GAChB,MAAO,UACT,CACAE,EAAOY,SAAS,WAChB,IAAIC,EAAMb,EAAOc,UAAUC,cAC3B,GAAInB,EAASoB,qBAAqBH,GAAM,MAAO,UAC/C,GAAIhB,EAAMmB,qBAAqBH,GAAM,MAAO,OAC5C,MAAO,UACT,CAEA,SAASN,EAAYU,GACnB,OAAO,SAASjB,EAAQC,GACtB,IAAIiB,EAAU,MAAOf,EAAMgB,EAAM,MACjC,OAAQhB,EAAOH,EAAOG,SAAW,KAAM,CACrC,GAAIA,GAAQc,IAAUC,EAAS,CAACC,EAAM,KAAM,KAAM,CAClDD,GAAWA,GAAWf,GAAQ,IAChC,CACA,GAAIgB,IAAQD,EAASjB,EAAMK,SAAW,KACtC,MAAO,QACT,CACF,CAEA,SAASG,EAAaT,EAAQC,GAC5B,IAAImB,EAAW,MAAOlB,EACtB,MAAOA,EAAKF,EAAOG,OAAQ,CACzB,GAAID,GAAM,KAAOkB,EAAU,CACzBnB,EAAMK,SAAW,KACjB,KACF,CACAc,EAAYlB,GAAM,GACpB,CACA,MAAO,SACT,CAEA,SAASQ,EAAmBV,EAAQC,GAClC,IAAIC,EACJ,MAAOA,EAAKF,EAAOG,OAAQ,CACzB,GAAID,GAAM,IAAK,CACbD,EAAMK,SAAW,KACjB,KACF,CACF,CACA,MAAO,SACT,CAIO,MAAMe,EAAS,CACpBC,KAAM,SAENC,WAAY,WACV,MAAO,CAACjB,SAAU,KACpB,EAEAkB,MAAO,SAASxB,EAAQC,GACtB,GAAID,EAAOyB,WAAY,OAAO,KAC9B,IAAIC,GAASzB,EAAMK,UAAYP,GAAWC,EAAQC,GAClD,GAAIyB,GAAS,WAAaA,GAAS,OAAQ,OAAOA,EAClD,OAAOA,CACT,EAEAC,aAAc,CACZC,cAAe,YACfC,cAAe,CAACC,MAAO,CAACC,KAAM,KAAMC,MAAO,Q","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/legacy-modes/mode/pascal.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\"null\": true};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current().toLowerCase();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  name: \"pascal\",\n\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n"],"names":["words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","quote","escaped","end","maybeEnd","pascal","name","startState","token","eatSpace","style","languageData","indentOnInput","commentTokens","block","open","close"],"sourceRoot":""}