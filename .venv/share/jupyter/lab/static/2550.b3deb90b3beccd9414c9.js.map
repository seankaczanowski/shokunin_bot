{"version":3,"file":"2550.b3deb90b3beccd9414c9.js?v=b3deb90b3beccd9414c9","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BMEZGHF.mjs","webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/chunks/mermaid.core/diagram-VNBRO52H.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-YTJNT7DU.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  populateCommonDb\n} from \"./chunk-4BMEZGHF.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-O4NI6UNU.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-7B677QYD.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-YTJNT7DU.mjs\";\n\n// src/diagrams/packet/db.ts\nvar defaultPacketData = {\n  packet: []\n};\nvar data = structuredClone(defaultPacketData);\nvar DEFAULT_PACKET_CONFIG = defaultConfig_default.packet;\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_PACKET_CONFIG,\n    ...getConfig().packet\n  });\n  if (config.showBits) {\n    config.paddingY += 10;\n  }\n  return config;\n}, \"getConfig\");\nvar getPacket = /* @__PURE__ */ __name(() => data.packet, \"getPacket\");\nvar pushWord = /* @__PURE__ */ __name((word) => {\n  if (word.length > 0) {\n    data.packet.push(word);\n  }\n}, \"pushWord\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  data = structuredClone(defaultPacketData);\n}, \"clear\");\nvar db = {\n  pushWord,\n  getPacket,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription\n};\n\n// src/diagrams/packet/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\nvar maxPacketSize = 1e4;\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  let lastByte = -1;\n  let word = [];\n  let row = 1;\n  const { bitsPerRow } = db.getConfig();\n  for (let { start, end, label } of ast.blocks) {\n    if (end && end < start) {\n      throw new Error(`Packet block ${start} - ${end} is invalid. End must be greater than start.`);\n    }\n    if (start !== lastByte + 1) {\n      throw new Error(\n        `Packet block ${start} - ${end ?? start} is not contiguous. It should start from ${lastByte + 1}.`\n      );\n    }\n    lastByte = end ?? start;\n    log.debug(`Packet block ${start} - ${lastByte} with label ${label}`);\n    while (word.length <= bitsPerRow + 1 && db.getPacket().length < maxPacketSize) {\n      const [block, nextBlock] = getNextFittingBlock({ start, end, label }, row, bitsPerRow);\n      word.push(block);\n      if (block.end + 1 === row * bitsPerRow) {\n        db.pushWord(word);\n        word = [];\n        row++;\n      }\n      if (!nextBlock) {\n        break;\n      }\n      ({ start, end, label } = nextBlock);\n    }\n  }\n  db.pushWord(word);\n}, \"populate\");\nvar getNextFittingBlock = /* @__PURE__ */ __name((block, row, bitsPerRow) => {\n  if (block.end === void 0) {\n    block.end = block.start;\n  }\n  if (block.start > block.end) {\n    throw new Error(`Block start ${block.start} is greater than block end ${block.end}.`);\n  }\n  if (block.end + 1 <= row * bitsPerRow) {\n    return [block, void 0];\n  }\n  return [\n    {\n      start: block.start,\n      end: row * bitsPerRow - 1,\n      label: block.label\n    },\n    {\n      start: row * bitsPerRow,\n      end: block.end,\n      label: block.label\n    }\n  ];\n}, \"getNextFittingBlock\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"packet\", input);\n    log.debug(ast);\n    populate(ast);\n  }, \"parse\")\n};\n\n// src/diagrams/packet/renderer.ts\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const db2 = diagram2.db;\n  const config = db2.getConfig();\n  const { rowHeight, paddingY, bitWidth, bitsPerRow } = config;\n  const words = db2.getPacket();\n  const title = db2.getDiagramTitle();\n  const totalRowHeight = rowHeight + paddingY;\n  const svgHeight = totalRowHeight * (words.length + 1) - (title ? 0 : rowHeight);\n  const svgWidth = bitWidth * bitsPerRow + 2;\n  const svg = selectSvgElement(id);\n  svg.attr(\"viewbox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  for (const [word, packet] of words.entries()) {\n    drawWord(svg, packet, word, config);\n  }\n  svg.append(\"text\").text(title).attr(\"x\", svgWidth / 2).attr(\"y\", svgHeight - totalRowHeight / 2).attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"packetTitle\");\n}, \"draw\");\nvar drawWord = /* @__PURE__ */ __name((svg, word, rowNumber, { rowHeight, paddingX, paddingY, bitWidth, bitsPerRow, showBits }) => {\n  const group = svg.append(\"g\");\n  const wordY = rowNumber * (rowHeight + paddingY) + paddingY;\n  for (const block of word) {\n    const blockX = block.start % bitsPerRow * bitWidth + 1;\n    const width = (block.end - block.start + 1) * bitWidth - paddingX;\n    group.append(\"rect\").attr(\"x\", blockX).attr(\"y\", wordY).attr(\"width\", width).attr(\"height\", rowHeight).attr(\"class\", \"packetBlock\");\n    group.append(\"text\").attr(\"x\", blockX + width / 2).attr(\"y\", wordY + rowHeight / 2).attr(\"class\", \"packetLabel\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").text(block.label);\n    if (!showBits) {\n      continue;\n    }\n    const isSingleBlock = block.end === block.start;\n    const bitNumberY = wordY - 2;\n    group.append(\"text\").attr(\"x\", blockX + (isSingleBlock ? width / 2 : 0)).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte start\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", isSingleBlock ? \"middle\" : \"start\").text(block.start);\n    if (!isSingleBlock) {\n      group.append(\"text\").attr(\"x\", blockX + width).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte end\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", \"end\").text(block.end);\n    }\n  }\n}, \"drawWord\");\nvar renderer = { draw };\n\n// src/diagrams/packet/styles.ts\nvar defaultPacketStyleOptions = {\n  byteFontSize: \"10px\",\n  startByteColor: \"black\",\n  endByteColor: \"black\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\",\n  blockStrokeColor: \"black\",\n  blockStrokeWidth: \"1\",\n  blockFillColor: \"#efefef\"\n};\nvar styles = /* @__PURE__ */ __name(({ packet } = {}) => {\n  const options = cleanAndMerge(defaultPacketStyleOptions, packet);\n  return `\n\t.packetByte {\n\t\tfont-size: ${options.byteFontSize};\n\t}\n\t.packetByte.start {\n\t\tfill: ${options.startByteColor};\n\t}\n\t.packetByte.end {\n\t\tfill: ${options.endByteColor};\n\t}\n\t.packetLabel {\n\t\tfill: ${options.labelColor};\n\t\tfont-size: ${options.labelFontSize};\n\t}\n\t.packetTitle {\n\t\tfill: ${options.titleColor};\n\t\tfont-size: ${options.titleFontSize};\n\t}\n\t.packetBlock {\n\t\tstroke: ${options.blockStrokeColor};\n\t\tstroke-width: ${options.blockStrokeWidth};\n\t\tfill: ${options.blockFillColor};\n\t}\n\t`;\n}, \"styles\");\n\n// src/diagrams/packet/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n"],"names":["populateCommonDb","ast","db","accDescr","setAccDescription","accTitle","setAccTitle","title","setDiagramTitle","defaultPacketData","packet","data","structuredClone","DEFAULT_PACKET_CONFIG","getConfig2","config","showBits","paddingY","getPacket","pushWord","word","length","push","clear2","getConfig","clear","getAccTitle","getDiagramTitle","getAccDescription","maxPacketSize","populate","lastByte","row","bitsPerRow","start","end","label","blocks","Error","debug","block","nextBlock","getNextFittingBlock","parser","parse","async","input","draw","_text","id","_version","diagram2","db2","rowHeight","bitWidth","words","totalRowHeight","svgHeight","svgWidth","svg","attr","useMaxWidth","entries","drawWord","append","text","rowNumber","paddingX","group","wordY","blockX","width","isSingleBlock","bitNumberY","renderer","defaultPacketStyleOptions","byteFontSize","startByteColor","endByteColor","labelColor","labelFontSize","titleColor","titleFontSize","blockStrokeColor","blockStrokeWidth","blockFillColor","styles","options","diagram"],"sourceRoot":""}